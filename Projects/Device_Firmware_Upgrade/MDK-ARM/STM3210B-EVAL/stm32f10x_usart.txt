; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm32f10x_usart.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\DFU\inc -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;928      */
;;;929    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  43c9              MVNS     r1,r1
;;;930    {
;;;931      /* Check the parameters */
;;;932      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;933      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;934      /* The CTS flag is not available for UART4 and UART5 */
;;;935      if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
;;;936      {
;;;937        assert_param(IS_USART_123_PERIPH(USARTx));
;;;938      } 
;;;939       
;;;940      USARTx->SR = (uint16_t)~USART_FLAG;
000002  8001              STRH     r1,[r0,#0]
;;;941    }
000004  4770              BX       lr
;;;942    
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;1036     */
;;;1037   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  0a0a              LSRS     r2,r1,#8
;;;1038   {
;;;1039     uint16_t bitpos = 0x00, itmask = 0x00;
;;;1040     /* Check the parameters */
;;;1041     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1042     assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;1043     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1044     if (USART_IT == USART_IT_CTS)
;;;1045     {
;;;1046       assert_param(IS_USART_123_PERIPH(USARTx));
;;;1047     }   
;;;1048     
;;;1049     bitpos = USART_IT >> 0x08;
;;;1050     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000002  2101              MOVS     r1,#1
000004  4091              LSLS     r1,r1,r2
;;;1051     USARTx->SR = (uint16_t)~itmask;
000006  43c9              MVNS     r1,r1
000008  8001              STRH     r1,[r0,#0]
;;;1052   }
00000a  4770              BX       lr
;;;1053   /**
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;307      */
;;;308    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  b510              PUSH     {r4,lr}
;;;309    {
;;;310      uint32_t tmpreg = 0x00;
;;;311      /* Check the parameters */
;;;312      assert_param(IS_USART_123_PERIPH(USARTx));
;;;313      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;314      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;315      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;316      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;317      
;;;318    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;319      tmpreg = USARTx->CR2;
000002  8a03              LDRH     r3,[r0,#0x10]
;;;320      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;321      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000004  f24f02ff          MOV      r2,#0xf0ff
000008  4013              ANDS     r3,r3,r2
;;;322      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;323      /* Set CLKEN bit according to USART_Clock value */
;;;324      /* Set CPOL bit according to USART_CPOL value */
;;;325      /* Set CPHA bit according to USART_CPHA value */
;;;326      /* Set LBCL bit according to USART_LastBit value */
;;;327      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
00000a  880a              LDRH     r2,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4322              ORRS     r2,r2,r4
000010  888c              LDRH     r4,[r1,#4]
000012  88c9              LDRH     r1,[r1,#6]
000014  430c              ORRS     r4,r4,r1
000016  4322              ORRS     r2,r2,r4
000018  431a              ORRS     r2,r2,r3
;;;328                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;329      /* Write to USART CR2 */
;;;330      USARTx->CR2 = (uint16_t)tmpreg;
00001a  8202              STRH     r2,[r0,#0x10]
;;;331    }
00001c  bd10              POP      {r4,pc}
;;;332    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;338      */
;;;339    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;340    {
;;;341      /* USART_ClockInitStruct members default value */
;;;342      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;343      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;344      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;345      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;346    }
00000a  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;356      */
;;;357    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;358    {
;;;359      /* Check the parameters */
;;;360      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;361      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;362      
;;;363      if (NewState != DISABLE)
;;;364      {
;;;365        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;366        USARTx->CR1 |= CR1_UE_Set;
;;;367      }
;;;368      else
;;;369      {
;;;370        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;371        USARTx->CR1 &= CR1_UE_Reset;
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L5.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;366
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L5.16|
000010  8181              STRH     r1,[r0,#0xc]          ;366
;;;372      }
;;;373    }
000012  4770              BX       lr
;;;374    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;453      */
;;;454    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;455    {
;;;456      /* Check the parameters */
;;;457      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;458      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;459      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;460      if (NewState != DISABLE)
;;;461      {
;;;462        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;463           DMAR bits in the USART CR3 register */
;;;464        USARTx->CR3 |= USART_DMAReq;
;;;465      }
;;;466      else
;;;467      {
;;;468        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;469           DMAR bits in the USART CR3 register */
;;;470        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  d001              BEQ      |L6.10|
000006  430a              ORRS     r2,r2,r1              ;464
000008  e000              B        |L6.12|
                  |L6.10|
00000a  438a              BICS     r2,r2,r1
                  |L6.12|
00000c  8282              STRH     r2,[r0,#0x14]         ;464
;;;471      }
;;;472    }
00000e  4770              BX       lr
;;;473    
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;135      */
;;;136    void USART_DeInit(USART_TypeDef* USARTx)
000000  4917              LDR      r1,|L7.96|
;;;137    {
000002  b510              PUSH     {r4,lr}
;;;138      /* Check the parameters */
;;;139      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;140    
;;;141      if (USARTx == USART1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L7.30|
;;;142      {
;;;143        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  038c              LSLS     r4,r1,#14
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;144        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L7.30|
;;;145      }
;;;146      else if (USARTx == USART2)
00001e  4911              LDR      r1,|L7.100|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L7.42|
;;;147      {
;;;148        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000024  2101              MOVS     r1,#1
000026  044c              LSLS     r4,r1,#17
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
000028  e010              B        |L7.76|
                  |L7.42|
;;;150      }
;;;151      else if (USARTx == USART3)
00002a  490f              LDR      r1,|L7.104|
00002c  4288              CMP      r0,r1
00002e  d102              BNE      |L7.54|
;;;152      {
;;;153        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000030  2101              MOVS     r1,#1
000032  048c              LSLS     r4,r1,#18
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000034  e00a              B        |L7.76|
                  |L7.54|
;;;155      }    
;;;156      else if (USARTx == UART4)
000036  490d              LDR      r1,|L7.108|
000038  4288              CMP      r0,r1
00003a  d102              BNE      |L7.66|
;;;157      {
;;;158        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  04cc              LSLS     r4,r1,#19
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000040  e004              B        |L7.76|
                  |L7.66|
;;;160      }    
;;;161      else
;;;162      {
;;;163        if (USARTx == UART5)
000042  490b              LDR      r1,|L7.112|
000044  4288              CMP      r0,r1
000046  d10a              BNE      |L7.94|
;;;164        { 
;;;165          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000048  2101              MOVS     r1,#1
00004a  050c              LSLS     r4,r1,#20
                  |L7.76|
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;166          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
000052  4620              MOV      r0,r4
000054  e8bd4010          POP      {r4,lr}
000058  2100              MOVS     r1,#0
00005a  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L7.94|
;;;167        }
;;;168      }
;;;169    }
00005e  bd10              POP      {r4,pc}
;;;170    
                          ENDP

                  |L7.96|
                          DCD      0x40013800
                  |L7.100|
                          DCD      0x40004400
                  |L7.104|
                          DCD      0x40004800
                  |L7.108|
                          DCD      0x40004c00
                  |L7.112|
                          DCD      0x40005000

                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;879      */
;;;880    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  4602              MOV      r2,r0
;;;881    {
;;;882      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;883      /* Check the parameters */
;;;884      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;885      assert_param(IS_USART_FLAG(USART_FLAG));
;;;886      /* The CTS flag is not available for UART4 and UART5 */
;;;887      if (USART_FLAG == USART_FLAG_CTS)
;;;888      {
;;;889        assert_param(IS_USART_123_PERIPH(USARTx));
;;;890      }  
;;;891      
;;;892      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000004  8812              LDRH     r2,[r2,#0]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;893      {
;;;894        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;895      }
;;;896      else
;;;897      {
;;;898        bitstatus = RESET;
;;;899      }
;;;900      return bitstatus;
;;;901    }
00000c  4770              BX       lr
;;;902    
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;962      */
;;;963    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b530              PUSH     {r4,r5,lr}
;;;964    {
;;;965      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;966      ITStatus bitstatus = RESET;
;;;967      /* Check the parameters */
;;;968      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;969      assert_param(IS_USART_GET_IT(USART_IT));
;;;970      /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;971      if (USART_IT == USART_IT_CTS)
;;;972      {
;;;973        assert_param(IS_USART_123_PERIPH(USARTx));
;;;974      }   
;;;975      
;;;976      /* Get the USART register index */
;;;977      usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;978      /* Get the interrupt position */
;;;979      itmask = USART_IT & IT_Mask;
000002  f001021f          AND      r2,r1,#0x1f
;;;980      itmask = (uint32_t)0x01 << itmask;
000006  2401              MOVS     r4,#1
000008  2500              MOVS     r5,#0                 ;966
00000a  f3c11342          UBFX     r3,r1,#5,#3           ;977
00000e  fa04f202          LSL      r2,r4,r2
;;;981      
;;;982      if (usartreg == 0x01) /* The IT  is in CR1 register */
000012  2b01              CMP      r3,#1
000014  d00f              BEQ      |L9.54|
;;;983      {
;;;984        itmask &= USARTx->CR1;
;;;985      }
;;;986      else if (usartreg == 0x02) /* The IT  is in CR2 register */
000016  2b02              CMP      r3,#2
000018  d00f              BEQ      |L9.58|
;;;987      {
;;;988        itmask &= USARTx->CR2;
;;;989      }
;;;990      else /* The IT  is in CR3 register */
;;;991      {
;;;992        itmask &= USARTx->CR3;
00001a  8a83              LDRH     r3,[r0,#0x14]
                  |L9.28|
;;;993      }
;;;994      
;;;995      bitpos = USART_IT >> 0x08;
00001c  ea4f2111          LSR      r1,r1,#8
;;;996      bitpos = (uint32_t)0x01 << bitpos;
;;;997      bitpos &= USARTx->SR;
000020  8800              LDRH     r0,[r0,#0]
000022  4213              TST      r3,r2                 ;988
000024  fa04f401          LSL      r4,r4,r1              ;996
000028  ea000004          AND      r0,r0,r4
00002c  d001              BEQ      |L9.50|
;;;998      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
00002e  b100              CBZ      r0,|L9.50|
;;;999      {
;;;1000       bitstatus = SET;
000030  2501              MOVS     r5,#1
                  |L9.50|
;;;1001     }
;;;1002     else
;;;1003     {
;;;1004       bitstatus = RESET;
;;;1005     }
;;;1006     
;;;1007     return bitstatus;  
000032  4628              MOV      r0,r5
;;;1008   }
000034  bd30              POP      {r4,r5,pc}
                  |L9.54|
000036  8983              LDRH     r3,[r0,#0xc]          ;984
000038  e7f0              B        |L9.28|
                  |L9.58|
00003a  8a03              LDRH     r3,[r0,#0x10]         ;988
00003c  e7ee              B        |L9.28|
;;;1009   
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;736      */
;;;737    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;738    {
;;;739      /* Check the parameters */
;;;740      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;741      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;742      
;;;743      if (NewState != DISABLE)
;;;744      {
;;;745        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;746        USARTx->CR3 |= CR3_HDSEL_Set;
;;;747      }
;;;748      else
;;;749      {
;;;750        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;751        USARTx->CR3 &= CR3_HDSEL_Reset;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L10.12|
000006  f0410108          ORR      r1,r1,#8              ;746
00000a  e001              B        |L10.16|
                  |L10.12|
00000c  f0210108          BIC      r1,r1,#8
                  |L10.16|
000010  8281              STRH     r1,[r0,#0x14]         ;746
;;;752      }
;;;753    }
000012  4770              BX       lr
;;;754    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;393      */
;;;394    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;395    {
;;;396      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;397      uint32_t usartxbase = 0x00;
;;;398      /* Check the parameters */
;;;399      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;400      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;401      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;402      /* The CTS interrupt is not available for UART4 and UART5 */
;;;403      if (USART_IT == USART_IT_CTS)
;;;404      {
;;;405        assert_param(IS_USART_123_PERIPH(USARTx));
;;;406      }   
;;;407      
;;;408      usartxbase = (uint32_t)USARTx;
;;;409    
;;;410      /* Get the USART register index */
;;;411      usartreg = (((uint8_t)USART_IT) >> 0x05);
000002  f3c11342          UBFX     r3,r1,#5,#3
;;;412    
;;;413      /* Get the interrupt position */
;;;414      itpos = USART_IT & IT_Mask;
000006  f001041f          AND      r4,r1,#0x1f
;;;415      itmask = (((uint32_t)0x01) << itpos);
00000a  2101              MOVS     r1,#1
00000c  40a1              LSLS     r1,r1,r4
;;;416        
;;;417      if (usartreg == 0x01) /* The IT is in CR1 register */
00000e  2b01              CMP      r3,#1
000010  d007              BEQ      |L11.34|
;;;418      {
;;;419        usartxbase += 0x0C;
;;;420      }
;;;421      else if (usartreg == 0x02) /* The IT is in CR2 register */
000012  2b02              CMP      r3,#2
000014  d007              BEQ      |L11.38|
;;;422      {
;;;423        usartxbase += 0x10;
;;;424      }
;;;425      else /* The IT is in CR3 register */
;;;426      {
;;;427        usartxbase += 0x14; 
000016  3014              ADDS     r0,r0,#0x14
                  |L11.24|
;;;428      }
;;;429      if (NewState != DISABLE)
000018  2a00              CMP      r2,#0
;;;430      {
;;;431        *(__IO uint32_t*)usartxbase  |= itmask;
;;;432      }
;;;433      else
;;;434      {
;;;435        *(__IO uint32_t*)usartxbase &= ~itmask;
00001a  6802              LDR      r2,[r0,#0]
00001c  d005              BEQ      |L11.42|
00001e  430a              ORRS     r2,r2,r1              ;431
000020  e004              B        |L11.44|
                  |L11.34|
000022  300c              ADDS     r0,r0,#0xc            ;419
000024  e7f8              B        |L11.24|
                  |L11.38|
000026  3010              ADDS     r0,r0,#0x10           ;423
000028  e7f6              B        |L11.24|
                  |L11.42|
00002a  438a              BICS     r2,r2,r1
                  |L11.44|
00002c  6002              STR      r2,[r0,#0]            ;431
;;;436      }
;;;437    }
00002e  bd10              POP      {r4,pc}
;;;438    
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;181      */
;;;182    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;185      uint32_t integerdivider = 0x00;
;;;186      uint32_t fractionaldivider = 0x00;
;;;187      uint32_t usartxbase = 0;
;;;188      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;189      /* Check the parameters */
;;;190      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;191      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;192      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;193      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;194      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;195      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;196      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;197      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;198      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
;;;199      {
;;;200        assert_param(IS_USART_123_PERIPH(USARTx));
;;;201      }
;;;202    
;;;203      usartxbase = (uint32_t)USARTx;
;;;204    
;;;205    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;206      tmpreg = USARTx->CR2;
000004  8a00              LDRH     r0,[r0,#0x10]
000006  b085              SUB      sp,sp,#0x14           ;183
000008  460d              MOV      r5,r1                 ;183
;;;207      /* Clear STOP[13:12] bits */
;;;208      tmpreg &= CR2_STOP_CLEAR_Mask;
00000a  f64c71ff          MOV      r1,#0xcfff
00000e  4008              ANDS     r0,r0,r1
;;;209      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;210      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;211      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
000010  88e9              LDRH     r1,[r5,#6]
000012  4301              ORRS     r1,r1,r0
;;;212      
;;;213      /* Write to USART CR2 */
;;;214      USARTx->CR2 = (uint16_t)tmpreg;
000014  8221              STRH     r1,[r4,#0x10]
;;;215    
;;;216    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;217      tmpreg = USARTx->CR1;
000016  89a1              LDRH     r1,[r4,#0xc]
;;;218      /* Clear M, PCE, PS, TE and RE bits */
;;;219      tmpreg &= CR1_CLEAR_Mask;
000018  f64e10f3          MOV      r0,#0xe9f3
00001c  4001              ANDS     r1,r1,r0
;;;220      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;221      /* Set the M bits according to USART_WordLength value */
;;;222      /* Set PCE and PS bits according to USART_Parity value */
;;;223      /* Set TE and RE bits according to USART_Mode value */
;;;224      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00001e  88a8              LDRH     r0,[r5,#4]
000020  892a              LDRH     r2,[r5,#8]
000022  4310              ORRS     r0,r0,r2
000024  896a              LDRH     r2,[r5,#0xa]
000026  430a              ORRS     r2,r2,r1
000028  4310              ORRS     r0,r0,r2
;;;225                USART_InitStruct->USART_Mode;
;;;226      /* Write to USART CR1 */
;;;227      USARTx->CR1 = (uint16_t)tmpreg;
00002a  81a0              STRH     r0,[r4,#0xc]
;;;228    
;;;229    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;230      tmpreg = USARTx->CR3;
00002c  8aa0              LDRH     r0,[r4,#0x14]
;;;231      /* Clear CTSE and RTSE bits */
;;;232      tmpreg &= CR3_CLEAR_Mask;
00002e  f64f41ff          MOV      r1,#0xfcff
000032  4008              ANDS     r0,r0,r1
;;;233      /* Configure the USART HFC -------------------------------------------------*/
;;;234      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;235      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
000034  89a9              LDRH     r1,[r5,#0xc]
000036  4301              ORRS     r1,r1,r0
;;;236      /* Write to USART CR3 */
;;;237      USARTx->CR3 = (uint16_t)tmpreg;
000038  82a1              STRH     r1,[r4,#0x14]
;;;238    
;;;239    /*---------------------------- USART BRR Configuration -----------------------*/
;;;240      /* Configure the USART Baud Rate -------------------------------------------*/
;;;241      RCC_GetClocksFreq(&RCC_ClocksStatus);
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       RCC_GetClocksFreq
;;;242      if (usartxbase == USART1_BASE)
000040  481b              LDR      r0,|L12.176|
000042  4284              CMP      r4,r0
000044  d101              BNE      |L12.74|
;;;243      {
;;;244        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000046  9803              LDR      r0,[sp,#0xc]
000048  e000              B        |L12.76|
                  |L12.74|
;;;245      }
;;;246      else
;;;247      {
;;;248        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
00004a  9802              LDR      r0,[sp,#8]
                  |L12.76|
;;;249      }
;;;250      
;;;251      /* Determine the integer part */
;;;252      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
00004c  89a1              LDRH     r1,[r4,#0xc]
00004e  0409              LSLS     r1,r1,#16
000050  2900              CMP      r1,#0
;;;253      {
;;;254        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;255        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
;;;256      }
;;;257      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;258      {
;;;259        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;260        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
000052  eb0001c0          ADD      r1,r0,r0,LSL #3
000056  eb011000          ADD      r0,r1,r0,LSL #4
00005a  6829              LDR      r1,[r5,#0]            ;252
00005c  da02              BGE      |L12.100|
00005e  ea4f0141          LSL      r1,r1,#1              ;255
000062  e001              B        |L12.104|
                  |L12.100|
000064  ea4f0181          LSL      r1,r1,#2
                  |L12.104|
000068  fbb0f0f1          UDIV     r0,r0,r1
;;;261      }
;;;262      tmpreg = (integerdivider / 100) << 4;
00006c  2264              MOVS     r2,#0x64
00006e  fbb0f1f2          UDIV     r1,r0,r2
000072  ea4f1101          LSL      r1,r1,#4
;;;263    
;;;264      /* Determine the fractional part */
;;;265      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
000076  ea4f1311          LSR      r3,r1,#4
00007a  f06f0518          MVN      r5,#0x18
00007e  436b              MULS     r3,r5,r3
000080  eb000083          ADD      r0,r0,r3,LSL #2
;;;266    
;;;267      /* Implement the fractional part in the register */
;;;268      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
000084  89a3              LDRH     r3,[r4,#0xc]
000086  041d              LSLS     r5,r3,#16
;;;269      {
;;;270        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
000088  f04f0332          MOV      r3,#0x32
00008c  d506              BPL      |L12.156|
00008e  eb0300c0          ADD      r0,r3,r0,LSL #3
000092  fbb0f0f2          UDIV     r0,r0,r2
000096  f0000007          AND      r0,r0,#7
00009a  e005              B        |L12.168|
                  |L12.156|
;;;271      }
;;;272      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;273      {
;;;274        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
00009c  eb031000          ADD      r0,r3,r0,LSL #4
0000a0  fbb0f0f2          UDIV     r0,r0,r2
0000a4  f000000f          AND      r0,r0,#0xf
                  |L12.168|
0000a8  4308              ORRS     r0,r0,r1
;;;275      }
;;;276      
;;;277      /* Write to USART BRR */
;;;278      USARTx->BRR = (uint16_t)tmpreg;
0000aa  8120              STRH     r0,[r4,#8]
;;;279    }
0000ac  b005              ADD      sp,sp,#0x14
0000ae  bd30              POP      {r4,r5,pc}
;;;280    
                          ENDP

                  |L12.176|
                          DCD      0x40013800

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;842      */
;;;843    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;844    {
;;;845      /* Check the parameters */
;;;846      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;847      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;848        
;;;849      if (NewState != DISABLE)
;;;850      {
;;;851        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;852        USARTx->CR3 |= CR3_IREN_Set;
;;;853      }
;;;854      else
;;;855      {
;;;856        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;857        USARTx->CR3 &= CR3_IREN_Reset;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L13.12|
000006  f0410102          ORR      r1,r1,#2              ;852
00000a  e001              B        |L13.16|
                  |L13.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L13.16|
000010  8281              STRH     r1,[r0,#0x14]         ;852
;;;858      }
;;;859    }
000012  4770              BX       lr
;;;860    
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;823      */
;;;824    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;825    {
;;;826      /* Check the parameters */
;;;827      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;828      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;829        
;;;830      USARTx->CR3 &= CR3_IRLP_Mask;
000002  f0220204          BIC      r2,r2,#4
000006  8282              STRH     r2,[r0,#0x14]
;;;831      USARTx->CR3 |= USART_IrDAMode;
000008  8a82              LDRH     r2,[r0,#0x14]
00000a  430a              ORRS     r2,r2,r1
00000c  8282              STRH     r2,[r0,#0x14]
;;;832    }
00000e  4770              BX       lr
;;;833    
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;552      */
;;;553    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;554    {
;;;555      /* Check the parameters */
;;;556      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;557      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;558      
;;;559      USARTx->CR2 &= CR2_LBDL_Mask;
000002  f0220220          BIC      r2,r2,#0x20
000006  8202              STRH     r2,[r0,#0x10]
;;;560      USARTx->CR2 |= USART_LINBreakDetectLength;  
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  430a              ORRS     r2,r2,r1
00000c  8202              STRH     r2,[r0,#0x10]
;;;561    }
00000e  4770              BX       lr
;;;562    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;571      */
;;;572    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;573    {
;;;574      /* Check the parameters */
;;;575      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;576      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;577      
;;;578      if (NewState != DISABLE)
;;;579      {
;;;580        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;581        USARTx->CR2 |= CR2_LINEN_Set;
;;;582      }
;;;583      else
;;;584      {
;;;585        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;586        USARTx->CR2 &= CR2_LINEN_Reset;
000002  8a01              LDRH     r1,[r0,#0x10]
000004  d002              BEQ      |L16.12|
000006  f4414180          ORR      r1,r1,#0x4000         ;581
00000a  e001              B        |L16.16|
                  |L16.12|
00000c  f4214180          BIC      r1,r1,#0x4000
                  |L16.16|
000010  8201              STRH     r1,[r0,#0x10]         ;581
;;;587      }
;;;588    }
000012  4770              BX       lr
;;;589    
                          ENDP


                          AREA ||i.USART_OneBitMethodCmd||, CODE, READONLY, ALIGN=1

                  USART_OneBitMethodCmd PROC
;;;794      */
;;;795    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;796    {
;;;797      /* Check the parameters */
;;;798      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;799      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;800      
;;;801      if (NewState != DISABLE)
;;;802      {
;;;803        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;804        USARTx->CR3 |= CR3_ONEBITE_Set;
;;;805      }
;;;806      else
;;;807      {
;;;808        /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
;;;809        USARTx->CR3 &= CR3_ONEBITE_Reset;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L17.12|
000006  f4416100          ORR      r1,r1,#0x800          ;804
00000a  e001              B        |L17.16|
                  |L17.12|
00000c  f4216100          BIC      r1,r1,#0x800
                  |L17.16|
000010  8281              STRH     r1,[r0,#0x14]         ;804
;;;810      }
;;;811    }
000012  4770              BX       lr
;;;812    
                          ENDP


                          AREA ||i.USART_OverSampling8Cmd||, CODE, READONLY, ALIGN=1

                  USART_OverSampling8Cmd PROC
;;;767      */
;;;768    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;769    {
;;;770      /* Check the parameters */
;;;771      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;772      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;773      
;;;774      if (NewState != DISABLE)
;;;775      {
;;;776        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;777        USARTx->CR1 |= CR1_OVER8_Set;
;;;778      }
;;;779      else
;;;780      {
;;;781        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;782        USARTx->CR1 &= CR1_OVER8_Reset;
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L18.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;777
00000a  e001              B        |L18.16|
                  |L18.12|
00000c  f3c1010e          UBFX     r1,r1,#0,#15
                  |L18.16|
000010  8181              STRH     r1,[r0,#0xc]          ;777
;;;783      }
;;;784    }
000012  4770              BX       lr
;;;785    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;614      */
;;;615    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000000  8880              LDRH     r0,[r0,#4]
;;;616    {
;;;617      /* Check the parameters */
;;;618      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;619      
;;;620      /* Receive Data */
;;;621      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000002  f3c00008          UBFX     r0,r0,#0,#9
;;;622    }
000006  4770              BX       lr
;;;623    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;523      */
;;;524    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;525    {
;;;526      /* Check the parameters */
;;;527      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;528      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;529      
;;;530      if (NewState != DISABLE)
;;;531      {
;;;532        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;533        USARTx->CR1 |= CR1_RWU_Set;
;;;534      }
;;;535      else
;;;536      {
;;;537        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;538        USARTx->CR1 &= CR1_RWU_Reset;
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L20.12|
000006  f0410102          ORR      r1,r1,#2              ;533
00000a  e001              B        |L20.16|
                  |L20.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L20.16|
000010  8181              STRH     r1,[r0,#0xc]          ;533
;;;539      }
;;;540    }
000012  4770              BX       lr
;;;541    
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;630      */
;;;631    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;635      
;;;636      /* Send break characters */
;;;637      USARTx->CR1 |= CR1_SBK_Set;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;638    }
000008  4770              BX       lr
;;;639    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;597      */
;;;598    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000000  f3c10108          UBFX     r1,r1,#0,#9
;;;599    {
;;;600      /* Check the parameters */
;;;601      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;602      assert_param(IS_USART_DATA(Data)); 
;;;603        
;;;604      /* Transmit Data */
;;;605      USARTx->DR = (Data & (uint16_t)0x01FF);
000004  8081              STRH     r1,[r0,#4]
;;;606    }
000006  4770              BX       lr
;;;607    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;481      */
;;;482    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;483    {
;;;484      /* Check the parameters */
;;;485      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;486      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;487        
;;;488      /* Clear the USART address */
;;;489      USARTx->CR2 &= CR2_Address_Mask;
000002  f022020f          BIC      r2,r2,#0xf
000006  8202              STRH     r2,[r0,#0x10]
;;;490      /* Set the USART address node */
;;;491      USARTx->CR2 |= USART_Address;
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  430a              ORRS     r2,r2,r1
00000c  8202              STRH     r2,[r0,#0x10]
;;;492    }
00000e  4770              BX       lr
;;;493    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;646      */
;;;647    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;648    {    
;;;649      /* Check the parameters */
;;;650      assert_param(IS_USART_123_PERIPH(USARTx));
;;;651      
;;;652      /* Clear the USART Guard time */
;;;653      USARTx->GTPR &= GTPR_LSB_Mask;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;654      /* Set the USART guard time */
;;;655      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422101          ORR      r1,r2,r1,LSL #8
00000c  8301              STRH     r1,[r0,#0x18]
;;;656    }
00000e  4770              BX       lr
;;;657    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;666      */
;;;667    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;668    { 
;;;669      /* Check the parameters */
;;;670      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;671      
;;;672      /* Clear the USART prescaler */
;;;673      USARTx->GTPR &= GTPR_MSB_Mask;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;674      /* Set the USART prescaler */
;;;675      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;676    }
00000e  4770              BX       lr
;;;677    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;685      */
;;;686    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;687    {
;;;688      /* Check the parameters */
;;;689      assert_param(IS_USART_123_PERIPH(USARTx));
;;;690      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;691      if (NewState != DISABLE)
;;;692      {
;;;693        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;694        USARTx->CR3 |= CR3_SCEN_Set;
;;;695      }
;;;696      else
;;;697      {
;;;698        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;699        USARTx->CR3 &= CR3_SCEN_Reset;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L26.12|
000006  f0410120          ORR      r1,r1,#0x20           ;694
00000a  e001              B        |L26.16|
                  |L26.12|
00000c  f0210120          BIC      r1,r1,#0x20
                  |L26.16|
000010  8281              STRH     r1,[r0,#0x14]         ;694
;;;700      }
;;;701    }
000012  4770              BX       lr
;;;702    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;710      */
;;;711    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;712    {
;;;713      /* Check the parameters */
;;;714      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;715      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;716      if (NewState != DISABLE)
;;;717      {
;;;718        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;719        USARTx->CR3 |= CR3_NACK_Set;
;;;720      }
;;;721      else
;;;722      {
;;;723        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;724        USARTx->CR3 &= CR3_NACK_Reset;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L27.12|
000006  f0410110          ORR      r1,r1,#0x10           ;719
00000a  e001              B        |L27.16|
                  |L27.12|
00000c  f0210110          BIC      r1,r1,#0x10
                  |L27.16|
000010  8281              STRH     r1,[r0,#0x14]         ;719
;;;725      }
;;;726    }
000012  4770              BX       lr
;;;727    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;286      */
;;;287    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;288    {
;;;289      /* USART_InitStruct members default value */
;;;290      USART_InitStruct->USART_BaudRate = 9600;
;;;291      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;292      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;293      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;294      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  220c              MOVS     r2,#0xc
000010  8142              STRH     r2,[r0,#0xa]
;;;295      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  8181              STRH     r1,[r0,#0xc]
;;;296    }
000014  4770              BX       lr
;;;297    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;504      */
;;;505    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;506    {
;;;507      /* Check the parameters */
;;;508      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;509      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;510      
;;;511      USARTx->CR1 &= CR1_WAKE_Mask;
000002  f4226200          BIC      r2,r2,#0x800
000006  8182              STRH     r2,[r0,#0xc]
;;;512      USARTx->CR1 |= USART_WakeUp;
000008  8982              LDRH     r2,[r0,#0xc]
00000a  430a              ORRS     r2,r2,r1
00000c  8182              STRH     r2,[r0,#0xc]
;;;513    }
00000e  4770              BX       lr
;;;514    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_usart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f10x_usart_c_9565154b____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f10x_usart_c_9565154b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f10x_usart_c_9565154b____REVSH|
#line 144
|__asm___17_stm32f10x_usart_c_9565154b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
