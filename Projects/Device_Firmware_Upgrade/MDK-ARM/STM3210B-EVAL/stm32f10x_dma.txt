; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm32f10x_dma.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\DFU\inc -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;528      */
;;;529    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  00c1              LSLS     r1,r0,#3
;;;530    {
000002  d502              BPL      |L1.10|
;;;531      /* Check the parameters */
;;;532      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;533    
;;;534      /* Calculate the used DMAy */
;;;535      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;536      {
;;;537        /* Clear the selected DMAy flags */
;;;538        DMA2->IFCR = DMAy_FLAG;
000004  4902              LDR      r1,|L1.16|
000006  6008              STR      r0,[r1,#0]
;;;539      }
;;;540      else
;;;541      {
;;;542        /* Clear the selected DMAy flags */
;;;543        DMA1->IFCR = DMAy_FLAG;
;;;544      }
;;;545    }
000008  4770              BX       lr
                  |L1.10|
00000a  4902              LDR      r1,|L1.20|
00000c  6048              STR      r0,[r1,#4]            ;543
00000e  4770              BX       lr
;;;546    
                          ENDP

                  |L1.16|
                          DCD      0x40020404
                  |L1.20|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;689      */
;;;690    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  00c1              LSLS     r1,r0,#3
;;;691    {
000002  d502              BPL      |L2.10|
;;;692      /* Check the parameters */
;;;693      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;694    
;;;695      /* Calculate the used DMAy */
;;;696      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;697      {
;;;698        /* Clear the selected DMAy interrupt pending bits */
;;;699        DMA2->IFCR = DMAy_IT;
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;700      }
;;;701      else
;;;702      {
;;;703        /* Clear the selected DMAy interrupt pending bits */
;;;704        DMA1->IFCR = DMAy_IT;
;;;705      }
;;;706    }
000008  4770              BX       lr
                  |L2.10|
00000a  4902              LDR      r1,|L2.20|
00000c  6048              STR      r0,[r1,#4]            ;704
00000e  4770              BX       lr
;;;707    
                          ENDP

                  |L2.16|
                          DCD      0x40020404
                  |L2.20|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;299      */
;;;300    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;304      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;305    
;;;306      if (NewState != DISABLE)
;;;307      {
;;;308        /* Enable the selected DMAy Channelx */
;;;309        DMAy_Channelx->CCR |= DMA_CCR1_EN;
;;;310      }
;;;311      else
;;;312      {
;;;313        /* Disable the selected DMAy Channelx */
;;;314        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;309
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  f64f72fe          MOV      r2,#0xfffe
000010  4011              ANDS     r1,r1,r2
                  |L3.18|
000012  6001              STR      r1,[r0,#0]            ;309
;;;315      }
;;;316    }
000014  4770              BX       lr
;;;317    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;113      */
;;;114    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;115    {
;;;116      /* Check the parameters */
;;;117      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;118      
;;;119      /* Disable the selected DMAy Channelx */
;;;120      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;121      
;;;122      /* Reset DMAy Channelx control register */
;;;123      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;124      
;;;125      /* Reset DMAy Channelx remaining bytes register */
;;;126      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;127      
;;;128      /* Reset DMAy Channelx peripheral address register */
;;;129      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;130      
;;;131      /* Reset DMAy Channelx memory address register */
;;;132      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;133      
;;;134      if (DMAy_Channelx == DMA1_Channel1)
;;;135      {
;;;136        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;137        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000014  4931              LDR      r1,|L4.220|
000016  4a31              LDR      r2,|L4.220|
000018  3908              SUBS     r1,r1,#8
00001a  4290              CMP      r0,r2                 ;134
00001c  d103              BNE      |L4.38|
00001e  6848              LDR      r0,[r1,#4]
000020  f040000f          ORR      r0,r0,#0xf
000024  e006              B        |L4.52|
                  |L4.38|
;;;138      }
;;;139      else if (DMAy_Channelx == DMA1_Channel2)
000026  4a2d              LDR      r2,|L4.220|
000028  3214              ADDS     r2,r2,#0x14
00002a  4290              CMP      r0,r2
00002c  d104              BNE      |L4.56|
;;;140      {
;;;141        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;142        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
00002e  6848              LDR      r0,[r1,#4]
000030  f04000f0          ORR      r0,r0,#0xf0
                  |L4.52|
000034  6048              STR      r0,[r1,#4]            ;137
;;;143      }
;;;144      else if (DMAy_Channelx == DMA1_Channel3)
;;;145      {
;;;146        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;147        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
;;;148      }
;;;149      else if (DMAy_Channelx == DMA1_Channel4)
;;;150      {
;;;151        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;152        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
;;;153      }
;;;154      else if (DMAy_Channelx == DMA1_Channel5)
;;;155      {
;;;156        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;157        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
;;;158      }
;;;159      else if (DMAy_Channelx == DMA1_Channel6)
;;;160      {
;;;161        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;162        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
;;;163      }
;;;164      else if (DMAy_Channelx == DMA1_Channel7)
;;;165      {
;;;166        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;167        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
;;;168      }
;;;169      else if (DMAy_Channelx == DMA2_Channel1)
;;;170      {
;;;171        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;172        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
;;;173      }
;;;174      else if (DMAy_Channelx == DMA2_Channel2)
;;;175      {
;;;176        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;177        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
;;;178      }
;;;179      else if (DMAy_Channelx == DMA2_Channel3)
;;;180      {
;;;181        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;182        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
;;;183      }
;;;184      else if (DMAy_Channelx == DMA2_Channel4)
;;;185      {
;;;186        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;187        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
;;;188      }
;;;189      else
;;;190      { 
;;;191        if (DMAy_Channelx == DMA2_Channel5)
;;;192        {
;;;193          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;194          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
;;;195        }
;;;196      }
;;;197    }
000036  4770              BX       lr
                  |L4.56|
000038  4a28              LDR      r2,|L4.220|
00003a  3228              ADDS     r2,r2,#0x28           ;144
00003c  4290              CMP      r0,r2                 ;144
00003e  d103              BNE      |L4.72|
000040  6848              LDR      r0,[r1,#4]            ;147
000042  f4406070          ORR      r0,r0,#0xf00          ;147
000046  e7f5              B        |L4.52|
                  |L4.72|
000048  4a24              LDR      r2,|L4.220|
00004a  323c              ADDS     r2,r2,#0x3c           ;149
00004c  4290              CMP      r0,r2                 ;149
00004e  d103              BNE      |L4.88|
000050  6848              LDR      r0,[r1,#4]            ;152
000052  f4404070          ORR      r0,r0,#0xf000         ;152
000056  e7ed              B        |L4.52|
                  |L4.88|
000058  4a20              LDR      r2,|L4.220|
00005a  3250              ADDS     r2,r2,#0x50           ;154
00005c  4290              CMP      r0,r2                 ;154
00005e  d103              BNE      |L4.104|
000060  6848              LDR      r0,[r1,#4]            ;157
000062  f4402070          ORR      r0,r0,#0xf0000        ;157
000066  e7e5              B        |L4.52|
                  |L4.104|
000068  4a1c              LDR      r2,|L4.220|
00006a  3264              ADDS     r2,r2,#0x64           ;159
00006c  4290              CMP      r0,r2                 ;159
00006e  d103              BNE      |L4.120|
000070  6848              LDR      r0,[r1,#4]            ;162
000072  f4400070          ORR      r0,r0,#0xf00000       ;162
000076  e7dd              B        |L4.52|
                  |L4.120|
000078  4a18              LDR      r2,|L4.220|
00007a  3278              ADDS     r2,r2,#0x78           ;164
00007c  4290              CMP      r0,r2                 ;164
00007e  d103              BNE      |L4.136|
000080  6848              LDR      r0,[r1,#4]            ;167
000082  f0406070          ORR      r0,r0,#0xf000000      ;167
000086  e7d5              B        |L4.52|
                  |L4.136|
000088  4a15              LDR      r2,|L4.224|
00008a  1f11              SUBS     r1,r2,#4              ;172
00008c  4290              CMP      r0,r2                 ;169
00008e  d103              BNE      |L4.152|
000090  6808              LDR      r0,[r1,#0]            ;172
000092  f040000f          ORR      r0,r0,#0xf            ;172
000096  e006              B        |L4.166|
                  |L4.152|
000098  4a11              LDR      r2,|L4.224|
00009a  3214              ADDS     r2,r2,#0x14           ;174
00009c  4290              CMP      r0,r2                 ;174
00009e  d104              BNE      |L4.170|
0000a0  6808              LDR      r0,[r1,#0]            ;177
0000a2  f04000f0          ORR      r0,r0,#0xf0           ;177
                  |L4.166|
0000a6  6008              STR      r0,[r1,#0]            ;172
                  |L4.168|
0000a8  4770              BX       lr
                  |L4.170|
0000aa  4a0d              LDR      r2,|L4.224|
0000ac  3228              ADDS     r2,r2,#0x28           ;179
0000ae  4290              CMP      r0,r2                 ;179
0000b0  d103              BNE      |L4.186|
0000b2  6808              LDR      r0,[r1,#0]            ;182
0000b4  f4406070          ORR      r0,r0,#0xf00          ;182
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  4a09              LDR      r2,|L4.224|
0000bc  323c              ADDS     r2,r2,#0x3c           ;184
0000be  4290              CMP      r0,r2                 ;184
0000c0  d103              BNE      |L4.202|
0000c2  6808              LDR      r0,[r1,#0]            ;187
0000c4  f4404070          ORR      r0,r0,#0xf000         ;187
0000c8  e7ed              B        |L4.166|
                  |L4.202|
0000ca  4a05              LDR      r2,|L4.224|
0000cc  3250              ADDS     r2,r2,#0x50           ;191
0000ce  4290              CMP      r0,r2                 ;191
0000d0  d1ea              BNE      |L4.168|
0000d2  6808              LDR      r0,[r1,#0]            ;194
0000d4  f4402070          ORR      r0,r0,#0xf0000        ;194
0000d8  e7e5              B        |L4.166|
;;;198    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x40020008
                  |L4.224|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;376      */
;;;377    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;378    {
;;;379      /* Check the parameters */
;;;380      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;381      /* Return the number of remaining data units for DMAy Channelx */
;;;382      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;383    }
000004  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;438      */
;;;439    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;440    {
;;;441      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L6.12|
;;;442      uint32_t tmpreg = 0;
;;;443      
;;;444      /* Check the parameters */
;;;445      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;446    
;;;447      /* Calculate the used DMAy */
;;;448      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;449      {
;;;450        /* Get DMA2 ISR register value */
;;;451        tmpreg = DMA2->ISR ;
000008  4a03              LDR      r2,|L6.24|
00000a  e000              B        |L6.14|
                  |L6.12|
;;;452      }
;;;453      else
;;;454      {
;;;455        /* Get DMA1 ISR register value */
;;;456        tmpreg = DMA1->ISR ;
00000c  4a03              LDR      r2,|L6.28|
                  |L6.14|
00000e  6812              LDR      r2,[r2,#0]
;;;457      }
;;;458    
;;;459      /* Check the status of the specified DMAy flag */
;;;460      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L6.22|
;;;461      {
;;;462        /* DMAy_FLAG is set */
;;;463        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;464      }
;;;465      else
;;;466      {
;;;467        /* DMAy_FLAG is reset */
;;;468        bitstatus = RESET;
;;;469      }
;;;470      
;;;471      /* Return the DMAy_FLAG status */
;;;472      return  bitstatus;
;;;473    }
000016  4770              BX       lr
;;;474    
                          ENDP

                  |L6.24|
                          DCD      0x40020400
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;600      */
;;;601    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;602    {
;;;603      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L7.12|
;;;604      uint32_t tmpreg = 0;
;;;605    
;;;606      /* Check the parameters */
;;;607      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;608    
;;;609      /* Calculate the used DMA */
;;;610      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;611      {
;;;612        /* Get DMA2 ISR register value */
;;;613        tmpreg = DMA2->ISR;
000008  4a03              LDR      r2,|L7.24|
00000a  e000              B        |L7.14|
                  |L7.12|
;;;614      }
;;;615      else
;;;616      {
;;;617        /* Get DMA1 ISR register value */
;;;618        tmpreg = DMA1->ISR;
00000c  4a03              LDR      r2,|L7.28|
                  |L7.14|
00000e  6812              LDR      r2,[r2,#0]
;;;619      }
;;;620    
;;;621      /* Check the status of the specified DMAy interrupt */
;;;622      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L7.22|
;;;623      {
;;;624        /* DMAy_IT is set */
;;;625        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L7.22|
;;;626      }
;;;627      else
;;;628      {
;;;629        /* DMAy_IT is reset */
;;;630        bitstatus = RESET;
;;;631      }
;;;632      /* Return the DMA_IT status */
;;;633      return  bitstatus;
;;;634    }
000016  4770              BX       lr
;;;635    
                          ENDP

                  |L7.24|
                          DCD      0x40020400
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;331      */
;;;332    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;333    {
;;;334      /* Check the parameters */
;;;335      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;336      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;337      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;338      if (NewState != DISABLE)
;;;339      {
;;;340        /* Enable the selected DMA interrupts */
;;;341        DMAy_Channelx->CCR |= DMA_IT;
;;;342      }
;;;343      else
;;;344      {
;;;345        /* Disable the selected DMA interrupts */
;;;346        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;341
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;341
;;;347      }
;;;348    }
00000e  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;207      */
;;;208    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;209    {
;;;210      uint32_t tmpreg = 0;
;;;211    
;;;212      /* Check the parameters */
;;;213      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;214      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;215      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;216      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;217      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;218      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;219      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;220      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;221      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;222      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;223    
;;;224    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;225      /* Get the DMAy_Channelx CCR value */
;;;226      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;227      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;228      tmpreg &= CCR_CLEAR_Mask;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;229      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;230      /* Set DIR bit according to DMA_DIR value */
;;;231      /* Set CIRC bit according to DMA_Mode value */
;;;232      /* Set PINC bit according to DMA_PeripheralInc value */
;;;233      /* Set MINC bit according to DMA_MemoryInc value */
;;;234      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;235      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;236      /* Set PL bits according to DMA_Priority value */
;;;237      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;238      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688a              LDR      r2,[r1,#8]
00000e  4322              ORRS     r2,r2,r4
000010  e9d14504          LDRD     r4,r5,[r1,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  4322              ORRS     r2,r2,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4322              ORRS     r2,r2,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4322              ORRS     r2,r2,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4322              ORRS     r2,r2,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;239                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;240                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;241                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;242    
;;;243      /* Write to DMAy Channelx CCR */
;;;244      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;245    
;;;246    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;247      /* Write to DMAy Channelx CNDTR */
;;;248      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;249    
;;;250    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;251      /* Write to DMAy Channelx CPAR */
;;;252      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;253    
;;;254    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;255      /* Write to DMAy Channelx CMAR */
;;;256      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;257    }
000038  bd30              POP      {r4,r5,pc}
;;;258    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;358      */
;;;359    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;360    {
;;;361      /* Check the parameters */
;;;362      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;363      
;;;364    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;365      /* Write to DMAy Channelx CNDTR */
;;;366      DMAy_Channelx->CNDTR = DataNumber;  
;;;367    }
000002  4770              BX       lr
;;;368    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;264      */
;;;265    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;266    {
;;;267    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;268      /* Initialize the DMA_PeripheralBaseAddr member */
;;;269      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;270      /* Initialize the DMA_MemoryBaseAddr member */
;;;271      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;272      /* Initialize the DMA_DIR member */
;;;273      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;274      /* Initialize the DMA_BufferSize member */
;;;275      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
;;;276      /* Initialize the DMA_PeripheralInc member */
;;;277      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;278      /* Initialize the DMA_MemoryInc member */
;;;279      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;280      /* Initialize the DMA_PeripheralDataSize member */
;;;281      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;282      /* Initialize the DMA_MemoryDataSize member */
;;;283      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;284      /* Initialize the DMA_Mode member */
;;;285      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;286      /* Initialize the DMA_Priority member */
;;;287      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;288      /* Initialize the DMA_M2M member */
;;;289      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;290    }
000018  4770              BX       lr
;;;291    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_dma_c_e9b554c0____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_dma_c_e9b554c0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_dma_c_e9b554c0____REVSH|
#line 144
|__asm___15_stm32f10x_dma_c_e9b554c0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
