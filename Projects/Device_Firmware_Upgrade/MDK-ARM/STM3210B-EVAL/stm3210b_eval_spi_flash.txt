; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm3210b_eval_spi_flash.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm3210b_eval_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\stm3210b-eval\stm3210b_eval_spi_flash.crf ..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL\stm3210b_eval_spi_flash.c]
                          THUMB

                          AREA ||i.sFLASH_DeInit||, CODE, READONLY, ALIGN=1

                  sFLASH_DeInit PROC
;;;119      */
;;;120    void sFLASH_DeInit(void)
000000  f7ffbffe          B.W      sFLASH_LowLevel_DeInit
;;;121    {
;;;122      sFLASH_LowLevel_DeInit();
;;;123    }
;;;124    
                          ENDP


                          AREA ||i.sFLASH_EraseBulk||, CODE, READONLY, ALIGN=2

                  sFLASH_EraseBulk PROC
;;;192      */
;;;193    void sFLASH_EraseBulk(void)
000000  b510              PUSH     {r4,lr}
;;;194    {
;;;195      /*!< Send write enable instruction */
;;;196      sFLASH_WriteEnable();
000002  f7fffffe          BL       sFLASH_WriteEnable
;;;197    
;;;198      /*!< Bulk Erase */
;;;199      /*!< Select the FLASH: Chip Select low */
;;;200      sFLASH_CS_LOW();
000006  4c08              LDR      r4,|L2.40|
000008  2110              MOVS     r1,#0x10
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       GPIO_ResetBits
;;;201      /*!< Send Bulk Erase instruction  */
;;;202      sFLASH_SendByte(sFLASH_CMD_BE);
000010  20c7              MOVS     r0,#0xc7
000012  f7fffffe          BL       sFLASH_SendByte
;;;203      /*!< Deselect the FLASH: Chip Select high */
;;;204      sFLASH_CS_HIGH();
000016  2110              MOVS     r1,#0x10
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GPIO_SetBits
;;;205    
;;;206      /*!< Wait the end of Flash writing */
;;;207      sFLASH_WaitForWriteEnd();
00001e  e8bd4010          POP      {r4,lr}
000022  f7ffbffe          B.W      sFLASH_WaitForWriteEnd
;;;208    }
;;;209    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40010800

                          AREA ||i.sFLASH_EraseSector||, CODE, READONLY, ALIGN=2

                  sFLASH_EraseSector PROC
;;;164      */
;;;165    void sFLASH_EraseSector(uint32_t SectorAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
000002  4604              MOV      r4,r0
;;;167      /*!< Send write enable instruction */
;;;168      sFLASH_WriteEnable();
000004  f7fffffe          BL       sFLASH_WriteEnable
;;;169    
;;;170      /*!< Sector Erase */
;;;171      /*!< Select the FLASH: Chip Select low */
;;;172      sFLASH_CS_LOW();
000008  4d0d              LDR      r5,|L3.64|
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GPIO_ResetBits
;;;173      /*!< Send Sector Erase instruction */
;;;174      sFLASH_SendByte(sFLASH_CMD_SE);
000012  20d8              MOVS     r0,#0xd8
000014  f7fffffe          BL       sFLASH_SendByte
;;;175      /*!< Send SectorAddr high nibble address byte */
;;;176      sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
000018  f3c44007          UBFX     r0,r4,#16,#8
00001c  f7fffffe          BL       sFLASH_SendByte
;;;177      /*!< Send SectorAddr medium nibble address byte */
;;;178      sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
000020  f3c42007          UBFX     r0,r4,#8,#8
000024  f7fffffe          BL       sFLASH_SendByte
;;;179      /*!< Send SectorAddr low nibble address byte */
;;;180      sFLASH_SendByte(SectorAddr & 0xFF);
000028  b2e0              UXTB     r0,r4
00002a  f7fffffe          BL       sFLASH_SendByte
;;;181      /*!< Deselect the FLASH: Chip Select high */
;;;182      sFLASH_CS_HIGH();
00002e  2110              MOVS     r1,#0x10
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GPIO_SetBits
;;;183    
;;;184      /*!< Wait the end of Flash writing */
;;;185      sFLASH_WaitForWriteEnd();
000036  e8bd4070          POP      {r4-r6,lr}
00003a  f7ffbffe          B.W      sFLASH_WaitForWriteEnd
;;;186    }
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x40010800

                          AREA ||i.sFLASH_Init||, CODE, READONLY, ALIGN=2

                  sFLASH_Init PROC
;;;129      */
;;;130    void sFLASH_Init(void)
000000  b510              PUSH     {r4,lr}
;;;131    {
000002  b086              SUB      sp,sp,#0x18
;;;132      SPI_InitTypeDef  SPI_InitStructure;
;;;133    
;;;134      sFLASH_LowLevel_Init();
000004  f7fffffe          BL       sFLASH_LowLevel_Init
;;;135        
;;;136      /*!< Deselect the FLASH: Chip Select high */
;;;137      sFLASH_CS_HIGH();
000008  2110              MOVS     r1,#0x10
00000a  4814              LDR      r0,|L4.92|
00000c  f7fffffe          BL       GPIO_SetBits
;;;138    
;;;139      /*!< SPI configuration */
;;;140      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000010  2000              MOVS     r0,#0
000012  f8ad0000          STRH     r0,[sp,#0]
;;;141      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000016  f44f7182          MOV      r1,#0x104
00001a  f8ad1002          STRH     r1,[sp,#2]
;;;142      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;143      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
000022  2102              MOVS     r1,#2
000024  f8ad1006          STRH     r1,[sp,#6]
;;;144      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000028  2101              MOVS     r1,#1
00002a  f8ad1008          STRH     r1,[sp,#8]
;;;145      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
00002e  0249              LSLS     r1,r1,#9
000030  f8ad100a          STRH     r1,[sp,#0xa]
;;;146    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
;;;147      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
;;;148    #else
;;;149      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
000034  2108              MOVS     r1,#8
000036  f8ad100c          STRH     r1,[sp,#0xc]
;;;150    #endif
;;;151    
;;;152      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
00003a  f8ad000e          STRH     r0,[sp,#0xe]
;;;153      SPI_InitStructure.SPI_CRCPolynomial = 7;
00003e  2007              MOVS     r0,#7
;;;154      SPI_Init(sFLASH_SPI, &SPI_InitStructure);
000040  4c07              LDR      r4,|L4.96|
000042  f8ad0010          STRH     r0,[sp,#0x10]         ;153
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       SPI_Init
;;;155    
;;;156      /*!< Enable the sFLASH_SPI  */
;;;157      SPI_Cmd(sFLASH_SPI, ENABLE);
00004e  2101              MOVS     r1,#1
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       SPI_Cmd
;;;158    }
000056  b006              ADD      sp,sp,#0x18
000058  bd10              POP      {r4,pc}
;;;159    
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      0x40010800
                  |L4.96|
                          DCD      0x40013000

                          AREA ||i.sFLASH_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sFLASH_ReadBuffer PROC
;;;339      */
;;;340    void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;341    {
;;;342      /*!< Select the FLASH: Chip Select low */
;;;343      sFLASH_CS_LOW();
000004  4f13              LDR      r7,|L5.84|
000006  460d              MOV      r5,r1                 ;341
000008  4606              MOV      r6,r0                 ;341
00000a  4614              MOV      r4,r2                 ;341
00000c  2110              MOVS     r1,#0x10
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       GPIO_ResetBits
;;;344    
;;;345      /*!< Send "Read from Memory " instruction */
;;;346      sFLASH_SendByte(sFLASH_CMD_READ);
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       sFLASH_SendByte
;;;347    
;;;348      /*!< Send ReadAddr high nibble address byte to read from */
;;;349      sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
00001a  f3c54007          UBFX     r0,r5,#16,#8
00001e  f7fffffe          BL       sFLASH_SendByte
;;;350      /*!< Send ReadAddr medium nibble address byte to read from */
;;;351      sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
000022  f3c52007          UBFX     r0,r5,#8,#8
000026  f7fffffe          BL       sFLASH_SendByte
;;;352      /*!< Send ReadAddr low nibble address byte to read from */
;;;353      sFLASH_SendByte(ReadAddr & 0xFF);
00002a  b2e8              UXTB     r0,r5
00002c  f7fffffe          BL       sFLASH_SendByte
;;;354    
;;;355      while (NumByteToRead--) /*!< while there is data to be read */
000030  e004              B        |L5.60|
                  |L5.50|
;;;356      {
;;;357        /*!< Read a byte from the FLASH */
;;;358        *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000032  20a5              MOVS     r0,#0xa5
000034  f7fffffe          BL       sFLASH_SendByte
000038  f8060b01          STRB     r0,[r6],#1
                  |L5.60|
00003c  0020              MOVS     r0,r4                 ;355
00003e  f1a40401          SUB      r4,r4,#1              ;355
000042  b2a4              UXTH     r4,r4                 ;355
000044  d1f5              BNE      |L5.50|
;;;359        /*!< Point to the next location where the byte read will be saved */
;;;360        pBuffer++;
;;;361      }
;;;362    
;;;363      /*!< Deselect the FLASH: Chip Select high */
;;;364      sFLASH_CS_HIGH();
000046  4638              MOV      r0,r7
000048  e8bd41f0          POP      {r4-r8,lr}
00004c  2110              MOVS     r1,#0x10
00004e  f7ffbffe          B.W      GPIO_SetBits
;;;365    }
;;;366    
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
                          DCD      0x40010800

                          AREA ||i.sFLASH_ReadByte||, CODE, READONLY, ALIGN=1

                  sFLASH_ReadByte PROC
;;;431      */
;;;432    uint8_t sFLASH_ReadByte(void)
000000  20a5              MOVS     r0,#0xa5
;;;433    {
;;;434      return (sFLASH_SendByte(sFLASH_DUMMY_BYTE));
000002  f7ffbffe          B.W      sFLASH_SendByte
;;;435    }
;;;436    
                          ENDP


                          AREA ||i.sFLASH_ReadID||, CODE, READONLY, ALIGN=2

                  sFLASH_ReadID PROC
;;;371      */
;;;372    uint32_t sFLASH_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;373    {
;;;374      uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
;;;375    
;;;376      /*!< Select the FLASH: Chip Select low */
;;;377      sFLASH_CS_LOW();
000004  4e0e              LDR      r6,|L7.64|
000006  2110              MOVS     r1,#0x10
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GPIO_ResetBits
;;;378    
;;;379      /*!< Send "RDID " instruction */
;;;380      sFLASH_SendByte(0x9F);
00000e  209f              MOVS     r0,#0x9f
000010  f7fffffe          BL       sFLASH_SendByte
;;;381    
;;;382      /*!< Read a byte from the FLASH */
;;;383      Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000014  20a5              MOVS     r0,#0xa5
000016  f7fffffe          BL       sFLASH_SendByte
00001a  4605              MOV      r5,r0
;;;384    
;;;385      /*!< Read a byte from the FLASH */
;;;386      Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
00001c  20a5              MOVS     r0,#0xa5
00001e  f7fffffe          BL       sFLASH_SendByte
000022  4604              MOV      r4,r0
;;;387    
;;;388      /*!< Read a byte from the FLASH */
;;;389      Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000024  20a5              MOVS     r0,#0xa5
000026  f7fffffe          BL       sFLASH_SendByte
00002a  4607              MOV      r7,r0
;;;390    
;;;391      /*!< Deselect the FLASH: Chip Select high */
;;;392      sFLASH_CS_HIGH();
00002c  2110              MOVS     r1,#0x10
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       GPIO_SetBits
;;;393    
;;;394      Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
000034  0428              LSLS     r0,r5,#16
000036  ea402004          ORR      r0,r0,r4,LSL #8
00003a  4338              ORRS     r0,r0,r7
;;;395    
;;;396      return Temp;
;;;397    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;398    
                          ENDP

                  |L7.64|
                          DCD      0x40010800

                          AREA ||i.sFLASH_SendByte||, CODE, READONLY, ALIGN=2

                  sFLASH_SendByte PROC
;;;442      */
;;;443    uint8_t sFLASH_SendByte(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;444    {
;;;445      /*!< Loop while DR register in not emplty */
;;;446      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
000002  4c0b              LDR      r4,|L8.48|
000004  4605              MOV      r5,r0                 ;444
                  |L8.6|
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L8.6|
;;;447    
;;;448      /*!< Send byte through the SPI1 peripheral */
;;;449      SPI_I2S_SendData(sFLASH_SPI, byte);
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SPI_I2S_SendData
                  |L8.26|
;;;450    
;;;451      /*!< Wait to receive a byte */
;;;452      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L8.26|
;;;453    
;;;454      /*!< Return the byte read from the SPI bus */
;;;455      return SPI_I2S_ReceiveData(sFLASH_SPI);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c0              UXTB     r0,r0
;;;456    }
00002e  bd70              POP      {r4-r6,pc}
;;;457    
                          ENDP

                  |L8.48|
                          DCD      0x40013000

                          AREA ||i.sFLASH_SendHalfWord||, CODE, READONLY, ALIGN=2

                  sFLASH_SendHalfWord PROC
;;;463      */
;;;464    uint16_t sFLASH_SendHalfWord(uint16_t HalfWord)
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
;;;466      /*!< Loop while DR register in not emplty */
;;;467      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
000002  4c0b              LDR      r4,|L9.48|
000004  4605              MOV      r5,r0                 ;465
                  |L9.6|
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;468    
;;;469      /*!< Send Half Word through the sFLASH peripheral */
;;;470      SPI_I2S_SendData(sFLASH_SPI, HalfWord);
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SPI_I2S_SendData
                  |L9.26|
;;;471    
;;;472      /*!< Wait to receive a Half Word */
;;;473      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L9.26|
;;;474    
;;;475      /*!< Return the Half Word read from the SPI bus */
;;;476      return SPI_I2S_ReceiveData(sFLASH_SPI);
000026  4620              MOV      r0,r4
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      SPI_I2S_ReceiveData
;;;477    }
;;;478    
                          ENDP

                  |L9.48|
                          DCD      0x40013000

                          AREA ||i.sFLASH_StartReadSequence||, CODE, READONLY, ALIGN=2

                  sFLASH_StartReadSequence PROC
;;;407      */
;;;408    void sFLASH_StartReadSequence(uint32_t ReadAddr)
000000  b510              PUSH     {r4,lr}
;;;409    {
000002  4604              MOV      r4,r0
;;;410      /*!< Select the FLASH: Chip Select low */
;;;411      sFLASH_CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  4809              LDR      r0,|L10.44|
000008  f7fffffe          BL       GPIO_ResetBits
;;;412    
;;;413      /*!< Send "Read from Memory " instruction */
;;;414      sFLASH_SendByte(sFLASH_CMD_READ);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       sFLASH_SendByte
;;;415    
;;;416      /*!< Send the 24-bit address of the address to read from -------------------*/
;;;417      /*!< Send ReadAddr high nibble address byte */
;;;418      sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
000012  f3c44007          UBFX     r0,r4,#16,#8
000016  f7fffffe          BL       sFLASH_SendByte
;;;419      /*!< Send ReadAddr medium nibble address byte */
;;;420      sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       sFLASH_SendByte
;;;421      /*!< Send ReadAddr low nibble address byte */
;;;422      sFLASH_SendByte(ReadAddr & 0xFF);
000022  b2e0              UXTB     r0,r4
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      sFLASH_SendByte
;;;423    }
;;;424    
                          ENDP

                  |L10.44|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WaitForWriteEnd||, CODE, READONLY, ALIGN=2

                  sFLASH_WaitForWriteEnd PROC
;;;501      */
;;;502    void sFLASH_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504      uint8_t flashstatus = 0;
;;;505    
;;;506      /*!< Select the FLASH: Chip Select low */
;;;507      sFLASH_CS_LOW();
000002  4c09              LDR      r4,|L11.40|
000004  2110              MOVS     r1,#0x10
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       GPIO_ResetBits
;;;508    
;;;509      /*!< Send "Read Status Register" instruction */
;;;510      sFLASH_SendByte(sFLASH_CMD_RDSR);
00000c  2005              MOVS     r0,#5
00000e  f7fffffe          BL       sFLASH_SendByte
                  |L11.18|
;;;511    
;;;512      /*!< Loop as long as the memory is busy with a write cycle */
;;;513      do
;;;514      {
;;;515        /*!< Send a dummy byte to generate the clock needed by the FLASH
;;;516        and put the value of the status register in FLASH_Status variable */
;;;517        flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000012  20a5              MOVS     r0,#0xa5
000014  f7fffffe          BL       sFLASH_SendByte
;;;518    
;;;519      }
;;;520      while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
000018  07c0              LSLS     r0,r0,#31
00001a  d1fa              BNE      |L11.18|
;;;521    
;;;522      /*!< Deselect the FLASH: Chip Select high */
;;;523      sFLASH_CS_HIGH();
00001c  4620              MOV      r0,r4
00001e  e8bd4010          POP      {r4,lr}
000022  2110              MOVS     r1,#0x10
000024  f7ffbffe          B.W      GPIO_SetBits
;;;524    }
;;;525    
                          ENDP

                  |L11.40|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WriteBuffer||, CODE, READONLY, ALIGN=1

                  sFLASH_WriteBuffer PROC
;;;261      */
;;;262    void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;263    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;264      uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
;;;265    
;;;266      Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
000008  f01100ff          ANDS     r0,r1,#0xff
;;;267      count = sFLASH_SPI_PAGESIZE - Addr;
00000c  f1c00100          RSB      r1,r0,#0
000010  b2cd              UXTB     r5,r1
;;;268      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
000012  ea4f2412          LSR      r4,r2,#8
;;;269      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
000016  f00209ff          AND      r9,r2,#0xff
;;;270    
;;;271      if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
;;;272      {
;;;273        if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
;;;274        {
;;;275          sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
;;;276        }
;;;277        else /*!< NumByteToWrite > sFLASH_PAGESIZE */
;;;278        {
;;;279          while (NumOfPage--)
;;;280          {
;;;281            sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
00001a  f44f7a80          MOV      r10,#0x100
00001e  d013              BEQ      |L12.72|
000020  b2f0              UXTB     r0,r6                 ;266
000022  4240              RSBS     r0,r0,#0              ;267
000024  b2c0              UXTB     r0,r0                 ;267
;;;282            WriteAddr +=  sFLASH_SPI_PAGESIZE;
;;;283            pBuffer += sFLASH_SPI_PAGESIZE;
;;;284          }
;;;285    
;;;286          sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
;;;287        }
;;;288      }
;;;289      else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
;;;290      {
;;;291        if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
;;;292        {
;;;293          if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
;;;294          {
;;;295            temp = NumOfSingle - count;
;;;296    
;;;297            sFLASH_WritePage(pBuffer, WriteAddr, count);
;;;298            WriteAddr +=  count;
000026  eb060800          ADD      r8,r6,r0
00002a  b31c              CBZ      r4,|L12.116|
;;;299            pBuffer += count;
;;;300    
;;;301            sFLASH_WritePage(pBuffer, WriteAddr, temp);
;;;302          }
;;;303          else
;;;304          {
;;;305            sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
;;;306          }
;;;307        }
;;;308        else /*!< NumByteToWrite > sFLASH_PAGESIZE */
;;;309        {
;;;310          NumByteToWrite -= count;
00002c  1b50              SUBS     r0,r2,r5
00002e  b280              UXTH     r0,r0
;;;311          NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
000030  0a04              LSRS     r4,r0,#8
;;;312          NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
000032  f00009ff          AND      r9,r0,#0xff
;;;313    
;;;314          sFLASH_WritePage(pBuffer, WriteAddr, count);
000036  462a              MOV      r2,r5
000038  4631              MOV      r1,r6
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       sFLASH_WritePage
;;;315          WriteAddr +=  count;
;;;316          pBuffer += count;
000040  443d              ADD      r5,r5,r7
000042  4646              MOV      r6,r8                 ;314
000044  4657              MOV      r7,r10                ;281
;;;317    
;;;318          while (NumOfPage--)
000046  e02c              B        |L12.162|
                  |L12.72|
000048  b17c              CBZ      r4,|L12.106|
00004a  4655              MOV      r5,r10                ;281
                  |L12.76|
00004c  0020              MOVS     r0,r4                 ;279
00004e  f1a40401          SUB      r4,r4,#1              ;279
000052  b2e4              UXTB     r4,r4                 ;279
000054  d00c              BEQ      |L12.112|
000056  462a              MOV      r2,r5                 ;281
000058  4631              MOV      r1,r6                 ;281
00005a  4638              MOV      r0,r7                 ;281
00005c  f7fffffe          BL       sFLASH_WritePage
000060  f5067680          ADD      r6,r6,#0x100          ;282
000064  f5077780          ADD      r7,r7,#0x100          ;283
000068  e7f0              B        |L12.76|
                  |L12.106|
00006a  4631              MOV      r1,r6                 ;275
00006c  4638              MOV      r0,r7                 ;275
00006e  e023              B        |L12.184|
                  |L12.112|
000070  464a              MOV      r2,r9                 ;286
000072  e7fa              B        |L12.106|
                  |L12.116|
000074  45a9              CMP      r9,r5                 ;293
000076  d9f8              BLS      |L12.106|
000078  eba90005          SUB      r0,r9,r5              ;295
00007c  b2c4              UXTB     r4,r0                 ;295
00007e  462a              MOV      r2,r5                 ;297
000080  4631              MOV      r1,r6                 ;297
000082  4638              MOV      r0,r7                 ;297
000084  f7fffffe          BL       sFLASH_WritePage
000088  4641              MOV      r1,r8                 ;297
00008a  1978              ADDS     r0,r7,r5              ;299
00008c  4622              MOV      r2,r4                 ;301
00008e  e013              B        |L12.184|
                  |L12.144|
;;;319          {
;;;320            sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
000090  463a              MOV      r2,r7
000092  4631              MOV      r1,r6
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       sFLASH_WritePage
;;;321            WriteAddr +=  sFLASH_SPI_PAGESIZE;
00009a  f5067680          ADD      r6,r6,#0x100
;;;322            pBuffer += sFLASH_SPI_PAGESIZE;
00009e  f5057580          ADD      r5,r5,#0x100
                  |L12.162|
0000a2  0020              MOVS     r0,r4                 ;318
0000a4  f1a40401          SUB      r4,r4,#1              ;318
0000a8  b2e4              UXTB     r4,r4                 ;318
0000aa  d1f1              BNE      |L12.144|
;;;323          }
;;;324    
;;;325          if (NumOfSingle != 0)
0000ac  ea5f0009          MOVS     r0,r9
0000b0  d006              BEQ      |L12.192|
;;;326          {
;;;327            sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
0000b2  4602              MOV      r2,r0
0000b4  4631              MOV      r1,r6
0000b6  4628              MOV      r0,r5
                  |L12.184|
0000b8  e8bd47f0          POP      {r4-r10,lr}
0000bc  f7ffbffe          B.W      sFLASH_WritePage
                  |L12.192|
;;;328          }
;;;329        }
;;;330      }
;;;331    }
0000c0  e8bd87f0          POP      {r4-r10,pc}
;;;332    
                          ENDP


                          AREA ||i.sFLASH_WriteEnable||, CODE, READONLY, ALIGN=2

                  sFLASH_WriteEnable PROC
;;;483      */
;;;484    void sFLASH_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;485    {
;;;486      /*!< Select the FLASH: Chip Select low */
;;;487      sFLASH_CS_LOW();
000002  4c07              LDR      r4,|L13.32|
000004  2110              MOVS     r1,#0x10
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       GPIO_ResetBits
;;;488    
;;;489      /*!< Send "Write Enable" instruction */
;;;490      sFLASH_SendByte(sFLASH_CMD_WREN);
00000c  2006              MOVS     r0,#6
00000e  f7fffffe          BL       sFLASH_SendByte
;;;491    
;;;492      /*!< Deselect the FLASH: Chip Select high */
;;;493      sFLASH_CS_HIGH();
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2110              MOVS     r1,#0x10
00001a  f7ffbffe          B.W      GPIO_SetBits
;;;494    }
;;;495    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WritePage||, CODE, READONLY, ALIGN=2

                  sFLASH_WritePage PROC
;;;220      */
;;;221    void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;222    {
000004  4614              MOV      r4,r2
000006  460d              MOV      r5,r1
000008  4606              MOV      r6,r0
;;;223      /*!< Enable the write access to the FLASH */
;;;224      sFLASH_WriteEnable();
00000a  f7fffffe          BL       sFLASH_WriteEnable
;;;225    
;;;226      /*!< Select the FLASH: Chip Select low */
;;;227      sFLASH_CS_LOW();
00000e  4f12              LDR      r7,|L14.88|
000010  2110              MOVS     r1,#0x10
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       GPIO_ResetBits
;;;228      /*!< Send "Write to Memory " instruction */
;;;229      sFLASH_SendByte(sFLASH_CMD_WRITE);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       sFLASH_SendByte
;;;230      /*!< Send WriteAddr high nibble address byte to write to */
;;;231      sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
00001e  f3c54007          UBFX     r0,r5,#16,#8
000022  f7fffffe          BL       sFLASH_SendByte
;;;232      /*!< Send WriteAddr medium nibble address byte to write to */
;;;233      sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
000026  f3c52007          UBFX     r0,r5,#8,#8
00002a  f7fffffe          BL       sFLASH_SendByte
;;;234      /*!< Send WriteAddr low nibble address byte to write to */
;;;235      sFLASH_SendByte(WriteAddr & 0xFF);
00002e  b2e8              UXTB     r0,r5
000030  f7fffffe          BL       sFLASH_SendByte
;;;236    
;;;237      /*!< while there is data to be written on the FLASH */
;;;238      while (NumByteToWrite--)
000034  e003              B        |L14.62|
                  |L14.54|
;;;239      {
;;;240        /*!< Send the current byte */
;;;241        sFLASH_SendByte(*pBuffer);
000036  7830              LDRB     r0,[r6,#0]
000038  f7fffffe          BL       sFLASH_SendByte
;;;242        /*!< Point on the next byte to be written */
;;;243        pBuffer++;
00003c  1c76              ADDS     r6,r6,#1
                  |L14.62|
00003e  0020              MOVS     r0,r4                 ;238
000040  f1a40401          SUB      r4,r4,#1              ;238
000044  b2a4              UXTH     r4,r4                 ;238
000046  d1f6              BNE      |L14.54|
;;;244      }
;;;245    
;;;246      /*!< Deselect the FLASH: Chip Select high */
;;;247      sFLASH_CS_HIGH();
000048  2110              MOVS     r1,#0x10
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       GPIO_SetBits
;;;248    
;;;249      /*!< Wait the end of Flash writing */
;;;250      sFLASH_WaitForWriteEnd();
000050  e8bd41f0          POP      {r4-r8,lr}
000054  f7ffbffe          B.W      sFLASH_WaitForWriteEnd
;;;251    }
;;;252    
                          ENDP

                  |L14.88|
                          DCD      0x40010800

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM3210B_EVAL\\stm3210b_eval_spi_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_stm3210b_eval_spi_flash_c_9c1dbaca____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___25_stm3210b_eval_spi_flash_c_9c1dbaca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_stm3210b_eval_spi_flash_c_9c1dbaca____REVSH|
#line 144
|__asm___25_stm3210b_eval_spi_flash_c_9c1dbaca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
