; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm3210b_eval.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm3210b_eval.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\DFU\inc -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL ..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL\stm3210b_eval.c]
                          THUMB

                          AREA ||i.LM75_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_DeInit PROC
;;;545      */
;;;546    void LM75_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;547    {
;;;548      GPIO_InitTypeDef  GPIO_InitStructure;
;;;549    
;;;550      /*!< Disable LM75_I2C */
;;;551      I2C_Cmd(LM75_I2C, DISABLE);
000002  4c13              LDR      r4,|L1.80|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;552      /*!< DeInitializes the LM75_I2C */
;;;553      I2C_DeInit(LM75_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;554      
;;;555      /*!< LM75_I2C Periph clock disable */
;;;556      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;557        
;;;558      /*!< Configure LM75_I2C pins: SCL */
;;;559      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;560      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000022  2004              MOVS     r0,#4
;;;561      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000024  4c0b              LDR      r4,|L1.84|
000026  f88d0003          STRB     r0,[sp,#3]            ;560
00002a  4669              MOV      r1,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_Init
;;;562    
;;;563      /*!< Configure LM75_I2C pins: SDA */
;;;564      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000032  2080              MOVS     r0,#0x80
000034  f8ad0000          STRH     r0,[sp,#0]
;;;565      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;566    
;;;567      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;568      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;569      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;570    }
00004e  bd38              POP      {r3-r5,pc}
;;;571    
                          ENDP

                  |L1.80|
                          DCD      0x40005400
                  |L1.84|
                          DCD      0x40010c00

                          AREA ||i.LM75_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_Init PROC
;;;576      */
;;;577    void LM75_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;578    {
;;;579      GPIO_InitTypeDef  GPIO_InitStructure;
;;;580    
;;;581      /*!< LM75_I2C Periph clock enable */
;;;582      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;583        
;;;584      /*!< LM75_I2C_SCL_GPIO_CLK, LM75_I2C_SDA_GPIO_CLK 
;;;585           and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;586      RCC_APB2PeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
00000a  2101              MOVS     r1,#1
00000c  2008              MOVS     r0,#8
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;587                             LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;588      
;;;589      /*!< Configure LM75_I2C pins: SCL */
;;;590      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
000012  2040              MOVS     r0,#0x40
000014  f8ad0000          STRH     r0,[sp,#0]
;;;591      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;592      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
00001e  201c              MOVS     r0,#0x1c
;;;593      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000020  4c0c              LDR      r4,|L2.84|
000022  f88d0003          STRB     r0,[sp,#3]            ;592
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;594    
;;;595      /*!< Configure LM75_I2C pins: SDA */
;;;596      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0000          STRH     r0,[sp,#0]
;;;597      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_Init
;;;598    
;;;599      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;600      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
00003c  2020              MOVS     r0,#0x20
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;601      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000042  2048              MOVS     r0,#0x48
000044  f88d0003          STRB     r0,[sp,#3]
;;;602      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure); 
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;603    }
000050  bd38              POP      {r3-r5,pc}
;;;604      
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40010c00

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;375      */
;;;376    void SD_LowLevel_DeInit(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;377    {
;;;378      GPIO_InitTypeDef  GPIO_InitStructure;
;;;379      
;;;380      SPI_Cmd(SD_SPI, DISABLE); /*!< SD_SPI disable */
000002  4c19              LDR      r4,|L3.104|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;381      SPI_I2S_DeInit(SD_SPI);   /*!< DeInitializes the SD_SPI */
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;382      
;;;383      /*!< SD_SPI Periph clock disable */
;;;384      RCC_APB2PeriphClockCmd(SD_SPI_CLK, DISABLE); 
000012  14a5              ASRS     r5,r4,#18
000014  2100              MOVS     r1,#0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;385      
;;;386      /*!< Configure SD_SPI pins: SCK */
;;;387      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
00001c  2020              MOVS     r0,#0x20
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;388      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000022  2004              MOVS     r0,#4
;;;389      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000024  4e11              LDR      r6,|L3.108|
000026  f88d0003          STRB     r0,[sp,#3]            ;388
00002a  4669              MOV      r1,sp
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GPIO_Init
;;;390    
;;;391      /*!< Configure SD_SPI pins: MISO */
;;;392      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
000032  2040              MOVS     r0,#0x40
000034  f8ad0000          STRH     r0,[sp,#0]
;;;393      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       GPIO_Init
;;;394    
;;;395      /*!< Configure SD_SPI pins: MOSI */
;;;396      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000040  2480              MOVS     r4,#0x80
000042  f8ad4000          STRH     r4,[sp,#0]
;;;397      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;398    
;;;399      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;400      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
00004e  f8ad5000          STRH     r5,[sp,#0]
;;;401      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4806              LDR      r0,|L3.112|
000056  f7fffffe          BL       GPIO_Init
;;;402    
;;;403      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;404      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
00005a  f8ad4000          STRH     r4,[sp,#0]
;;;405      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
00005e  4669              MOV      r1,sp
000060  4804              LDR      r0,|L3.116|
000062  f7fffffe          BL       GPIO_Init
;;;406    }
000066  bdf8              POP      {r3-r7,pc}
;;;407    
                          ENDP

                  |L3.104|
                          DCD      0x40013000
                  |L3.108|
                          DCD      0x40010800
                  |L3.112|
                          DCD      0x40011000
                  |L3.116|
                          DCD      0x40011800

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;412      */
;;;413    void SD_LowLevel_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;414    {
000002  b086              SUB      sp,sp,#0x18
;;;415      GPIO_InitTypeDef  GPIO_InitStructure;
;;;416      SPI_InitTypeDef   SPI_InitStructure;
;;;417    
;;;418      /*!< SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
;;;419           and SD_SPI_SCK_GPIO Periph clock enable */
;;;420      RCC_APB2PeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
000004  2101              MOVS     r1,#1
000006  2054              MOVS     r0,#0x54
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;421                             SD_SPI_SCK_GPIO_CLK | SD_DETECT_GPIO_CLK, ENABLE);
;;;422    
;;;423      /*!< SD_SPI Periph clock enable */
;;;424      RCC_APB2PeriphClockCmd(SD_SPI_CLK, ENABLE); 
00000c  2101              MOVS     r1,#1
00000e  030d              LSLS     r5,r1,#12
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;425    
;;;426      
;;;427      /*!< Configure SD_SPI pins: SCK */
;;;428      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
000016  2020              MOVS     r0,#0x20
000018  f8ad0000          STRH     r0,[sp,#0]
;;;429      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0002          STRB     r0,[sp,#2]
;;;430      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
;;;431      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000024  4e27              LDR      r6,|L4.196|
000026  f88d0003          STRB     r0,[sp,#3]            ;430
00002a  4669              MOV      r1,sp
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GPIO_Init
;;;432    
;;;433      /*!< Configure SD_SPI pins: MOSI */
;;;434      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000032  2480              MOVS     r4,#0x80
000034  f8ad4000          STRH     r4,[sp,#0]
;;;435      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       GPIO_Init
;;;436    
;;;437      /*!< Configure SD_SPI pins: MISO */
;;;438      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
000040  2040              MOVS     r0,#0x40
000042  f8ad0000          STRH     r0,[sp,#0]
;;;439      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
000046  2004              MOVS     r0,#4
000048  f88d0003          STRB     r0,[sp,#3]
;;;440      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       GPIO_Init
;;;441      
;;;442      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;443      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
000054  f8ad5000          STRH     r5,[sp,#0]
;;;444      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000058  2010              MOVS     r0,#0x10
00005a  f88d0003          STRB     r0,[sp,#3]
;;;445      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
00005e  4669              MOV      r1,sp
000060  4819              LDR      r0,|L4.200|
000062  f7fffffe          BL       GPIO_Init
;;;446    
;;;447      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;448      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000066  f8ad4000          STRH     r4,[sp,#0]
;;;449      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00006a  2048              MOVS     r0,#0x48
00006c  f88d0003          STRB     r0,[sp,#3]
;;;450      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4816              LDR      r0,|L4.204|
000074  f7fffffe          BL       GPIO_Init
;;;451    
;;;452      /*!< SD_SPI Config */
;;;453      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000078  2000              MOVS     r0,#0
00007a  f8ad0004          STRH     r0,[sp,#4]
;;;454      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00007e  f44f7182          MOV      r1,#0x104
000082  f8ad1006          STRH     r1,[sp,#6]
;;;455      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000086  f8ad0008          STRH     r0,[sp,#8]
;;;456      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00008a  2102              MOVS     r1,#2
00008c  f8ad100a          STRH     r1,[sp,#0xa]
;;;457      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000090  2101              MOVS     r1,#1
000092  f8ad100c          STRH     r1,[sp,#0xc]
;;;458      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000096  0249              LSLS     r1,r1,#9
000098  f8ad100e          STRH     r1,[sp,#0xe]
;;;459      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
00009c  2108              MOVS     r1,#8
00009e  f8ad1010          STRH     r1,[sp,#0x10]
;;;460      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000a2  f8ad0012          STRH     r0,[sp,#0x12]
;;;461      SPI_InitStructure.SPI_CRCPolynomial = 7;
0000a6  2007              MOVS     r0,#7
;;;462      SPI_Init(SD_SPI, &SPI_InitStructure);
0000a8  4c09              LDR      r4,|L4.208|
0000aa  f8ad0014          STRH     r0,[sp,#0x14]         ;461
0000ae  a901              ADD      r1,sp,#4
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       SPI_Init
;;;463      
;;;464      SPI_Cmd(SD_SPI, ENABLE); /*!< SD_SPI enable */
0000b6  2101              MOVS     r1,#1
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       SPI_Cmd
;;;465    }
0000be  b006              ADD      sp,sp,#0x18
0000c0  bd70              POP      {r4-r6,pc}
;;;466    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L4.196|
                          DCD      0x40010800
                  |L4.200|
                          DCD      0x40011000
                  |L4.204|
                          DCD      0x40011800
                  |L4.208|
                          DCD      0x40013000

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;333      */
;;;334    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;335    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;336      GPIO_InitTypeDef GPIO_InitStructure;
;;;337    
;;;338      /* Enable GPIO clock */
;;;339      RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
000006  4927              LDR      r1,|L5.164|
000008  4826              LDR      r0,|L5.164|
00000a  3108              ADDS     r1,r1,#8
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  f8511024          LDR      r1,[r1,r4,LSL #2]
000014  4308              ORRS     r0,r0,r1
000016  f0400001          ORR      r0,r0,#1
00001a  2101              MOVS     r1,#1
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;340    
;;;341      if (COM == COM1)
;;;342      {
;;;343        RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
000020  4d20              LDR      r5,|L5.164|
000022  3d08              SUBS     r5,r5,#8
000024  b3bc              CBZ      r4,|L5.150|
;;;344      }
;;;345      else
;;;346      {
;;;347        /* Enable the USART2 Pins Software Remapping */
;;;348        GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
000026  2101              MOVS     r1,#1
000028  2008              MOVS     r0,#8
00002a  f7fffffe          BL       GPIO_PinRemapConfig
;;;349        RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
00002e  f8550024          LDR      r0,[r5,r4,LSL #2]
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L5.56|
;;;350      }
;;;351    
;;;352      /* Configure USART Tx as alternate function push-pull */
;;;353      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000038  2018              MOVS     r0,#0x18
00003a  f88d0003          STRB     r0,[sp,#3]
;;;354      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
00003e  4819              LDR      r0,|L5.164|
;;;355      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;356      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  3818              SUBS     r0,r0,#0x18           ;354
000044  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;354
000048  f8ad0000          STRH     r0,[sp,#0]            ;354
00004c  2003              MOVS     r0,#3                 ;355
00004e  f88d0002          STRB     r0,[sp,#2]            ;355
000052  4815              LDR      r0,|L5.168|
000054  f8500024          LDR      r0,[r0,r4,LSL #2]
000058  f7fffffe          BL       GPIO_Init
;;;357    
;;;358    
;;;359      /* Configure USART Rx as input floating */
;;;360      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005c  2004              MOVS     r0,#4
00005e  f88d0003          STRB     r0,[sp,#3]
;;;361      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
000062  4810              LDR      r0,|L5.164|
;;;362      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
000064  4669              MOV      r1,sp
000066  3814              SUBS     r0,r0,#0x14           ;361
000068  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;361
00006c  f8ad0000          STRH     r0,[sp,#0]            ;361
000070  480d              LDR      r0,|L5.168|
000072  3008              ADDS     r0,r0,#8
000074  f8500024          LDR      r0,[r0,r4,LSL #2]
000078  f7fffffe          BL       GPIO_Init
;;;363    
;;;364      /* USART configuration */
;;;365      USART_Init(COM_USART[COM], USART_InitStruct);
00007c  4d0a              LDR      r5,|L5.168|
00007e  4631              MOV      r1,r6
000080  3d08              SUBS     r5,r5,#8
000082  f8550024          LDR      r0,[r5,r4,LSL #2]
000086  f7fffffe          BL       USART_Init
;;;366        
;;;367      /* Enable USART */
;;;368      USART_Cmd(COM_USART[COM], ENABLE);
00008a  f8550024          LDR      r0,[r5,r4,LSL #2]
00008e  2101              MOVS     r1,#1
000090  f7fffffe          BL       USART_Cmd
;;;369    }
000094  bdf8              POP      {r3-r7,pc}
                  |L5.150|
000096  e7ff              B        |L5.152|
                  |L5.152|
000098  2101              MOVS     r1,#1                 ;343
00009a  6828              LDR      r0,[r5,#0]            ;343
00009c  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000a0  e7ca              B        |L5.56|
;;;370    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L5.164|
                          DCD      ||.constdata||+0x18
                  |L5.168|
                          DCD      ||.data||+0x8

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;180      */
;;;181    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b538              PUSH     {r3-r5,lr}
;;;182    {
000002  4604              MOV      r4,r0
;;;183      GPIO_InitTypeDef  GPIO_InitStructure;
;;;184      
;;;185      /* Enable the GPIO_LED Clock */
;;;186      RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  480c              LDR      r0,|L6.56|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;187    
;;;188      /* Configure the GPIO_LED pin */
;;;189      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4809              LDR      r0,|L6.56|
;;;190      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;191      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;192    
;;;193      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4669              MOV      r1,sp
000014  3820              SUBS     r0,r0,#0x20           ;189
000016  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;189
00001a  f8ad0000          STRH     r0,[sp,#0]            ;189
00001e  2010              MOVS     r0,#0x10              ;190
000020  f88d0003          STRB     r0,[sp,#3]            ;190
000024  2003              MOVS     r0,#3                 ;191
000026  f88d0002          STRB     r0,[sp,#2]            ;191
00002a  4804              LDR      r0,|L6.60|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;194    }
000034  bd38              POP      {r3-r5,pc}
;;;195    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      ||.constdata||+0x28
                  |L6.60|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;220      */
;;;221    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L7.16|
;;;222    {
;;;223      GPIO_PORT[Led]->BRR = GPIO_PIN[Led];  
000002  4a04              LDR      r2,|L7.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6141              STR      r1,[r0,#0x14]
;;;224    }
00000e  4770              BX       lr
;;;225    
                          ENDP

                  |L7.16|
                          DCD      ||.constdata||+0x8
                  |L7.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;205      */
;;;206    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L8.16|
;;;207    {
;;;208      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];     
000002  4a04              LDR      r2,|L8.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6101              STR      r1,[r0,#0x10]
;;;209    }
00000e  4770              BX       lr
;;;210    
                          ENDP

                  |L8.16|
                          DCD      ||.constdata||+0x8
                  |L8.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;235      */
;;;236    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L9.20|
;;;237    {
;;;238      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  68ca              LDR      r2,[r1,#0xc]
000008  4b03              LDR      r3,|L9.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  60ca              STR      r2,[r1,#0xc]
;;;239    }
000012  4770              BX       lr
;;;240    
                          ENDP

                  |L9.20|
                          DCD      ||.data||+0x18
                  |L9.24|
                          DCD      ||.constdata||+0x8

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;318      */
;;;319    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  4903              LDR      r1,|L10.16|
;;;320    {
;;;321      return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000002  4a04              LDR      r2,|L10.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  f7ffbffe          B.W      GPIO_ReadInputDataBit
;;;322    }
;;;323    
                          ENDP

                  |L10.16|
                          DCD      ||.constdata||+0x38
                  |L10.20|
                          DCD      ||.data||+0x28

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;259      */
;;;260    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b57f              PUSH     {r0-r6,lr}
;;;261    {
000002  4604              MOV      r4,r0
;;;262      GPIO_InitTypeDef GPIO_InitStructure;
;;;263      EXTI_InitTypeDef EXTI_InitStructure;
;;;264      NVIC_InitTypeDef NVIC_InitStructure;
;;;265    
;;;266      /* Enable the BUTTON Clock */
;;;267      RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
000004  4823              LDR      r0,|L11.148|
000006  460d              MOV      r5,r1                 ;261
000008  2101              MOVS     r1,#1
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  f0400001          ORR      r0,r0,#1
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;268    
;;;269      /* Configure Button pin as input floating */
;;;270      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000016  2004              MOVS     r0,#4
000018  f88d000f          STRB     r0,[sp,#0xf]
;;;271      GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00001c  481d              LDR      r0,|L11.148|
;;;272      GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
00001e  a903              ADD      r1,sp,#0xc
000020  3810              SUBS     r0,r0,#0x10           ;271
000022  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;271
000026  f8ad000c          STRH     r0,[sp,#0xc]          ;271
00002a  481b              LDR      r0,|L11.152|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;273    
;;;274    
;;;275      if (Button_Mode == BUTTON_MODE_EXTI)
000034  2d01              CMP      r5,#1
000036  d12c              BNE      |L11.146|
;;;276      {
;;;277        /* Connect Button EXTI Line to Button GPIO Pin */
;;;278        GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000038  4816              LDR      r0,|L11.148|
00003a  3040              ADDS     r0,r0,#0x40
00003c  f8101014          LDRB     r1,[r0,r4,LSL #1]
000040  3810              SUBS     r0,r0,#0x10
000042  f8100014          LDRB     r0,[r0,r4,LSL #1]
000046  f7fffffe          BL       GPIO_EXTILineConfig
;;;279    
;;;280        /* Configure Button EXTI line */
;;;281        EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
00004a  4812              LDR      r0,|L11.148|
00004c  3020              ADDS     r0,r0,#0x20
00004e  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;282        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000052  9000              STR      r0,[sp,#0]
000054  2000              MOVS     r0,#0
000056  f88d0004          STRB     r0,[sp,#4]
;;;283    
;;;284        if(Button != BUTTON_WAKEUP)
00005a  b10c              CBZ      r4,|L11.96|
;;;285        {
;;;286          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00005c  200c              MOVS     r0,#0xc
00005e  e000              B        |L11.98|
                  |L11.96|
;;;287        }
;;;288        else
;;;289        {
;;;290          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000060  2008              MOVS     r0,#8
                  |L11.98|
000062  f88d0005          STRB     r0,[sp,#5]
;;;291        }
;;;292        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000066  2501              MOVS     r5,#1
000068  f88d5006          STRB     r5,[sp,#6]
;;;293        EXTI_Init(&EXTI_InitStructure);
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       EXTI_Init
;;;294    
;;;295        /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;296        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
000072  4808              LDR      r0,|L11.148|
000074  3050              ADDS     r0,r0,#0x50
000076  f8100014          LDRB     r0,[r0,r4,LSL #1]
00007a  f88d0008          STRB     r0,[sp,#8]
;;;297        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
00007e  200f              MOVS     r0,#0xf
000080  f88d0009          STRB     r0,[sp,#9]
;;;298        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
000084  f88d000a          STRB     r0,[sp,#0xa]
;;;299        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000088  f88d500b          STRB     r5,[sp,#0xb]
;;;300    
;;;301        NVIC_Init(&NVIC_InitStructure); 
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       NVIC_Init
                  |L11.146|
;;;302      }
;;;303    }
000092  bd7f              POP      {r0-r6,pc}
;;;304    
                          ENDP

                  |L11.148|
                          DCD      ||.constdata||+0x48
                  |L11.152|
                          DCD      ||.data||+0x28

                          AREA ||i.sFLASH_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_DeInit PROC
;;;471      */
;;;472    void sFLASH_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;473    {
;;;474      GPIO_InitTypeDef GPIO_InitStructure;
;;;475    
;;;476      /*!< Disable the sFLASH_SPI  */
;;;477      SPI_Cmd(sFLASH_SPI, DISABLE);
000002  4c16              LDR      r4,|L12.92|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;478      
;;;479      /*!< DeInitializes the sFLASH_SPI */
;;;480      SPI_I2S_DeInit(sFLASH_SPI);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;481      
;;;482      /*!< sFLASH_SPI Periph clock disable */
;;;483      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;484      
;;;485      /*!< Configure sFLASH_SPI pins: SCK */
;;;486      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
00001a  2020              MOVS     r0,#0x20
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;487      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000020  2004              MOVS     r0,#4
;;;488      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000022  4c0f              LDR      r4,|L12.96|
000024  f88d0003          STRB     r0,[sp,#3]            ;487
000028  4669              MOV      r1,sp
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       GPIO_Init
;;;489    
;;;490      /*!< Configure sFLASH_SPI pins: MISO */
;;;491      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
000030  2040              MOVS     r0,#0x40
000032  f8ad0000          STRH     r0,[sp,#0]
;;;492      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GPIO_Init
;;;493    
;;;494      /*!< Configure sFLASH_SPI pins: MOSI */
;;;495      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00003e  2080              MOVS     r0,#0x80
000040  f8ad0000          STRH     r0,[sp,#0]
;;;496      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       GPIO_Init
;;;497    
;;;498      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;499      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
00004c  2010              MOVS     r0,#0x10
00004e  f8ad0000          STRH     r0,[sp,#0]
;;;500      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       GPIO_Init
;;;501    }
00005a  bd38              POP      {r3-r5,pc}
;;;502    
                          ENDP

                  |L12.92|
                          DCD      0x40013000
                  |L12.96|
                          DCD      0x40010800

                          AREA ||i.sFLASH_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_Init PROC
;;;507      */
;;;508    void sFLASH_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;509    {
;;;510      GPIO_InitTypeDef GPIO_InitStructure;
;;;511    
;;;512      /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO 
;;;513           and sFLASH_SPI_SCK_GPIO Periph clock enable */
;;;514      RCC_APB2PeriphClockCmd(sFLASH_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;515                             sFLASH_SPI_SCK_GPIO_CLK, ENABLE);
;;;516    
;;;517      /*!< sFLASH_SPI Periph clock enable */
;;;518      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0308              LSLS     r0,r1,#12
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;519      
;;;520      /*!< Configure sFLASH_SPI pins: SCK */
;;;521      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
000012  2020              MOVS     r0,#0x20
000014  f8ad0000          STRH     r0,[sp,#0]
;;;522      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;523      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
;;;524      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000020  4c10              LDR      r4,|L13.100|
000022  f88d0003          STRB     r0,[sp,#3]            ;523
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;525    
;;;526      /*!< Configure sFLASH_SPI pins: MOSI */
;;;527      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0000          STRH     r0,[sp,#0]
;;;528      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_Init
;;;529    
;;;530      /*!< Configure sFLASH_SPI pins: MISO */
;;;531      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
00003c  2040              MOVS     r0,#0x40
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;532      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
000042  2004              MOVS     r0,#4
000044  f88d0003          STRB     r0,[sp,#3]
;;;533      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;534      
;;;535      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;536      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
000050  2110              MOVS     r1,#0x10
000052  f8ad1000          STRH     r1,[sp,#0]
;;;537      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000056  f88d1003          STRB     r1,[sp,#3]
;;;538      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       GPIO_Init
;;;539    }
000062  bd38              POP      {r3-r5,pc}
;;;540    
                          ENDP

                  |L13.100|
                          DCD      0x40010800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_PIN
000000  02000020          DCW      0x0200,0x0020
                  COM_RX_PIN
000004  04000040          DCW      0x0400,0x0040
                  GPIO_PIN
000008  00400080          DCW      0x0040,0x0080
00000c  01000200          DCW      0x0100,0x0200
                  COM_USART_CLK
                          DCD      0x00004000
                          DCD      0x00020000
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000020
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000020
                  GPIO_CLK
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000010
                  BUTTON_PIN
000038  00012000          DCW      0x0001,0x2000
00003c  02000001          DCW      0x0200,0x0001
000040  00020100          DCW      0x0002,0x0100
000044  40001000          DCW      0x4000,0x1000
                  BUTTON_CLK
                          DCD      0x00000004
                          DCD      0x00000010
                          DCD      0x00000008
                          DCD      0x00000040
                          DCD      0x00000040
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000020
                  BUTTON_EXTI_LINE
000068  00012000          DCW      0x0001,0x2000
00006c  02000001          DCW      0x0200,0x0001
000070  00020100          DCW      0x0002,0x0100
000074  40001000          DCW      0x4000,0x1000
                  BUTTON_PORT_SOURCE
000078  00000002          DCW      0x0000,0x0002
00007c  00010004          DCW      0x0001,0x0004
000080  00040003          DCW      0x0004,0x0003
000084  00030003          DCW      0x0003,0x0003
                  BUTTON_PIN_SOURCE
000088  0000000d          DCW      0x0000,0x000d
00008c  00090000          DCW      0x0009,0x0000
000090  00010008          DCW      0x0001,0x0008
000094  000e000c          DCW      0x000e,0x000c
                  BUTTON_IRQn
000098  00060028          DCW      0x0006,0x0028
00009c  00170006          DCW      0x0017,0x0006
0000a0  00070017          DCW      0x0007,0x0017
0000a4  00280028          DCW      0x0028,0x0028

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40013800
                          DCD      0x40004400
                  COM_TX_PORT
                          DCD      0x40010800
                          DCD      0x40011400
                  COM_RX_PORT
                          DCD      0x40010800
                          DCD      0x40011400
                  GPIO_PORT
                          DCD      0x40011000
                          DCD      0x40011000
                          DCD      0x40011000
                          DCD      0x40011000
                  BUTTON_PORT
                          DCD      0x40010800
                          DCD      0x40011000
                          DCD      0x40010c00
                          DCD      0x40011800
                          DCD      0x40011800
                          DCD      0x40011400
                          DCD      0x40011400
                          DCD      0x40011400

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM3210B_EVAL\\stm3210b_eval.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm3210b_eval_c_c84236cb____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm3210b_eval_c_c84236cb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm3210b_eval_c_c84236cb____REVSH|
#line 144
|__asm___15_stm3210b_eval_c_c84236cb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
