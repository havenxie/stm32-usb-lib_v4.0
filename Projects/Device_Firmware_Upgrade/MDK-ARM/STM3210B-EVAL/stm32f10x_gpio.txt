; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm32f10x_gpio.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\stm3210b-eval\stm32f10x_gpio.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;164      */
;;;165    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;168      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2001              MOVS     r0,#1
000012  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;169    }
;;;170    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;113      */
;;;114    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4925              LDR      r1,|L2.152|
;;;115    {
000002  b510              PUSH     {r4,lr}
;;;116      /* Check the parameters */
;;;117      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;118      
;;;119      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L2.22|
;;;120      {
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;122        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2004              MOVS     r0,#4
000014  e03b              B        |L2.142|
                  |L2.22|
;;;123      }
;;;124      else if (GPIOx == GPIOB)
000016  4921              LDR      r1,|L2.156|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L2.42|
;;;125      {
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;127        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2008              MOVS     r0,#8
000028  e031              B        |L2.142|
                  |L2.42|
;;;128      }
;;;129      else if (GPIOx == GPIOC)
00002a  491d              LDR      r1,|L2.160|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L2.62|
;;;130      {
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;132        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2010              MOVS     r0,#0x10
00003c  e027              B        |L2.142|
                  |L2.62|
;;;133      }
;;;134      else if (GPIOx == GPIOD)
00003e  4919              LDR      r1,|L2.164|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L2.82|
;;;135      {
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2020              MOVS     r0,#0x20
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;137        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2020              MOVS     r0,#0x20
000050  e01d              B        |L2.142|
                  |L2.82|
;;;138      }    
;;;139      else if (GPIOx == GPIOE)
000052  4915              LDR      r1,|L2.168|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L2.102|
;;;140      {
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;142        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2040              MOVS     r0,#0x40
000064  e013              B        |L2.142|
                  |L2.102|
;;;143      } 
;;;144      else if (GPIOx == GPIOF)
000066  4911              LDR      r1,|L2.172|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L2.122|
;;;145      {
;;;146        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2080              MOVS     r0,#0x80
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;147        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2080              MOVS     r0,#0x80
000078  e009              B        |L2.142|
                  |L2.122|
;;;148      }
;;;149      else
;;;150      {
;;;151        if (GPIOx == GPIOG)
00007a  490d              LDR      r1,|L2.176|
00007c  4288              CMP      r0,r1
00007e  d10a              BNE      |L2.150|
;;;152        {
;;;153          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000080  1584              ASRS     r4,r0,#22
000082  2101              MOVS     r1,#1
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;154          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
                  |L2.142|
00008e  e8bd4010          POP      {r4,lr}
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.150|
;;;155        }
;;;156      }
;;;157    }
000096  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L2.152|
                          DCD      0x40010800
                  |L2.156|
                          DCD      0x40010c00
                  |L2.160|
                          DCD      0x40011000
                  |L2.164|
                          DCD      0x40011400
                  |L2.168|
                          DCD      0x40011800
                  |L2.172|
                          DCD      0x40011c00
                  |L2.176|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;635      */
;;;636    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;637    { 
;;;638      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;639    
;;;640      /* Configure MII_RMII selection bit */ 
;;;641      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  6008              STR      r0,[r1,#0]
;;;642    }
000004  4770              BX       lr
;;;643      
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x422000dc

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;614      */
;;;615    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b510              PUSH     {r4,lr}
;;;616    {
;;;617      uint32_t tmp = 0x00;
;;;618      /* Check the parameters */
;;;619      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;620      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;621      
;;;622      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000002  078a              LSLS     r2,r1,#30
;;;623      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000004  f0210403          BIC      r4,r1,#3
000008  4906              LDR      r1,|L4.36|
00000a  0f13              LSRS     r3,r2,#28             ;622
00000c  4421              ADD      r1,r1,r4
00000e  220f              MOVS     r2,#0xf               ;622
000010  688c              LDR      r4,[r1,#8]
000012  409a              LSLS     r2,r2,r3              ;622
000014  4394              BICS     r4,r4,r2
000016  608c              STR      r4,[r1,#8]
;;;624      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000018  688a              LDR      r2,[r1,#8]
00001a  4098              LSLS     r0,r0,r3
00001c  4302              ORRS     r2,r2,r0
00001e  608a              STR      r2,[r1,#8]
;;;625    }
000020  bd10              POP      {r4,pc}
;;;626    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40010000

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;488      */
;;;489    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;490    {
;;;491      /* Check the parameters */
;;;492      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;493      
;;;494      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;495    }
000004  4770              BX       lr
;;;496    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;467      */
;;;468    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  4b05              LDR      r3,|L6.24|
;;;469    {
000002  b510              PUSH     {r4,lr}
;;;470      uint32_t tmpreg = 0x00;
;;;471      /* Check the parameters */
;;;472      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;473      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;474        
;;;475      tmpreg = AFIO->EVCR;
000004  681a              LDR      r2,[r3,#0]
;;;476      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;477      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7480          MOV      r4,#0xff80
00000a  4022              ANDS     r2,r2,r4
;;;478      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421000          ORR      r0,r2,r0,LSL #4
;;;479      tmpreg |= GPIO_PinSource;
000010  4308              ORRS     r0,r0,r1
;;;480      AFIO->EVCR = tmpreg;
000012  6018              STR      r0,[r3,#0]
;;;481    }
000014  bd10              POP      {r4,pc}
;;;482    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;178      */
;;;179    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;180    {
;;;181      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;182      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;185      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;186      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;187      
;;;188    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;189      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000002  78ca              LDRB     r2,[r1,#3]
000004  2500              MOVS     r5,#0                 ;181
000006  f002030f          AND      r3,r2,#0xf
;;;190      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
00000a  06d2              LSLS     r2,r2,#27
00000c  d501              BPL      |L7.18|
;;;191      { 
;;;192        /* Check the parameters */
;;;193        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;194        /* Output mode */
;;;195        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00000e  788a              LDRB     r2,[r1,#2]
000010  4313              ORRS     r3,r3,r2
                  |L7.18|
;;;196      }
;;;197    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;198      /* Configure the eight low port pins */
;;;199      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000012  780c              LDRB     r4,[r1,#0]
;;;200      {
;;;201        tmpreg = GPIOx->CRL;
;;;202        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;203        {
;;;204          pos = ((uint32_t)0x01) << pinpos;
;;;205          /* Get the port pins position */
;;;206          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;207          if (currentpin == pos)
;;;208          {
;;;209            pos = pinpos << 2;
;;;210            /* Clear the corresponding low control register bits */
;;;211            pinmask = ((uint32_t)0x0F) << pos;
000014  f04f0e0f          MOV      lr,#0xf
000018  2201              MOVS     r2,#1                 ;204
00001a  b1ec              CBZ      r4,|L7.88|
00001c  f8d04000          LDR.W    r4,[r0,#0]            ;201
                  |L7.32|
000020  880f              LDRH     r7,[r1,#0]            ;206
000022  fa02f605          LSL      r6,r2,r5              ;204
000026  4037              ANDS     r7,r7,r6              ;206
000028  42b7              CMP      r7,r6                 ;207
00002a  d111              BNE      |L7.80|
00002c  ea4f0c85          LSL      r12,r5,#2             ;207
000030  fa0ef70c          LSL      r7,lr,r12
;;;212            tmpreg &= ~pinmask;
000034  ea240707          BIC      r7,r4,r7
;;;213            /* Write the mode configuration in the corresponding bits */
;;;214            tmpreg |= (currentmode << pos);
000038  fa03f40c          LSL      r4,r3,r12
00003c  433c              ORRS     r4,r4,r7
;;;215            /* Reset the corresponding ODR bit */
;;;216            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00003e  78cf              LDRB     r7,[r1,#3]
000040  2f28              CMP      r7,#0x28
000042  d002              BEQ      |L7.74|
;;;217            {
;;;218              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;219            }
;;;220            else
;;;221            {
;;;222              /* Set the corresponding ODR bit */
;;;223              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000044  2f48              CMP      r7,#0x48
000046  d002              BEQ      |L7.78|
000048  e002              B        |L7.80|
                  |L7.74|
00004a  6146              STR      r6,[r0,#0x14]         ;218
00004c  e000              B        |L7.80|
                  |L7.78|
;;;224              {
;;;225                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
00004e  6106              STR      r6,[r0,#0x10]
                  |L7.80|
000050  1c6d              ADDS     r5,r5,#1              ;202
000052  2d08              CMP      r5,#8                 ;202
000054  d3e4              BCC      |L7.32|
;;;226              }
;;;227            }
;;;228          }
;;;229        }
;;;230        GPIOx->CRL = tmpreg;
000056  6004              STR      r4,[r0,#0]
                  |L7.88|
;;;231      }
;;;232    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;233      /* Configure the eight high port pins */
;;;234      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000058  880c              LDRH     r4,[r1,#0]
00005a  2cff              CMP      r4,#0xff
00005c  d91e              BLS      |L7.156|
;;;235      {
;;;236        tmpreg = GPIOx->CRH;
00005e  6844              LDR      r4,[r0,#4]
;;;237        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000060  f05f0600          MOVS.W   r6,#0
                  |L7.100|
;;;238        {
;;;239          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000064  f1060708          ADD      r7,r6,#8
000068  fa02f507          LSL      r5,r2,r7
;;;240          /* Get the port pins position */
;;;241          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
00006c  880f              LDRH     r7,[r1,#0]
00006e  402f              ANDS     r7,r7,r5
;;;242          if (currentpin == pos)
000070  42af              CMP      r7,r5
000072  d10f              BNE      |L7.148|
000074  ea4f0c86          LSL      r12,r6,#2
;;;243          {
;;;244            pos = pinpos << 2;
;;;245            /* Clear the corresponding high control register bits */
;;;246            pinmask = ((uint32_t)0x0F) << pos;
000078  fa0ef70c          LSL      r7,lr,r12
;;;247            tmpreg &= ~pinmask;
00007c  43bc              BICS     r4,r4,r7
;;;248            /* Write the mode configuration in the corresponding bits */
;;;249            tmpreg |= (currentmode << pos);
00007e  fa03f70c          LSL      r7,r3,r12
000082  433c              ORRS     r4,r4,r7
;;;250            /* Reset the corresponding ODR bit */
;;;251            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000084  78cf              LDRB     r7,[r1,#3]
000086  2f28              CMP      r7,#0x28
000088  d100              BNE      |L7.140|
;;;252            {
;;;253              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
00008a  6145              STR      r5,[r0,#0x14]
                  |L7.140|
;;;254            }
;;;255            /* Set the corresponding ODR bit */
;;;256            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00008c  78cf              LDRB     r7,[r1,#3]
00008e  2f48              CMP      r7,#0x48
000090  d100              BNE      |L7.148|
;;;257            {
;;;258              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
000092  6105              STR      r5,[r0,#0x10]
                  |L7.148|
000094  1c76              ADDS     r6,r6,#1              ;237
000096  2e08              CMP      r6,#8                 ;237
000098  d3e4              BCC      |L7.100|
;;;259            }
;;;260          }
;;;261        }
;;;262        GPIOx->CRH = tmpreg;
00009a  6044              STR      r4,[r0,#4]
                  |L7.156|
;;;263      }
;;;264    }
00009c  bdf0              POP      {r4-r7,pc}
;;;265    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;437      */
;;;438    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;439    {
;;;440      uint32_t tmp = 0x00010000;
;;;441      
;;;442      /* Check the parameters */
;;;443      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;444      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;445      
;;;446      tmp |= GPIO_Pin;
;;;447      /* Set LCKK bit */
;;;448      GPIOx->LCKR = tmp;
000004  6182              STR      r2,[r0,#0x18]
;;;449      /* Reset LCKK bit */
;;;450      GPIOx->LCKR =  GPIO_Pin;
000006  6181              STR      r1,[r0,#0x18]
;;;451      /* Set LCKK bit */
;;;452      GPIOx->LCKR = tmp;
000008  6182              STR      r2,[r0,#0x18]
;;;453      /* Read LCKK bit*/
;;;454      tmp = GPIOx->LCKR;
00000a  6981              LDR      r1,[r0,#0x18]
;;;455      /* Read LCKK bit*/
;;;456      tmp = GPIOx->LCKR;
00000c  6980              LDR      r0,[r0,#0x18]
;;;457    }
00000e  4770              BX       lr
;;;458    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;554      */
;;;555    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;556    {
;;;557      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;558    
;;;559      /* Check the parameters */
;;;560      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;561      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;562      
;;;563      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;564      {
;;;565        tmpreg = AFIO->MAPR2;
000002  4c14              LDR      r4,|L9.84|
000004  2800              CMP      r0,#0                 ;563
000006  da01              BGE      |L9.12|
000008  69e3              LDR      r3,[r4,#0x1c]
00000a  e000              B        |L9.14|
                  |L9.12|
;;;566      }
;;;567      else
;;;568      {
;;;569        tmpreg = AFIO->MAPR;
00000c  6863              LDR      r3,[r4,#4]
                  |L9.14|
;;;570      }
;;;571    
;;;572      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;573      tmp = GPIO_Remap & LSB_MASK;
;;;574    
;;;575      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;576      {
;;;577        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;578        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;581      {
;;;582        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;583        tmpreg &= ~tmp1;
;;;584        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;585      }
;;;586      else
;;;587      {
;;;588        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00000e  0d42              LSRS     r2,r0,#21
000010  0112              LSLS     r2,r2,#4
000012  b285              UXTH     r5,r0                 ;573
000014  f3c05701          UBFX     r7,r0,#20,#2          ;575
000018  4095              LSLS     r5,r5,r2
00001a  f3c04603          UBFX     r6,r0,#16,#4          ;572
00001e  2f03              CMP      r7,#3                 ;575
000020  d005              BEQ      |L9.46|
000022  02c2              LSLS     r2,r0,#11             ;580
000024  d50a              BPL      |L9.60|
000026  2203              MOVS     r2,#3                 ;582
000028  40b2              LSLS     r2,r2,r6              ;582
00002a  4393              BICS     r3,r3,r2              ;583
00002c  e007              B        |L9.62|
                  |L9.46|
00002e  f0236270          BIC      r2,r3,#0xf000000      ;577
000032  6863              LDR      r3,[r4,#4]            ;578
000034  f0236370          BIC      r3,r3,#0xf000000      ;578
000038  6063              STR      r3,[r4,#4]            ;578
00003a  e002              B        |L9.66|
                  |L9.60|
00003c  43ab              BICS     r3,r3,r5
                  |L9.62|
00003e  f0436270          ORR      r2,r3,#0xf000000      ;584
                  |L9.66|
;;;589        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;590      }
;;;591    
;;;592      if (NewState != DISABLE)
000042  b101              CBZ      r1,|L9.70|
;;;593      {
;;;594        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000044  432a              ORRS     r2,r2,r5
                  |L9.70|
;;;595      }
;;;596    
;;;597      if((GPIO_Remap & 0x80000000) == 0x80000000)
000046  2800              CMP      r0,#0
000048  da01              BGE      |L9.78|
;;;598      {
;;;599        AFIO->MAPR2 = tmpreg;
00004a  61e2              STR      r2,[r4,#0x1c]
;;;600      }
;;;601      else
;;;602      {
;;;603        AFIO->MAPR = tmpreg;
;;;604      }  
;;;605    }
00004c  bdf0              POP      {r4-r7,pc}
                  |L9.78|
00004e  6062              STR      r2,[r4,#4]            ;603
000050  bdf0              POP      {r4-r7,pc}
;;;606    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;310      */
;;;311    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6880              LDR      r0,[r0,#8]
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;315      
;;;316      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;317    }
000004  4770              BX       lr
;;;318    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;286      */
;;;287    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;288    {
;;;289      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;290      
;;;291      /* Check the parameters */
;;;292      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;293      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;294      
;;;295      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6892              LDR      r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L11.12|
;;;296      {
;;;297        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;298      }
;;;299      else
;;;300      {
;;;301        bitstatus = (uint8_t)Bit_RESET;
;;;302      }
;;;303      return bitstatus;
;;;304    }
00000c  4770              BX       lr
;;;305    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;348      */
;;;349    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  68c0              LDR      r0,[r0,#0xc]
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353        
;;;354      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;355    }
000004  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;325      */
;;;326    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;327    {
;;;328      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;329      /* Check the parameters */
;;;330      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;331      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;332      
;;;333      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d2              LDR      r2,[r2,#0xc]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L13.12|
;;;334      {
;;;335        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;336      }
;;;337      else
;;;338      {
;;;339        bitstatus = (uint8_t)Bit_RESET;
;;;340      }
;;;341      return bitstatus;
;;;342    }
00000c  4770              BX       lr
;;;343    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;379      */
;;;380    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385      
;;;386      GPIOx->BRR = GPIO_Pin;
;;;387    }
000002  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;363      */
;;;364    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;365    {
;;;366      /* Check the parameters */
;;;367      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;368      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;369      
;;;370      GPIOx->BSRR = GPIO_Pin;
;;;371    }
000002  4770              BX       lr
;;;372    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;271      */
;;;272    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;273    {
;;;274      /* Reset GPIO init structure parameters values */
;;;275      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;276      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;277      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;278    }
00000e  4770              BX       lr
;;;279    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;422      */
;;;423    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;424    {
;;;425      /* Check the parameters */
;;;426      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;427      
;;;428      GPIOx->ODR = PortVal;
;;;429    }
000002  4770              BX       lr
;;;430    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;399      */
;;;400    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L18.6|
;;;401    {
;;;402      /* Check the parameters */
;;;403      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;404      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;405      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;406      
;;;407      if (BitVal != Bit_RESET)
;;;408      {
;;;409        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
;;;410      }
;;;411      else
;;;412      {
;;;413        GPIOx->BRR = GPIO_Pin;
;;;414      }
;;;415    }
000004  4770              BX       lr
                  |L18.6|
000006  6141              STR      r1,[r0,#0x14]         ;413
000008  4770              BX       lr
;;;416    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_gpio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH|
#line 144
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
