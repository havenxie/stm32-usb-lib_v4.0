; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\usb_core.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\usb_core.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\usb_core.crf ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_core.c]
                          THUMB

                          AREA ||i.DataStageIn||, CODE, READONLY, ALIGN=2

                  DataStageIn PROC
;;;499    *******************************************************************************/
;;;500    void DataStageIn(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;501    {
;;;502      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  f8df8094          LDR      r8,|L1.156|
;;;503      uint32_t save_wLength = pEPinfo->Usb_wLength;
;;;504      uint32_t ControlState = pInformation->ControlState;
;;;505    
;;;506      uint8_t *DataBuffer;
;;;507      uint32_t Length;
;;;508    
;;;509      if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
;;;510      {
;;;511        if(Data_Mul_MaxPacketSize == TRUE)
;;;512        {
;;;513          /* No more data to send and empty packet */
;;;514          Send0LengthData();
000008  4f25              LDR      r7,|L1.160|
00000a  f04f0930          MOV      r9,#0x30
00000e  f8d81000          LDR      r1,[r8,#0]            ;502  ; pInformation
000012  f1010510          ADD      r5,r1,#0x10           ;502
000016  8a08              LDRH     r0,[r1,#0x10]         ;503
000018  7a0e              LDRB     r6,[r1,#8]            ;504
00001a  b908              CBNZ     r0,|L1.32|
00001c  2e04              CMP      r6,#4                 ;509
00001e  d004              BEQ      |L1.42|
                  |L1.32|
;;;515          ControlState = LAST_IN_DATA;
;;;516          Data_Mul_MaxPacketSize = FALSE;
;;;517        }
;;;518        else 
;;;519        {
;;;520          /* No more data to send so STALL the TX Status*/
;;;521          ControlState = WAIT_STATUS_OUT;
;;;522          vSetEPTxStatus(EP_TX_STALL);
;;;523     
;;;524        }
;;;525        
;;;526        goto Expect_Status_Out;
;;;527      }
;;;528    
;;;529      Length = pEPinfo->PacketSize;
000020  88ac              LDRH     r4,[r5,#4]
;;;530      ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
000022  42a0              CMP      r0,r4
000024  d815              BHI      |L1.82|
000026  2604              MOVS     r6,#4
000028  e014              B        |L1.84|
                  |L1.42|
00002a  481e              LDR      r0,|L1.164|
00002c  7801              LDRB     r1,[r0,#0]            ;511  ; Data_Mul_MaxPacketSize
00002e  2901              CMP      r1,#1                 ;511
000030  d003              BEQ      |L1.58|
000032  2607              MOVS     r6,#7                 ;521
000034  2010              MOVS     r0,#0x10              ;522
000036  8038              STRH     r0,[r7,#0]            ;522
000038  e02b              B        |L1.146|
                  |L1.58|
00003a  4a1b              LDR      r2,|L1.168|
00003c  2100              MOVS     r1,#0                 ;514
00003e  6812              LDR      r2,[r2,#0]            ;514
000040  4b1a              LDR      r3,|L1.172|
000042  b292              UXTH     r2,r2                 ;514
000044  eb030242          ADD      r2,r3,r2,LSL #1       ;514
000048  6051              STR      r1,[r2,#4]            ;514
00004a  f8a79000          STRH     r9,[r7,#0]            ;514
00004e  7001              STRB     r1,[r0,#0]            ;516
000050  e01f              B        |L1.146|
                  |L1.82|
000052  2602              MOVS     r6,#2
                  |L1.84|
;;;531    
;;;532      if (Length > save_wLength)
000054  4284              CMP      r4,r0
000056  d900              BLS      |L1.90|
;;;533      {
;;;534        Length = save_wLength;
000058  4604              MOV      r4,r0
                  |L1.90|
;;;535      }
;;;536    
;;;537      DataBuffer = (*pEPinfo->CopyData)(Length);
00005a  68a9              LDR      r1,[r5,#8]
00005c  4620              MOV      r0,r4
00005e  4788              BLX      r1
000060  4682              MOV      r10,r0
;;;538      
;;;539      UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       GetEPTxAddr
000068  4601              MOV      r1,r0
00006a  4622              MOV      r2,r4
00006c  4650              MOV      r0,r10
00006e  f7fffffe          BL       UserToPMABufferCopy
;;;540    
;;;541      SetEPTxCount(ENDP0, Length);
000072  4621              MOV      r1,r4
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       SetEPTxCount
;;;542    
;;;543      pEPinfo->Usb_wLength -= Length;
00007a  8828              LDRH     r0,[r5,#0]
00007c  1b00              SUBS     r0,r0,r4
00007e  8028              STRH     r0,[r5,#0]
;;;544      pEPinfo->Usb_wOffset += Length;
000080  8868              LDRH     r0,[r5,#2]
000082  4420              ADD      r0,r0,r4
000084  8068              STRH     r0,[r5,#2]
;;;545      vSetEPTxStatus(EP_TX_VALID);
000086  f8a79000          STRH     r9,[r7,#0]
;;;546    
;;;547      USB_StatusOut();/* Expect the host to abort the data IN stage */
00008a  4909              LDR      r1,|L1.176|
00008c  f44f5040          MOV      r0,#0x3000
000090  8008              STRH     r0,[r1,#0]
                  |L1.146|
;;;548    
;;;549    Expect_Status_Out:
;;;550      pInformation->ControlState = ControlState;
000092  f8d80000          LDR      r0,[r8,#0]  ; pInformation
000096  7206              STRB     r6,[r0,#8]
;;;551    }
000098  e8bd87f0          POP      {r4-r10,pc}
;;;552    
                          ENDP

                  |L1.156|
                          DCD      pInformation
                  |L1.160|
                          DCD      SaveTState
                  |L1.164|
                          DCD      ||.data||
                  |L1.168|
                          DCD      0x40005c50
                  |L1.172|
                          DCD      0x40006000
                  |L1.176|
                          DCD      SaveRState

                          AREA ||i.DataStageOut||, CODE, READONLY, ALIGN=2

                  DataStageOut PROC
;;;442    *******************************************************************************/
;;;443    void DataStageOut(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;444    {
;;;445      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  4e22              LDR      r6,|L2.144|
;;;446      uint32_t save_rLength;
;;;447    
;;;448      save_rLength = pEPinfo->Usb_rLength;
;;;449    
;;;450      if (pEPinfo->CopyData && save_rLength)
;;;451      {
;;;452        uint8_t *Buffer;
;;;453        uint32_t Length;
;;;454    
;;;455        Length = pEPinfo->PacketSize;
;;;456        if (Length > save_rLength)
;;;457        {
;;;458          Length = save_rLength;
;;;459        }
;;;460    
;;;461        Buffer = (*pEPinfo->CopyData)(Length);
;;;462        pEPinfo->Usb_rLength -= Length;
;;;463        pEPinfo->Usb_rOffset += Length;
;;;464        PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
;;;465    
;;;466      }
;;;467    
;;;468      if (pEPinfo->Usb_rLength != 0)
;;;469      {
;;;470        vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
;;;471        SetEPTxCount(ENDP0, 0);
;;;472        vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
000006  f8df808c          LDR      r8,|L2.148|
00000a  2730              MOVS     r7,#0x30
00000c  6835              LDR      r5,[r6,#0]            ;448  ; pInformation
00000e  f8350f10          LDRH     r0,[r5,#0x10]!        ;448
000012  68a9              LDR      r1,[r5,#8]            ;444
000014  b1a9              CBZ      r1,|L2.66|
000016  b300              CBZ      r0,|L2.90|
000018  88ac              LDRH     r4,[r5,#4]            ;455
00001a  4284              CMP      r4,r0                 ;456
00001c  d900              BLS      |L2.32|
00001e  4604              MOV      r4,r0                 ;458
                  |L2.32|
000020  4620              MOV      r0,r4                 ;461
000022  4788              BLX      r1                    ;461
000024  4681              MOV      r9,r0                 ;461
000026  8828              LDRH     r0,[r5,#0]            ;462
000028  1b00              SUBS     r0,r0,r4              ;462
00002a  8028              STRH     r0,[r5,#0]            ;462
00002c  8868              LDRH     r0,[r5,#2]            ;463
00002e  4420              ADD      r0,r0,r4              ;463
000030  8068              STRH     r0,[r5,#2]            ;463
000032  2000              MOVS     r0,#0                 ;464
000034  f7fffffe          BL       GetEPRxAddr
000038  4601              MOV      r1,r0                 ;464
00003a  4622              MOV      r2,r4                 ;464
00003c  4648              MOV      r0,r9                 ;464
00003e  f7fffffe          BL       PMAToUserBufferCopy
                  |L2.66|
000042  8828              LDRH     r0,[r5,#0]            ;468
000044  b148              CBZ      r0,|L2.90|
000046  4914              LDR      r1,|L2.152|
000048  f44f5040          MOV      r0,#0x3000            ;470
00004c  8008              STRH     r0,[r1,#0]            ;470
00004e  2100              MOVS     r1,#0                 ;471
000050  4608              MOV      r0,r1                 ;471
000052  f7fffffe          BL       SetEPTxCount
000056  f8a87000          STRH     r7,[r8,#0]
                  |L2.90|
;;;473      }
;;;474      /* Set the next State*/
;;;475      if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
00005a  8828              LDRH     r0,[r5,#0]
00005c  88a9              LDRH     r1,[r5,#4]
00005e  4288              CMP      r0,r1
000060  d301              BCC      |L2.102|
;;;476      {
;;;477        pInformation->ControlState = OUT_DATA;
000062  2003              MOVS     r0,#3
000064  e001              B        |L2.106|
                  |L2.102|
;;;478      }
;;;479      else
;;;480      {
;;;481        if (pEPinfo->Usb_rLength > 0)
000066  b120              CBZ      r0,|L2.114|
;;;482        {
;;;483          pInformation->ControlState = LAST_OUT_DATA;
000068  2005              MOVS     r0,#5
                  |L2.106|
00006a  6831              LDR      r1,[r6,#0]            ;477  ; pInformation
00006c  7208              STRB     r0,[r1,#8]            ;477
                  |L2.110|
;;;484        }
;;;485        else if (pEPinfo->Usb_rLength == 0)
;;;486        {
;;;487          pInformation->ControlState = WAIT_STATUS_IN;
;;;488          USB_StatusIn();
;;;489        }
;;;490      }
;;;491    }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L2.114|
000072  6831              LDR      r1,[r6,#0]            ;487  ; pInformation
000074  2006              MOVS     r0,#6                 ;487
000076  7208              STRB     r0,[r1,#8]            ;487
000078  4908              LDR      r1,|L2.156|
00007a  2000              MOVS     r0,#0                 ;488
00007c  6809              LDR      r1,[r1,#0]            ;488
00007e  4a08              LDR      r2,|L2.160|
000080  b289              UXTH     r1,r1                 ;488
000082  eb020141          ADD      r1,r2,r1,LSL #1       ;488
000086  6048              STR      r0,[r1,#4]            ;488
000088  f8a87000          STRH     r7,[r8,#0]            ;488
00008c  e7ef              B        |L2.110|
;;;492    
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      pInformation
                  |L2.148|
                          DCD      SaveTState
                  |L2.152|
                          DCD      SaveRState
                  |L2.156|
                          DCD      0x40005c50
                  |L2.160|
                          DCD      0x40006000

                          AREA ||i.Data_Setup0||, CODE, READONLY, ALIGN=2

                  Data_Setup0 PROC
;;;682    *******************************************************************************/
;;;683    void Data_Setup0(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;684    {
;;;685      uint8_t *(*CopyRoutine)(uint16_t);
;;;686      RESULT Result;
;;;687      uint32_t Request_No = pInformation->USBbRequest;
000002  4c5c              LDR      r4,|L3.372|
;;;688    
;;;689      uint32_t Related_Endpoint, Reserved;
;;;690      uint32_t wOffset, Status;
;;;691    
;;;692    
;;;693    
;;;694      CopyRoutine = NULL;
;;;695      wOffset = 0;
;;;696    
;;;697      /*GET DESCRIPTOR*/
;;;698      if (Request_No == GET_DESCRIPTOR)
;;;699      {
;;;700        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;701        {
;;;702          uint8_t wValue1 = pInformation->USBwValue1;
;;;703          if (wValue1 == DEVICE_DESCRIPTOR)
;;;704          {
;;;705            CopyRoutine = pProperty->GetDeviceDescriptor;
000004  4d5c              LDR      r5,|L3.376|
;;;706          }
;;;707          else if (wValue1 == CONFIG_DESCRIPTOR)
;;;708          {
;;;709            CopyRoutine = pProperty->GetConfigDescriptor;
;;;710          }
;;;711          else if (wValue1 == STRING_DESCRIPTOR)
;;;712          {
;;;713            CopyRoutine = pProperty->GetStringDescriptor;
;;;714          }  /* End of GET_DESCRIPTOR */
;;;715        }
;;;716      }
;;;717    
;;;718      /*GET STATUS*/
;;;719      else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
;;;720               && (pInformation->USBwLength == 0x0002)
;;;721               && (pInformation->USBwIndex1 == 0))
;;;722      {
;;;723        /* GET STATUS for Device*/
;;;724        if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;725            && (pInformation->USBwIndex == 0))
;;;726        {
;;;727          CopyRoutine = Standard_GetStatus;
;;;728        }
;;;729    
;;;730        /* GET STATUS for Interface*/
;;;731        else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;732        {
;;;733          if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
;;;734              && (pInformation->Current_Configuration != 0))
;;;735          {
;;;736            CopyRoutine = Standard_GetStatus;
;;;737          }
;;;738        }
;;;739    
;;;740        /* GET STATUS for EndPoint*/
;;;741        else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;742        {
;;;743          Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
;;;744          Reserved = pInformation->USBwIndex0 & 0x70;
;;;745    
;;;746          if (ValBit(pInformation->USBwIndex0, 7))
;;;747          {
;;;748            /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;749            is Disabled*/
;;;750            Status = _GetEPTxStatus(Related_Endpoint);
;;;751          }
;;;752          else
;;;753          {
;;;754            Status = _GetEPRxStatus(Related_Endpoint);
;;;755          }
;;;756    
;;;757          if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
;;;758              && (Status != 0))
;;;759          {
;;;760            CopyRoutine = Standard_GetStatus;
;;;761          }
;;;762        }
;;;763    
;;;764      }
;;;765    
;;;766      /*GET CONFIGURATION*/
;;;767      else if (Request_No == GET_CONFIGURATION)
;;;768      {
;;;769        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;770        {
;;;771          CopyRoutine = Standard_GetConfiguration;
;;;772        }
;;;773      }
;;;774      /*GET INTERFACE*/
;;;775      else if (Request_No == GET_INTERFACE)
;;;776      {
;;;777        if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;778            && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
;;;779            && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
;;;780            && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
;;;781        {
;;;782          CopyRoutine = Standard_GetInterface;
;;;783        }
;;;784    
;;;785      }
;;;786      
;;;787      if (CopyRoutine)
;;;788      {
;;;789        pInformation->Ctrl_Info.Usb_wOffset = wOffset;
;;;790        pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;791        /* sb in the original the cast to word was directly */
;;;792        /* now the cast is made step by step */
;;;793        (*CopyRoutine)(0);
;;;794        Result = USB_SUCCESS;
;;;795      }
;;;796      else
;;;797      {
;;;798        Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
;;;799        if (Result == USB_NOT_READY)
;;;800        {
;;;801          pInformation->ControlState = PAUSE;
000006  2609              MOVS     r6,#9
000008  6820              LDR      r0,[r4,#0]            ;687  ; pInformation
00000a  2700              MOVS     r7,#0
00000c  6829              LDR      r1,[r5,#0]            ;698
00000e  7842              LDRB     r2,[r0,#1]            ;687
000010  2a06              CMP      r2,#6                 ;698
000012  d005              BEQ      |L3.32|
000014  b1aa              CBZ      r2,|L3.66|
000016  2a08              CMP      r2,#8                 ;767
000018  d04b              BEQ      |L3.178|
00001a  2a0a              CMP      r2,#0xa               ;775
00001c  d04e              BEQ      |L3.188|
00001e  e069              B        |L3.244|
                  |L3.32|
000020  7802              LDRB     r2,[r0,#0]            ;700
000022  0652              LSLS     r2,r2,#25             ;700
000024  d166              BNE      |L3.244|
000026  7880              LDRB     r0,[r0,#2]            ;702
000028  2801              CMP      r0,#1                 ;703
00002a  d004              BEQ      |L3.54|
00002c  2802              CMP      r0,#2                 ;707
00002e  d004              BEQ      |L3.58|
000030  2803              CMP      r0,#3                 ;711
000032  d004              BEQ      |L3.62|
000034  e05e              B        |L3.244|
                  |L3.54|
000036  69c9              LDR      r1,[r1,#0x1c]         ;705
000038  e054              B        |L3.228|
                  |L3.58|
00003a  6a09              LDR      r1,[r1,#0x20]         ;709
00003c  e052              B        |L3.228|
                  |L3.62|
00003e  6a49              LDR      r1,[r1,#0x24]         ;713
000040  e050              B        |L3.228|
                  |L3.66|
000042  8842              LDRH     r2,[r0,#2]            ;719
000044  bba2              CBNZ     r2,|L3.176|
000046  88c2              LDRH     r2,[r0,#6]            ;720
000048  2a02              CMP      r2,#2                 ;720
00004a  d153              BNE      |L3.244|
00004c  7902              LDRB     r2,[r0,#4]            ;721
00004e  bb7a              CBNZ     r2,|L3.176|
000050  7802              LDRB     r2,[r0,#0]            ;724
000052  0653              LSLS     r3,r2,#25             ;724
000054  d101              BNE      |L3.90|
000056  8883              LDRH     r3,[r0,#4]            ;725
000058  b133              CBZ      r3,|L3.104|
                  |L3.90|
00005a  f002027f          AND      r2,r2,#0x7f           ;731
00005e  2a01              CMP      r2,#1                 ;731
000060  d004              BEQ      |L3.108|
000062  2a02              CMP      r2,#2                 ;741
000064  d00c              BEQ      |L3.128|
000066  e045              B        |L3.244|
                  |L3.104|
000068  4944              LDR      r1,|L3.380|
00006a  e03b              B        |L3.228|
                  |L3.108|
00006c  698a              LDR      r2,[r1,#0x18]         ;733
00006e  7940              LDRB     r0,[r0,#5]            ;733
000070  2100              MOVS     r1,#0                 ;733
000072  4790              BLX      r2                    ;733
000074  b9e0              CBNZ     r0,|L3.176|
000076  6820              LDR      r0,[r4,#0]            ;734  ; pInformation
000078  7a80              LDRB     r0,[r0,#0xa]          ;734
00007a  2800              CMP      r0,#0                 ;734
00007c  d1f4              BNE      |L3.104|
00007e  e039              B        |L3.244|
                  |L3.128|
000080  7941              LDRB     r1,[r0,#5]            ;743
000082  f001000f          AND      r0,r1,#0xf            ;743
000086  f0010270          AND      r2,r1,#0x70           ;744
00008a  060b              LSLS     r3,r1,#24             ;746
00008c  493c              LDR      r1,|L3.384|
00008e  f8511020          LDR      r1,[r1,r0,LSL #2]     ;754
000092  d503              BPL      |L3.156|
000094  f3c11101          UBFX     r1,r1,#4,#2           ;750
000098  0109              LSLS     r1,r1,#4              ;750
00009a  e002              B        |L3.162|
                  |L3.156|
00009c  f3c13101          UBFX     r1,r1,#12,#2          ;754
0000a0  0309              LSLS     r1,r1,#12             ;754
                  |L3.162|
0000a2  4b38              LDR      r3,|L3.388|
0000a4  781b              LDRB     r3,[r3,#0]            ;757  ; Device_Table
0000a6  4283              CMP      r3,r0                 ;757
0000a8  d924              BLS      |L3.244|
0000aa  b90a              CBNZ     r2,|L3.176|
0000ac  2900              CMP      r1,#0                 ;758
0000ae  d1db              BNE      |L3.104|
                  |L3.176|
0000b0  e020              B        |L3.244|
                  |L3.178|
0000b2  7800              LDRB     r0,[r0,#0]            ;769
0000b4  0640              LSLS     r0,r0,#25             ;769
0000b6  d11d              BNE      |L3.244|
0000b8  4933              LDR      r1,|L3.392|
0000ba  e013              B        |L3.228|
                  |L3.188|
0000bc  7802              LDRB     r2,[r0,#0]            ;777
0000be  f002027f          AND      r2,r2,#0x7f           ;777
0000c2  2a01              CMP      r2,#1                 ;777
0000c4  d116              BNE      |L3.244|
0000c6  7a82              LDRB     r2,[r0,#0xa]          ;778
0000c8  b1a2              CBZ      r2,|L3.244|
0000ca  8842              LDRH     r2,[r0,#2]            ;778
0000cc  b992              CBNZ     r2,|L3.244|
0000ce  7902              LDRB     r2,[r0,#4]            ;779
0000d0  b982              CBNZ     r2,|L3.244|
0000d2  88c2              LDRH     r2,[r0,#6]            ;779
0000d4  2a01              CMP      r2,#1                 ;779
0000d6  d10d              BNE      |L3.244|
0000d8  698a              LDR      r2,[r1,#0x18]         ;780
0000da  7940              LDRB     r0,[r0,#5]            ;780
0000dc  2100              MOVS     r1,#0                 ;780
0000de  4790              BLX      r2                    ;780
0000e0  b940              CBNZ     r0,|L3.244|
0000e2  492a              LDR      r1,|L3.396|
                  |L3.228|
0000e4  b131              CBZ      r1,|L3.244|
0000e6  6820              LDR      r0,[r4,#0]            ;789  ; pInformation
0000e8  8247              STRH     r7,[r0,#0x12]         ;789
0000ea  6181              STR      r1,[r0,#0x18]         ;793
0000ec  2000              MOVS     r0,#0                 ;793
0000ee  4788              BLX      r1                    ;793
0000f0  2000              MOVS     r0,#0                 ;794
0000f2  e006              B        |L3.258|
                  |L3.244|
0000f4  6829              LDR      r1,[r5,#0]            ;798  ; pProperty
0000f6  6820              LDR      r0,[r4,#0]            ;798  ; pInformation
0000f8  6909              LDR      r1,[r1,#0x10]         ;798
0000fa  7840              LDRB     r0,[r0,#1]            ;798
0000fc  4788              BLX      r1                    ;798
0000fe  2803              CMP      r0,#3                 ;799
000100  d007              BEQ      |L3.274|
                  |L3.258|
;;;802          return;
;;;803        }
;;;804      }
;;;805    
;;;806      if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
000102  6821              LDR      r1,[r4,#0]  ; pInformation
000104  8a0a              LDRH     r2,[r1,#0x10]
000106  f5a2437f          SUB      r3,r2,#0xff00
00010a  3bff              SUBS     r3,r3,#0xff
00010c  d104              BNE      |L3.280|
;;;807      {
;;;808        /* Data is not ready, wait it */
;;;809        pInformation->ControlState = PAUSE;
00010e  720e              STRB     r6,[r1,#8]
;;;810        return;
;;;811      }
;;;812      if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
;;;813      {
;;;814        /* Unsupported request */
;;;815        pInformation->ControlState = STALLED;
;;;816        return;
;;;817      }
;;;818    
;;;819    
;;;820      if (ValBit(pInformation->USBbmRequestType, 7))
;;;821      {
;;;822        /* Device ==> Host */
;;;823        __IO uint32_t wLength = pInformation->USBwLength;
;;;824         
;;;825        /* Restrict the data length to be the one host asks for */
;;;826        if (pInformation->Ctrl_Info.Usb_wLength > wLength)
;;;827        {
;;;828          pInformation->Ctrl_Info.Usb_wLength = wLength;
;;;829        }
;;;830        
;;;831        else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
;;;832        {
;;;833          if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
;;;834          {
;;;835            Data_Mul_MaxPacketSize = FALSE;
;;;836          }
;;;837          else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
;;;838          {
;;;839            Data_Mul_MaxPacketSize = TRUE;
;;;840          }
;;;841        }   
;;;842    
;;;843        pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
;;;844        DataStageIn();
;;;845      }
;;;846      else
;;;847      {
;;;848        pInformation->ControlState = OUT_DATA;
;;;849        vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
;;;850      }
;;;851    
;;;852      return;
;;;853    }
000110  bdf8              POP      {r3-r7,pc}
                  |L3.274|
000112  6820              LDR      r0,[r4,#0]            ;801  ; pInformation
000114  7206              STRB     r6,[r0,#8]            ;801
000116  bdf8              POP      {r3-r7,pc}
                  |L3.280|
000118  2802              CMP      r0,#2                 ;812
00011a  d009              BEQ      |L3.304|
00011c  b142              CBZ      r2,|L3.304|
00011e  7808              LDRB     r0,[r1,#0]            ;820
000120  0600              LSLS     r0,r0,#24             ;820
000122  d521              BPL      |L3.360|
000124  88c8              LDRH     r0,[r1,#6]            ;823
000126  9000              STR      r0,[sp,#0]            ;826
000128  4282              CMP      r2,r0                 ;826
00012a  d905              BLS      |L3.312|
00012c  8208              STRH     r0,[r1,#0x10]         ;828
00012e  e013              B        |L3.344|
                  |L3.304|
000130  f04f0008          MOV      r0,#8                 ;815
000134  7208              STRB     r0,[r1,#8]            ;815
000136  bdf8              POP      {r3-r7,pc}
                  |L3.312|
000138  d20e              BCS      |L3.344|
00013a  6828              LDR      r0,[r5,#0]            ;833  ; pProperty
00013c  4b14              LDR      r3,|L3.400|
00013e  f890002c          LDRB     r0,[r0,#0x2c]         ;833
000142  4282              CMP      r2,r0                 ;833
000144  d201              BCS      |L3.330|
000146  701f              STRB     r7,[r3,#0]            ;835
000148  e006              B        |L3.344|
                  |L3.330|
00014a  fbb2f4f0          UDIV     r4,r2,r0              ;837
00014e  fb002014          MLS      r0,r0,r4,r2           ;837
000152  b908              CBNZ     r0,|L3.344|
000154  2001              MOVS     r0,#1                 ;839
000156  7018              STRB     r0,[r3,#0]            ;839
                  |L3.344|
000158  6828              LDR      r0,[r5,#0]            ;843  ; pProperty
00015a  f890002c          LDRB     r0,[r0,#0x2c]         ;843
00015e  8288              STRH     r0,[r1,#0x14]         ;843
000160  e8bd40f8          POP      {r3-r7,lr}            ;844
000164  f7ffbffe          B.W      DataStageIn
                  |L3.360|
000168  2003              MOVS     r0,#3                 ;848
00016a  7208              STRB     r0,[r1,#8]            ;848
00016c  4909              LDR      r1,|L3.404|
00016e  0300              LSLS     r0,r0,#12             ;849
000170  8008              STRH     r0,[r1,#0]            ;849
000172  bdf8              POP      {r3-r7,pc}
;;;854    
                          ENDP

                  |L3.372|
                          DCD      pInformation
                  |L3.376|
                          DCD      pProperty
                  |L3.380|
                          DCD      Standard_GetStatus
                  |L3.384|
                          DCD      0x40005c00
                  |L3.388|
                          DCD      Device_Table
                  |L3.392|
                          DCD      Standard_GetConfiguration
                  |L3.396|
                          DCD      Standard_GetInterface
                  |L3.400|
                          DCD      ||.data||
                  |L3.404|
                          DCD      SaveRState

                          AREA ||i.In0_Process||, CODE, READONLY, ALIGN=2

                  In0_Process PROC
;;;906    *******************************************************************************/
;;;907    uint8_t In0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;908    {
;;;909      uint32_t ControlState = pInformation->ControlState;
000002  4c13              LDR      r4,|L4.80|
000004  6820              LDR      r0,[r4,#0]  ; pInformation
000006  7a01              LDRB     r1,[r0,#8]
;;;910    
;;;911      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000008  2902              CMP      r1,#2
00000a  d004              BEQ      |L4.22|
00000c  2904              CMP      r1,#4
00000e  d002              BEQ      |L4.22|
;;;912      {
;;;913        DataStageIn();
;;;914        /* ControlState may be changed outside the function */
;;;915        ControlState = pInformation->ControlState;
;;;916      }
;;;917    
;;;918      else if (ControlState == WAIT_STATUS_IN)
000010  2906              CMP      r1,#6
000012  d005              BEQ      |L4.32|
000014  e015              B        |L4.66|
                  |L4.22|
000016  f7fffffe          BL       DataStageIn
00001a  6820              LDR      r0,[r4,#0]            ;915  ; pInformation
00001c  7a00              LDRB     r0,[r0,#8]            ;915
00001e  e011              B        |L4.68|
                  |L4.32|
;;;919      {
;;;920        if ((pInformation->USBbRequest == SET_ADDRESS) &&
000020  7841              LDRB     r1,[r0,#1]
000022  2905              CMP      r1,#5
000024  d109              BNE      |L4.58|
;;;921            (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
000026  7801              LDRB     r1,[r0,#0]
000028  0649              LSLS     r1,r1,#25
00002a  d106              BNE      |L4.58|
;;;922        {
;;;923          SetDeviceAddress(pInformation->USBwValue0);
00002c  78c0              LDRB     r0,[r0,#3]
00002e  f7fffffe          BL       SetDeviceAddress
;;;924          pUser_Standard_Requests->User_SetDeviceAddress();
000032  4808              LDR      r0,|L4.84|
000034  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000036  6a00              LDR      r0,[r0,#0x20]
000038  4780              BLX      r0
                  |L4.58|
;;;925        }
;;;926        (*pProperty->Process_Status_IN)();
00003a  4807              LDR      r0,|L4.88|
00003c  6800              LDR      r0,[r0,#0]  ; pProperty
00003e  6880              LDR      r0,[r0,#8]
000040  4780              BLX      r0
                  |L4.66|
;;;927        ControlState = STALLED;
;;;928      }
;;;929    
;;;930      else
;;;931      {
;;;932        ControlState = STALLED;
000042  2008              MOVS     r0,#8
                  |L4.68|
;;;933      }
;;;934    
;;;935      pInformation->ControlState = ControlState;
000044  6821              LDR      r1,[r4,#0]  ; pInformation
000046  7208              STRB     r0,[r1,#8]
;;;936    
;;;937      return Post0_Process();
000048  e8bd4010          POP      {r4,lr}
00004c  f7ffbffe          B.W      Post0_Process
;;;938    }
;;;939    
                          ENDP

                  |L4.80|
                          DCD      pInformation
                  |L4.84|
                          DCD      pUser_Standard_Requests
                  |L4.88|
                          DCD      pProperty

                          AREA ||i.NOP_Process||, CODE, READONLY, ALIGN=1

                  NOP_Process PROC
;;;1028   *******************************************************************************/
;;;1029   void NOP_Process(void)
000000  4770              BX       lr
;;;1030   {
;;;1031   }
;;;1032   
                          ENDP


                          AREA ||i.NoData_Setup0||, CODE, READONLY, ALIGN=2

                  NoData_Setup0 PROC
;;;559    *******************************************************************************/
;;;560    void NoData_Setup0(void)
000000  b570              PUSH     {r4-r6,lr}
;;;561    {
;;;562      RESULT Result = USB_UNSUPPORT;
;;;563      uint32_t RequestNo = pInformation->USBbRequest;
000002  4d2f              LDR      r5,|L6.192|
000004  6828              LDR      r0,[r5,#0]  ; pInformation
;;;564      uint32_t ControlState;
;;;565    
;;;566      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
000006  7801              LDRB     r1,[r0,#0]
000008  7844              LDRB     r4,[r0,#1]            ;563
00000a  064a              LSLS     r2,r1,#25
00000c  d006              BEQ      |L6.28|
;;;567      {
;;;568        /* Device Request*/
;;;569        /* SET_CONFIGURATION*/
;;;570        if (RequestNo == SET_CONFIGURATION)
;;;571        {
;;;572          Result = Standard_SetConfiguration();
;;;573        }
;;;574    
;;;575        /*SET ADDRESS*/
;;;576        else if (RequestNo == SET_ADDRESS)
;;;577        {
;;;578          if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
;;;579              || (pInformation->USBwIndex != 0)
;;;580              || (pInformation->Current_Configuration != 0))
;;;581            /* Device Address should be 127 or less*/
;;;582          {
;;;583            ControlState = STALLED;
;;;584            goto exit_NoData_Setup0;
;;;585          }
;;;586          else
;;;587          {
;;;588            Result = USB_SUCCESS;
;;;589          }
;;;590        }
;;;591        /*SET FEATURE for Device*/
;;;592        else if (RequestNo == SET_FEATURE)
;;;593        {
;;;594          if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
;;;595              && (pInformation->USBwIndex == 0))
;;;596          {
;;;597            Result = Standard_SetDeviceFeature();
;;;598          }
;;;599          else
;;;600          {
;;;601            Result = USB_UNSUPPORT;
;;;602          }
;;;603        }
;;;604        /*Clear FEATURE for Device */
;;;605        else if (RequestNo == CLEAR_FEATURE)
;;;606        {
;;;607          if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
;;;608              && pInformation->USBwIndex == 0
;;;609              && ValBit(pInformation->Current_Feature, 5))
;;;610          {
;;;611            Result = Standard_ClearFeature();
;;;612          }
;;;613          else
;;;614          {
;;;615            Result = USB_UNSUPPORT;
;;;616          }
;;;617        }
;;;618    
;;;619      }
;;;620    
;;;621      /* Interface Request*/
;;;622      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
00000e  f001007f          AND      r0,r1,#0x7f
000012  2801              CMP      r0,#1
000014  d028              BEQ      |L6.104|
;;;623      {
;;;624        /*SET INTERFACE*/
;;;625        if (RequestNo == SET_INTERFACE)
;;;626        {
;;;627          Result = Standard_SetInterface();
;;;628        }
;;;629      }
;;;630    
;;;631      /* EndPoint Request*/
;;;632      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
000016  2802              CMP      r0,#2
000018  d02b              BEQ      |L6.114|
00001a  e035              B        |L6.136|
                  |L6.28|
00001c  2c09              CMP      r4,#9                 ;570
00001e  d006              BEQ      |L6.46|
000020  2c05              CMP      r4,#5                 ;576
000022  d007              BEQ      |L6.52|
000024  2c03              CMP      r4,#3                 ;592
000026  d00e              BEQ      |L6.70|
000028  2c01              CMP      r4,#1                 ;605
00002a  d014              BEQ      |L6.86|
00002c  e02c              B        |L6.136|
                  |L6.46|
00002e  f7fffffe          BL       Standard_SetConfiguration
000032  e028              B        |L6.134|
                  |L6.52|
000034  78c1              LDRB     r1,[r0,#3]            ;578
000036  297f              CMP      r1,#0x7f              ;578
000038  d82e              BHI      |L6.152|
00003a  7881              LDRB     r1,[r0,#2]            ;578
00003c  bb61              CBNZ     r1,|L6.152|
00003e  8881              LDRH     r1,[r0,#4]            ;579
000040  bb51              CBNZ     r1,|L6.152|
000042  7a80              LDRB     r0,[r0,#0xa]          ;580
000044  e027              B        |L6.150|
                  |L6.70|
000046  78c1              LDRB     r1,[r0,#3]            ;594
000048  2901              CMP      r1,#1                 ;594
00004a  d11d              BNE      |L6.136|
00004c  8880              LDRH     r0,[r0,#4]            ;595
00004e  b9d8              CBNZ     r0,|L6.136|
000050  f7fffffe          BL       Standard_SetDeviceFeature
000054  e017              B        |L6.134|
                  |L6.86|
000056  78c1              LDRB     r1,[r0,#3]            ;607
000058  2901              CMP      r1,#1                 ;607
00005a  d115              BNE      |L6.136|
00005c  8881              LDRH     r1,[r0,#4]            ;608
00005e  b999              CBNZ     r1,|L6.136|
000060  7a40              LDRB     r0,[r0,#9]            ;609
000062  0680              LSLS     r0,r0,#26             ;609
000064  d40a              BMI      |L6.124|
000066  e00f              B        |L6.136|
                  |L6.104|
000068  2c0b              CMP      r4,#0xb               ;625
00006a  d10d              BNE      |L6.136|
00006c  f7fffffe          BL       Standard_SetInterface
000070  e009              B        |L6.134|
                  |L6.114|
;;;633      {
;;;634        /*CLEAR FEATURE for EndPoint*/
;;;635        if (RequestNo == CLEAR_FEATURE)
000072  2c01              CMP      r4,#1
000074  d002              BEQ      |L6.124|
;;;636        {
;;;637          Result = Standard_ClearFeature();
;;;638        }
;;;639        /* SET FEATURE for EndPoint*/
;;;640        else if (RequestNo == SET_FEATURE)
000076  2c03              CMP      r4,#3
000078  d003              BEQ      |L6.130|
00007a  e005              B        |L6.136|
                  |L6.124|
00007c  f7fffffe          BL       Standard_ClearFeature
000080  e001              B        |L6.134|
                  |L6.130|
;;;641        {
;;;642          Result = Standard_SetEndPointFeature();
000082  f7fffffe          BL       Standard_SetEndPointFeature
                  |L6.134|
;;;643        }
;;;644      }
;;;645      else
;;;646      {
;;;647        Result = USB_UNSUPPORT;
;;;648      }
;;;649    
;;;650    
;;;651      if (Result != USB_SUCCESS)
000086  b158              CBZ      r0,|L6.160|
                  |L6.136|
;;;652      {
;;;653        Result = (*pProperty->Class_NoData_Setup)(RequestNo);
000088  490e              LDR      r1,|L6.196|
00008a  4620              MOV      r0,r4
00008c  6809              LDR      r1,[r1,#0]  ; pProperty
00008e  6949              LDR      r1,[r1,#0x14]
000090  4788              BLX      r1
;;;654        if (Result == USB_NOT_READY)
000092  2803              CMP      r0,#3
000094  d002              BEQ      |L6.156|
                  |L6.150|
;;;655        {
;;;656          ControlState = PAUSE;
;;;657          goto exit_NoData_Setup0;
;;;658        }
;;;659      }
;;;660    
;;;661      if (Result != USB_SUCCESS)
000096  b118              CBZ      r0,|L6.160|
                  |L6.152|
;;;662      {
;;;663        ControlState = STALLED;
000098  2008              MOVS     r0,#8
;;;664        goto exit_NoData_Setup0;
00009a  e00d              B        |L6.184|
                  |L6.156|
00009c  2009              MOVS     r0,#9                 ;656
00009e  e00b              B        |L6.184|
                  |L6.160|
;;;665      }
;;;666    
;;;667      ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
;;;668    
;;;669      USB_StatusIn();
0000a0  4a09              LDR      r2,|L6.200|
0000a2  2006              MOVS     r0,#6                 ;667
0000a4  2100              MOVS     r1,#0
0000a6  6812              LDR      r2,[r2,#0]
0000a8  4b08              LDR      r3,|L6.204|
0000aa  b292              UXTH     r2,r2
0000ac  eb030242          ADD      r2,r3,r2,LSL #1
0000b0  6051              STR      r1,[r2,#4]
0000b2  4a07              LDR      r2,|L6.208|
0000b4  2130              MOVS     r1,#0x30
0000b6  8011              STRH     r1,[r2,#0]
                  |L6.184|
;;;670    
;;;671    exit_NoData_Setup0:
;;;672      pInformation->ControlState = ControlState;
0000b8  6829              LDR      r1,[r5,#0]  ; pInformation
0000ba  7208              STRB     r0,[r1,#8]
;;;673      return;
;;;674    }
0000bc  bd70              POP      {r4-r6,pc}
;;;675    
                          ENDP

0000be  0000              DCW      0x0000
                  |L6.192|
                          DCD      pInformation
                  |L6.196|
                          DCD      pProperty
                  |L6.200|
                          DCD      0x40005c50
                  |L6.204|
                          DCD      0x40006000
                  |L6.208|
                          DCD      SaveTState

                          AREA ||i.Out0_Process||, CODE, READONLY, ALIGN=2

                  Out0_Process PROC
;;;946    *******************************************************************************/
;;;947    uint8_t Out0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;948    {
;;;949      uint32_t ControlState = pInformation->ControlState;
000002  4c0f              LDR      r4,|L7.64|
000004  6820              LDR      r0,[r4,#0]  ; pInformation
000006  7a00              LDRB     r0,[r0,#8]
;;;950    
;;;951      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000008  2802              CMP      r0,#2
00000a  d011              BEQ      |L7.48|
00000c  2804              CMP      r0,#4
00000e  d00f              BEQ      |L7.48|
;;;952      {
;;;953        /* host aborts the transfer before finish */
;;;954        ControlState = STALLED;
;;;955      }
;;;956      else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L7.30|
000014  2805              CMP      r0,#5
000016  d002              BEQ      |L7.30|
;;;957      {
;;;958        DataStageOut();
;;;959        ControlState = pInformation->ControlState; /* may be changed outside the function */
;;;960      }
;;;961    
;;;962      else if (ControlState == WAIT_STATUS_OUT)
000018  2807              CMP      r0,#7
00001a  d005              BEQ      |L7.40|
00001c  e008              B        |L7.48|
                  |L7.30|
00001e  f7fffffe          BL       DataStageOut
000022  6820              LDR      r0,[r4,#0]            ;959  ; pInformation
000024  7a00              LDRB     r0,[r0,#8]            ;959
000026  e004              B        |L7.50|
                  |L7.40|
;;;963      {
;;;964        (*pProperty->Process_Status_OUT)();
000028  4806              LDR      r0,|L7.68|
00002a  6800              LDR      r0,[r0,#0]  ; pProperty
00002c  68c0              LDR      r0,[r0,#0xc]
00002e  4780              BLX      r0
                  |L7.48|
;;;965        ControlState = STALLED;
;;;966      }
;;;967    
;;;968    
;;;969      /* Unexpect state, STALL the endpoint */
;;;970      else
;;;971      {
;;;972        ControlState = STALLED;
000030  2008              MOVS     r0,#8
                  |L7.50|
;;;973      }
;;;974    
;;;975      pInformation->ControlState = ControlState;
000032  6821              LDR      r1,[r4,#0]  ; pInformation
000034  7208              STRB     r0,[r1,#8]
;;;976    
;;;977      return Post0_Process();
000036  e8bd4010          POP      {r4,lr}
00003a  f7ffbffe          B.W      Post0_Process
;;;978    }
;;;979    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      pInformation
                  |L7.68|
                          DCD      pProperty

                          AREA ||i.Post0_Process||, CODE, READONLY, ALIGN=2

                  Post0_Process PROC
;;;987    *******************************************************************************/
;;;988    uint8_t Post0_Process(void)
000000  480c              LDR      r0,|L8.52|
;;;989    {
000002  b510              PUSH     {r4,lr}
;;;990       
;;;991      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000004  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SetEPRxCount
;;;992    
;;;993      if (pInformation->ControlState == STALLED)
00000e  480a              LDR      r0,|L8.56|
000010  6800              LDR      r0,[r0,#0]  ; pInformation
000012  7a00              LDRB     r0,[r0,#8]
000014  2808              CMP      r0,#8
000016  d002              BEQ      |L8.30|
;;;994      {
;;;995        vSetEPRxStatus(EP_RX_STALL);
;;;996        vSetEPTxStatus(EP_TX_STALL);
;;;997      }
;;;998    
;;;999      return (pInformation->ControlState == PAUSE);
000018  2809              CMP      r0,#9
00001a  d009              BEQ      |L8.48|
00001c  e006              B        |L8.44|
                  |L8.30|
00001e  4907              LDR      r1,|L8.60|
000020  f44f5080          MOV      r0,#0x1000            ;995
000024  8008              STRH     r0,[r1,#0]            ;995
000026  4906              LDR      r1,|L8.64|
000028  2010              MOVS     r0,#0x10              ;996
00002a  8008              STRH     r0,[r1,#0]            ;996
                  |L8.44|
00002c  2000              MOVS     r0,#0
;;;1000   }
00002e  bd10              POP      {r4,pc}
                  |L8.48|
000030  2001              MOVS     r0,#1                 ;999
000032  bd10              POP      {r4,pc}
;;;1001   
                          ENDP

                  |L8.52|
                          DCD      Device_Property
                  |L8.56|
                          DCD      pInformation
                  |L8.60|
                          DCD      SaveRState
                  |L8.64|
                          DCD      SaveTState

                          AREA ||i.SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  SetDeviceAddress PROC
;;;1008   *******************************************************************************/
;;;1009   void SetDeviceAddress(uint8_t Val)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1010   {
;;;1011     uint32_t i;
;;;1012     uint32_t nEP = Device_Table.Total_Endpoint;
000002  490d              LDR      r1,|L9.56|
;;;1013   
;;;1014     /* set address in every used endpoint */
;;;1015     for (i = 0; i < nEP; i++)
;;;1016     {
;;;1017       _SetEPAddress((uint8_t)i, (uint8_t)i);
000004  4d0d              LDR      r5,|L9.60|
000006  f648778f          MOV      r7,#0x8f8f
00000a  780b              LDRB     r3,[r1,#0]            ;1012  ; Device_Table
00000c  2100              MOVS     r1,#0                 ;1015
00000e  f2480c80          MOV      r12,#0x8080
000012  e009              B        |L9.40|
                  |L9.20|
000014  b2ce              UXTB     r6,r1
000016  eb050486          ADD      r4,r5,r6,LSL #2
00001a  6822              LDR      r2,[r4,#0]
00001c  403a              ANDS     r2,r2,r7
00001e  4332              ORRS     r2,r2,r6
000020  ea42020c          ORR      r2,r2,r12
000024  6022              STR      r2,[r4,#0]
000026  1c49              ADDS     r1,r1,#1              ;1015
                  |L9.40|
000028  4299              CMP      r1,r3                 ;1015
00002a  d3f3              BCC      |L9.20|
;;;1018     } /* for */
;;;1019     _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
00002c  4903              LDR      r1,|L9.60|
00002e  f0400080          ORR      r0,r0,#0x80
000032  314c              ADDS     r1,r1,#0x4c
000034  6008              STR      r0,[r1,#0]
;;;1020   }
000036  bdf0              POP      {r4-r7,pc}
;;;1021   
                          ENDP

                  |L9.56|
                          DCD      Device_Table
                  |L9.60|
                          DCD      0x40005c00

                          AREA ||i.Setup0_Process||, CODE, READONLY, ALIGN=2

                  Setup0_Process PROC
;;;861    *******************************************************************************/
;;;862    uint8_t Setup0_Process(void)
000000  b570              PUSH     {r4-r6,lr}
;;;863    {
;;;864    
;;;865      union
;;;866      {
;;;867        uint8_t* b;
;;;868        uint16_t* w;
;;;869      } pBuf;
;;;870      uint16_t offset = 1;
;;;871      
;;;872      pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
000002  4816              LDR      r0,|L10.92|
000004  6800              LDR      r0,[r0,#0]
;;;873    
;;;874      if (pInformation->ControlState != PAUSE)
000006  4d17              LDR      r5,|L10.100|
000008  b281              UXTH     r1,r0                 ;872
00000a  4815              LDR      r0,|L10.96|
00000c  eb000141          ADD      r1,r0,r1,LSL #1       ;872
000010  8909              LDRH     r1,[r1,#8]            ;872
000012  b289              UXTH     r1,r1                 ;872
000014  eb000441          ADD      r4,r0,r1,LSL #1       ;872
000018  6828              LDR      r0,[r5,#0]  ; pInformation
00001a  7a01              LDRB     r1,[r0,#8]
00001c  2909              CMP      r1,#9
00001e  d00f              BEQ      |L10.64|
;;;875      {
;;;876        pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
000020  7821              LDRB     r1,[r4,#0]
000022  7001              STRB     r1,[r0,#0]
;;;877        pInformation->USBbRequest = *pBuf.b++; /* bRequest */
000024  7861              LDRB     r1,[r4,#1]
000026  7041              STRB     r1,[r0,#1]
;;;878        pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
;;;879        pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
000028  88a0              LDRH     r0,[r4,#4]
00002a  f7fffffe          BL       ByteSwap
00002e  6829              LDR      r1,[r5,#0]  ; pInformation
000030  8048              STRH     r0,[r1,#2]
;;;880        pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
;;;881        pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
000032  8920              LDRH     r0,[r4,#8]
000034  f7fffffe          BL       ByteSwap
000038  6829              LDR      r1,[r5,#0]  ; pInformation
00003a  8088              STRH     r0,[r1,#4]
;;;882        pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
;;;883        pInformation->USBwLength = *pBuf.w; /* wLength */
00003c  89a0              LDRH     r0,[r4,#0xc]
00003e  80c8              STRH     r0,[r1,#6]
                  |L10.64|
;;;884      }
;;;885    
;;;886      pInformation->ControlState = SETTING_UP;
000040  6828              LDR      r0,[r5,#0]  ; pInformation
000042  2101              MOVS     r1,#1
000044  7201              STRB     r1,[r0,#8]
;;;887      if (pInformation->USBwLength == 0)
000046  88c0              LDRH     r0,[r0,#6]
000048  b128              CBZ      r0,|L10.86|
;;;888      {
;;;889        /* Setup with no data stage */
;;;890        NoData_Setup0();
;;;891      }
;;;892      else
;;;893      {
;;;894        /* Setup with data stage */
;;;895        Data_Setup0();
00004a  f7fffffe          BL       Data_Setup0
                  |L10.78|
;;;896      }
;;;897      return Post0_Process();
00004e  e8bd4070          POP      {r4-r6,lr}
000052  f7ffbffe          B.W      Post0_Process
                  |L10.86|
000056  f7fffffe          BL       NoData_Setup0
00005a  e7f8              B        |L10.78|
;;;898    }
;;;899    
                          ENDP

                  |L10.92|
                          DCD      0x40005c50
                  |L10.96|
                          DCD      0x40006000
                  |L10.100|
                          DCD      pInformation

                          AREA ||i.Standard_ClearFeature||, CODE, READONLY, ALIGN=2

                  Standard_ClearFeature PROC
;;;252    *******************************************************************************/
;;;253    RESULT Standard_ClearFeature(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;254    {
;;;255      uint32_t     Type_Rec = Type_Recipient;
000004  4834              LDR      r0,|L11.216|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7801              LDRB     r1,[r0,#0]
00000a  f011017f          ANDS     r1,r1,#0x7f
00000e  d002              BEQ      |L11.22|
;;;256      uint32_t     Status;
;;;257    
;;;258    
;;;259      if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;260      {/*Device Clear Feature*/
;;;261        ClrBit(pInformation->Current_Feature, 5);
;;;262        return USB_SUCCESS;
;;;263      }
;;;264      else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
000010  2902              CMP      r1,#2
000012  d005              BEQ      |L11.32|
000014  e05d              B        |L11.210|
                  |L11.22|
000016  7a41              LDRB     r1,[r0,#9]            ;261
000018  f00101df          AND      r1,r1,#0xdf           ;261
00001c  7241              STRB     r1,[r0,#9]            ;261
00001e  e047              B        |L11.176|
                  |L11.32|
;;;265      {/*EndPoint Clear Feature*/
;;;266        DEVICE* pDev;
;;;267        uint32_t Related_Endpoint;
;;;268        uint32_t wIndex0;
;;;269        uint32_t rEP;
;;;270    
;;;271        if ((pInformation->USBwValue != ENDPOINT_STALL)
000020  8841              LDRH     r1,[r0,#2]
000022  2900              CMP      r1,#0
000024  d155              BNE      |L11.210|
;;;272            || (pInformation->USBwIndex1 != 0))
000026  7901              LDRB     r1,[r0,#4]
000028  bbf1              CBNZ     r1,|L11.168|
;;;273        {
;;;274          return USB_UNSUPPORT;
;;;275        }
;;;276    
;;;277        pDev = &Device_Table;
;;;278        wIndex0 = pInformation->USBwIndex0;
00002a  7941              LDRB     r1,[r0,#5]
;;;279        rEP = wIndex0 & ~0x80;
;;;280        Related_Endpoint = ENDP0 + rEP;
;;;281    
;;;282        if (ValBit(pInformation->USBwIndex0, 7))
;;;283        {
;;;284          /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;285          is Disabled*/
;;;286          Status = _GetEPTxStatus(Related_Endpoint);
00002c  4d2c              LDR      r5,|L11.224|
00002e  f0210480          BIC      r4,r1,#0x80           ;279
000032  060a              LSLS     r2,r1,#24             ;282
000034  4b29              LDR      r3,|L11.220|
;;;287        }
;;;288        else
;;;289        {
;;;290          Status = _GetEPRxStatus(Related_Endpoint);
000036  f8552024          LDR      r2,[r5,r4,LSL #2]
00003a  d503              BPL      |L11.68|
00003c  f3c21201          UBFX     r2,r2,#4,#2           ;286
000040  0112              LSLS     r2,r2,#4              ;286
000042  e002              B        |L11.74|
                  |L11.68|
000044  f3c23201          UBFX     r2,r2,#12,#2
000048  0312              LSLS     r2,r2,#12
                  |L11.74|
;;;291        }
;;;292    
;;;293        if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
00004a  781e              LDRB     r6,[r3,#0]
00004c  4623              MOV      r3,r4
00004e  42a6              CMP      r6,r4
000050  d93f              BLS      |L11.210|
000052  b34a              CBZ      r2,|L11.168|
;;;294            || (pInformation->Current_Configuration == 0))
000054  7a80              LDRB     r0,[r0,#0xa]
000056  b338              CBZ      r0,|L11.168|
;;;295        {
;;;296          return USB_UNSUPPORT;
;;;297        }
;;;298    
;;;299    
;;;300        if (wIndex0 & 0x80)
000058  0608              LSLS     r0,r1,#24
00005a  d50d              BPL      |L11.120|
;;;301        {
;;;302          /* IN endpoint */
;;;303          if (_GetTxStallStatus(Related_Endpoint ))
00005c  f8550024          LDR      r0,[r5,r4,LSL #2]
000060  f3c01001          UBFX     r0,r0,#4,#2
000064  2801              CMP      r0,#1
000066  d11d              BNE      |L11.164|
;;;304          {
;;;305            ClearDTOG_TX(Related_Endpoint);
000068  4618              MOV      r0,r3
00006a  f7fffffe          BL       ClearDTOG_TX
;;;306            SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
00006e  4620              MOV      r0,r4
000070  2130              MOVS     r1,#0x30
000072  f7fffffe          BL       SetEPTxStatus
000076  e015              B        |L11.164|
                  |L11.120|
;;;307          }
;;;308        }
;;;309        else
;;;310        {
;;;311          /* OUT endpoint */
;;;312          if (_GetRxStallStatus(Related_Endpoint))
000078  eb050684          ADD      r6,r5,r4,LSL #2
00007c  6830              LDR      r0,[r6,#0]
00007e  f3c03001          UBFX     r0,r0,#12,#2
000082  2801              CMP      r0,#1
000084  d10e              BNE      |L11.164|
;;;313          {
;;;314            if (Related_Endpoint == ENDP0)
;;;315            {
;;;316              /* After clear the STALL, enable the default endpoint receiver */
;;;317              SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
;;;318              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
000086  f64b778f          MOV      r7,#0xbf8f
00008a  f2480880          MOV      r8,#0x8080
00008e  b194              CBZ      r4,|L11.182|
;;;319            }
;;;320            else
;;;321            {
;;;322              ClearDTOG_RX(Related_Endpoint);
000090  4618              MOV      r0,r3
000092  f7fffffe          BL       ClearDTOG_RX
;;;323              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
000096  6830              LDR      r0,[r6,#0]
000098  4038              ANDS     r0,r0,r7
00009a  f4805040          EOR      r0,r0,#0x3000
00009e  ea400008          ORR      r0,r0,r8
0000a2  6030              STR      r0,[r6,#0]
                  |L11.164|
;;;324            }
;;;325          }
;;;326        }
;;;327        pUser_Standard_Requests->User_ClearFeature();
0000a4  480f              LDR      r0,|L11.228|
0000a6  e000              B        |L11.170|
                  |L11.168|
0000a8  e013              B        |L11.210|
                  |L11.170|
0000aa  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
0000ac  6940              LDR      r0,[r0,#0x14]
0000ae  4780              BLX      r0
                  |L11.176|
;;;328        return USB_SUCCESS;
0000b0  2000              MOVS     r0,#0
                  |L11.178|
;;;329      }
;;;330    
;;;331      return USB_UNSUPPORT;
;;;332    }
0000b2  e8bd81f0          POP      {r4-r8,pc}
                  |L11.182|
0000b6  480c              LDR      r0,|L11.232|
0000b8  f890102c          LDRB     r1,[r0,#0x2c]         ;317  ; Device_Property
0000bc  2000              MOVS     r0,#0                 ;317
0000be  f7fffffe          BL       SetEPRxCount
0000c2  6828              LDR      r0,[r5,#0]            ;318
0000c4  4038              ANDS     r0,r0,r7              ;318
0000c6  f4805040          EOR      r0,r0,#0x3000         ;318
0000ca  ea400008          ORR      r0,r0,r8              ;318
0000ce  6028              STR      r0,[r5,#0]            ;318
0000d0  e7e8              B        |L11.164|
                  |L11.210|
0000d2  2002              MOVS     r0,#2                 ;331
0000d4  e7ed              B        |L11.178|
;;;333    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L11.216|
                          DCD      pInformation
                  |L11.220|
                          DCD      Device_Table
                  |L11.224|
                          DCD      0x40005c00
                  |L11.228|
                          DCD      pUser_Standard_Requests
                  |L11.232|
                          DCD      Device_Property

                          AREA ||i.Standard_GetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_GetConfiguration PROC
;;;68     *******************************************************************************/
;;;69     uint8_t *Standard_GetConfiguration(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71       if (Length == 0)
;;;72       {
;;;73         pInformation->Ctrl_Info.Usb_wLength =
000002  4c07              LDR      r4,|L12.32|
000004  b130              CBZ      r0,|L12.20|
;;;74           sizeof(pInformation->Current_Configuration);
;;;75         return 0;
;;;76       }
;;;77       pUser_Standard_Requests->User_GetConfiguration();
000006  4807              LDR      r0,|L12.36|
000008  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
00000a  6800              LDR      r0,[r0,#0]
00000c  4780              BLX      r0
;;;78       return (uint8_t *)&pInformation->Current_Configuration;
00000e  6820              LDR      r0,[r4,#0]  ; pInformation
000010  300a              ADDS     r0,r0,#0xa
;;;79     }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  6821              LDR      r1,[r4,#0]            ;73  ; pInformation
000016  2001              MOVS     r0,#1                 ;73
000018  8208              STRH     r0,[r1,#0x10]         ;73
00001a  2000              MOVS     r0,#0                 ;75
00001c  bd10              POP      {r4,pc}
;;;80     
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      pInformation
                  |L12.36|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetDescriptorData||, CODE, READONLY, ALIGN=2

                  Standard_GetDescriptorData PROC
;;;421    *******************************************************************************/
;;;422    uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
000000  4a05              LDR      r2,|L13.24|
;;;423    {
;;;424      uint32_t  wOffset;
;;;425    
;;;426      wOffset = pInformation->Ctrl_Info.Usb_wOffset;
000002  6813              LDR      r3,[r2,#0]  ; pInformation
000004  8a5a              LDRH     r2,[r3,#0x12]
000006  b110              CBZ      r0,|L13.14|
;;;427      if (Length == 0)
;;;428      {
;;;429        pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
;;;430        return 0;
;;;431      }
;;;432    
;;;433      return pDesc->Descriptor + wOffset;
000008  6808              LDR      r0,[r1,#0]
00000a  4410              ADD      r0,r0,r2
;;;434    }
00000c  4770              BX       lr
                  |L13.14|
00000e  8888              LDRH     r0,[r1,#4]            ;429
000010  1a80              SUBS     r0,r0,r2              ;429
000012  8218              STRH     r0,[r3,#0x10]         ;429
000014  2000              MOVS     r0,#0                 ;430
000016  4770              BX       lr
;;;435    
                          ENDP

                  |L13.24|
                          DCD      pInformation

                          AREA ||i.Standard_GetInterface||, CODE, READONLY, ALIGN=2

                  Standard_GetInterface PROC
;;;114    *******************************************************************************/
;;;115    uint8_t *Standard_GetInterface(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117      if (Length == 0)
;;;118      {
;;;119        pInformation->Ctrl_Info.Usb_wLength =
000002  4c07              LDR      r4,|L14.32|
000004  b130              CBZ      r0,|L14.20|
;;;120          sizeof(pInformation->Current_AlternateSetting);
;;;121        return 0;
;;;122      }
;;;123      pUser_Standard_Requests->User_GetInterface();
000006  4807              LDR      r0,|L14.36|
000008  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
00000a  6880              LDR      r0,[r0,#8]
00000c  4780              BLX      r0
;;;124      return (uint8_t *)&pInformation->Current_AlternateSetting;
00000e  6820              LDR      r0,[r4,#0]  ; pInformation
000010  300c              ADDS     r0,r0,#0xc
;;;125    }
000012  bd10              POP      {r4,pc}
                  |L14.20|
000014  6821              LDR      r1,[r4,#0]            ;119  ; pInformation
000016  2001              MOVS     r0,#1                 ;119
000018  8208              STRH     r0,[r1,#0x10]         ;119
00001a  2000              MOVS     r0,#0                 ;121
00001c  bd10              POP      {r4,pc}
;;;126    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      pInformation
                  |L14.36|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetStatus||, CODE, READONLY, ALIGN=2

                  Standard_GetStatus PROC
;;;170    *******************************************************************************/
;;;171    uint8_t *Standard_GetStatus(uint16_t Length)
000000  491f              LDR      r1,|L15.128|
;;;172    {
000002  b510              PUSH     {r4,lr}
;;;173      if (Length == 0)
;;;174      {
;;;175        pInformation->Ctrl_Info.Usb_wLength = 2;
000004  6809              LDR      r1,[r1,#0]
000006  b160              CBZ      r0,|L15.34|
;;;176        return 0;
;;;177      }
;;;178    
;;;179      /* Reset Status Information */
;;;180      StatusInfo.w = 0;
000008  481e              LDR      r0,|L15.132|
00000a  2200              MOVS     r2,#0
00000c  8002              STRH     r2,[r0,#0]
;;;181    
;;;182      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00000e  780a              LDRB     r2,[r1,#0]
000010  0653              LSLS     r3,r2,#25
000012  d00a              BEQ      |L15.42|
;;;183      {
;;;184        /*Get Device Status */
;;;185        uint8_t Feature = pInformation->Current_Feature;
;;;186    
;;;187        /* Remote Wakeup enabled */
;;;188        if (ValBit(Feature, 5))
;;;189        {
;;;190          SetBit(StatusInfo0, 1);
;;;191        }
;;;192        else
;;;193        {
;;;194          ClrBit(StatusInfo0, 1);
;;;195        }      
;;;196    
;;;197        /* Bus-powered */
;;;198        if (ValBit(Feature, 6))
;;;199        {
;;;200          SetBit(StatusInfo0, 0);
;;;201        }
;;;202        else /* Self-powered */
;;;203        {
;;;204          ClrBit(StatusInfo0, 0);
;;;205        }
;;;206      }
;;;207      /*Interface Status*/
;;;208      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000014  f002027f          AND      r2,r2,#0x7f
000018  2a01              CMP      r2,#1
00001a  d016              BEQ      |L15.74|
;;;209      {
;;;210        return (uint8_t *)&StatusInfo;
;;;211      }
;;;212      /*Get EndPoint Status*/
;;;213      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
00001c  2a02              CMP      r2,#2
00001e  d016              BEQ      |L15.78|
000020  e001              B        |L15.38|
                  |L15.34|
000022  2002              MOVS     r0,#2                 ;175
000024  8208              STRH     r0,[r1,#0x10]         ;175
                  |L15.38|
;;;214      {
;;;215        uint8_t Related_Endpoint;
;;;216        uint8_t wIndex0 = pInformation->USBwIndex0;
;;;217    
;;;218        Related_Endpoint = (wIndex0 & 0x0f);
;;;219        if (ValBit(wIndex0, 7))
;;;220        {
;;;221          /* IN endpoint */
;;;222          if (_GetTxStallStatus(Related_Endpoint))
;;;223          {
;;;224            SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
;;;225          }
;;;226        }
;;;227        else
;;;228        {
;;;229          /* OUT endpoint */
;;;230          if (_GetRxStallStatus(Related_Endpoint))
;;;231          {
;;;232            SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
;;;233          }
;;;234        }
;;;235    
;;;236      }
;;;237      else
;;;238      {
;;;239        return NULL;
000026  2000              MOVS     r0,#0
;;;240      }
;;;241      pUser_Standard_Requests->User_GetStatus();
;;;242      return (uint8_t *)&StatusInfo;
;;;243    }
000028  bd10              POP      {r4,pc}
                  |L15.42|
00002a  7a49              LDRB     r1,[r1,#9]            ;185
00002c  068a              LSLS     r2,r1,#26             ;188
00002e  7802              LDRB     r2,[r0,#0]            ;194  ; StatusInfo
000030  d502              BPL      |L15.56|
000032  f0420202          ORR      r2,r2,#2              ;190
000036  e001              B        |L15.60|
                  |L15.56|
000038  f00202fd          AND      r2,r2,#0xfd           ;194
                  |L15.60|
00003c  0649              LSLS     r1,r1,#25             ;198
00003e  7002              STRB     r2,[r0,#0]            ;194
000040  b2d1              UXTB     r1,r2                 ;204
000042  d410              BMI      |L15.102|
000044  f00101fe          AND      r1,r1,#0xfe           ;204
000048  e00f              B        |L15.106|
                  |L15.74|
00004a  480e              LDR      r0,|L15.132|
00004c  bd10              POP      {r4,pc}
                  |L15.78|
00004e  794a              LDRB     r2,[r1,#5]            ;216
000050  f002010f          AND      r1,r2,#0xf            ;218
000054  0613              LSLS     r3,r2,#24             ;219
000056  4a0c              LDR      r2,|L15.136|
000058  f8521021          LDR      r1,[r2,r1,LSL #2]     ;230
00005c  d507              BPL      |L15.110|
00005e  f3c11101          UBFX     r1,r1,#4,#2           ;222
000062  e006              B        |L15.114|
                  |L15.100|
000064  7801              LDRB     r1,[r0,#0]            ;224  ; StatusInfo
                  |L15.102|
000066  f0410101          ORR      r1,r1,#1              ;224
                  |L15.106|
00006a  7001              STRB     r1,[r0,#0]            ;224
00006c  e003              B        |L15.118|
                  |L15.110|
00006e  f3c13101          UBFX     r1,r1,#12,#2          ;230
                  |L15.114|
000072  2901              CMP      r1,#1                 ;222
000074  d0f6              BEQ      |L15.100|
                  |L15.118|
000076  4805              LDR      r0,|L15.140|
000078  6800              LDR      r0,[r0,#0]            ;241  ; pUser_Standard_Requests
00007a  6900              LDR      r0,[r0,#0x10]         ;241
00007c  4780              BLX      r0                    ;241
00007e  e7e4              B        |L15.74|
;;;244    
                          ENDP

                  |L15.128|
                          DCD      pInformation
                  |L15.132|
                          DCD      ||.data||+0x2
                  |L15.136|
                          DCD      0x40005c00
                  |L15.140|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_SetConfiguration PROC
;;;89     *******************************************************************************/
;;;90     RESULT Standard_SetConfiguration(void)
000000  480a              LDR      r0,|L16.44|
;;;91     {
000002  b510              PUSH     {r4,lr}
;;;92     
;;;93       if ((pInformation->USBwValue0 <=
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  4a0a              LDR      r2,|L16.48|
000008  78c1              LDRB     r1,[r0,#3]
00000a  7852              LDRB     r2,[r2,#1]  ; Device_Table
00000c  4291              CMP      r1,r2
00000e  d803              BHI      |L16.24|
;;;94           Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
000010  7882              LDRB     r2,[r0,#2]
000012  b90a              CBNZ     r2,|L16.24|
;;;95           && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
000014  8882              LDRH     r2,[r0,#4]
000016  b10a              CBZ      r2,|L16.28|
                  |L16.24|
;;;96       {
;;;97         pInformation->Current_Configuration = pInformation->USBwValue0;
;;;98         pUser_Standard_Requests->User_SetConfiguration();
;;;99         return USB_SUCCESS;
;;;100      }
;;;101      else
;;;102      {
;;;103        return USB_UNSUPPORT;
000018  2002              MOVS     r0,#2
;;;104      }
;;;105    }
00001a  bd10              POP      {r4,pc}
                  |L16.28|
00001c  7281              STRB     r1,[r0,#0xa]          ;97
00001e  4805              LDR      r0,|L16.52|
000020  6800              LDR      r0,[r0,#0]            ;98  ; pUser_Standard_Requests
000022  6840              LDR      r0,[r0,#4]            ;98
000024  4780              BLX      r0                    ;98
000026  2000              MOVS     r0,#0                 ;99
000028  bd10              POP      {r4,pc}
;;;106    
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
                          DCD      pInformation
                  |L16.48|
                          DCD      Device_Table
                  |L16.52|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetDeviceFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetDeviceFeature PROC
;;;395    *******************************************************************************/
;;;396    RESULT Standard_SetDeviceFeature(void)
000000  4806              LDR      r0,|L17.28|
;;;397    {
000002  b510              PUSH     {r4,lr}
;;;398      SetBit(pInformation->Current_Feature, 5);
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a41              LDRB     r1,[r0,#9]
000008  f0410120          ORR      r1,r1,#0x20
00000c  7241              STRB     r1,[r0,#9]
;;;399      pUser_Standard_Requests->User_SetDeviceFeature();
00000e  4804              LDR      r0,|L17.32|
000010  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000012  69c0              LDR      r0,[r0,#0x1c]
000014  4780              BLX      r0
;;;400      return USB_SUCCESS;
000016  2000              MOVS     r0,#0
;;;401    }
000018  bd10              POP      {r4,pc}
;;;402    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      pInformation
                  |L17.32|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetEndPointFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetEndPointFeature PROC
;;;341    *******************************************************************************/
;;;342    RESULT Standard_SetEndPointFeature(void)
000000  b570              PUSH     {r4-r6,lr}
;;;343    {
;;;344      uint32_t    wIndex0;
;;;345      uint32_t    Related_Endpoint;
;;;346      uint32_t    rEP;
;;;347      uint32_t    Status;
;;;348    
;;;349      wIndex0 = pInformation->USBwIndex0;
000002  481b              LDR      r0,|L18.112|
000004  6803              LDR      r3,[r0,#0]  ; pInformation
;;;350      rEP = wIndex0 & ~0x80;
;;;351      Related_Endpoint = ENDP0 + rEP;
;;;352    
;;;353      if (ValBit(pInformation->USBwIndex0, 7))
;;;354      {
;;;355        /* get Status of endpoint & stall the request if the related_ENdpoint
;;;356        is Disabled*/
;;;357        Status = _GetEPTxStatus(Related_Endpoint);
000006  481b              LDR      r0,|L18.116|
000008  7959              LDRB     r1,[r3,#5]            ;349
00000a  f0210580          BIC      r5,r1,#0x80           ;350
00000e  eb000085          ADD      r0,r0,r5,LSL #2
000012  060c              LSLS     r4,r1,#24             ;353
;;;358      }
;;;359      else
;;;360      {
;;;361        Status = _GetEPRxStatus(Related_Endpoint);
000014  6804              LDR      r4,[r0,#0]
000016  f0210280          BIC      r2,r1,#0x80           ;350
00001a  d503              BPL      |L18.36|
00001c  f3c41401          UBFX     r4,r4,#4,#2           ;357
000020  0124              LSLS     r4,r4,#4              ;357
000022  e002              B        |L18.42|
                  |L18.36|
000024  f3c43401          UBFX     r4,r4,#12,#2
000028  0324              LSLS     r4,r4,#12
                  |L18.42|
;;;362      }
;;;363    
;;;364      if (Related_Endpoint >= Device_Table.Total_Endpoint
00002a  4d13              LDR      r5,|L18.120|
00002c  782d              LDRB     r5,[r5,#0]  ; Device_Table
00002e  4295              CMP      r5,r2
000030  d90f              BLS      |L18.82|
;;;365          || pInformation->USBwValue != 0 || Status == 0
000032  885a              LDRH     r2,[r3,#2]
000034  b96a              CBNZ     r2,|L18.82|
000036  b164              CBZ      r4,|L18.82|
;;;366          || pInformation->Current_Configuration == 0)
000038  7a9a              LDRB     r2,[r3,#0xa]
00003a  b152              CBZ      r2,|L18.82|
;;;367      {
;;;368        return USB_UNSUPPORT;
;;;369      }
;;;370      else
;;;371      {
;;;372        if (wIndex0 & 0x80)
00003c  0609              LSLS     r1,r1,#24
;;;373        {
;;;374          /* IN endpoint */
;;;375          _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
;;;376        }
;;;377    
;;;378        else
;;;379        {
;;;380          /* OUT endpoint */
;;;381          _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
00003e  6801              LDR      r1,[r0,#0]
000040  f2480280          MOV      r2,#0x8080            ;375
000044  d507              BPL      |L18.86|
000046  f64873bf          MOV      r3,#0x8fbf            ;375
00004a  4019              ANDS     r1,r1,r3              ;375
00004c  f0810110          EOR      r1,r1,#0x10           ;375
000050  e006              B        |L18.96|
                  |L18.82|
000052  2002              MOVS     r0,#2                 ;368
;;;382        }
;;;383      }
;;;384      pUser_Standard_Requests->User_SetEndPointFeature();
;;;385      return USB_SUCCESS;
;;;386    }
000054  bd70              POP      {r4-r6,pc}
                  |L18.86|
000056  f64b738f          MOV      r3,#0xbf8f            ;381
00005a  4019              ANDS     r1,r1,r3              ;381
00005c  f4815180          EOR      r1,r1,#0x1000         ;381
                  |L18.96|
000060  4311              ORRS     r1,r1,r2              ;375
000062  6001              STR      r1,[r0,#0]            ;375
000064  4805              LDR      r0,|L18.124|
000066  6800              LDR      r0,[r0,#0]            ;384  ; pUser_Standard_Requests
000068  6980              LDR      r0,[r0,#0x18]         ;384
00006a  4780              BLX      r0                    ;384
00006c  2000              MOVS     r0,#0                 ;385
00006e  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP

                  |L18.112|
                          DCD      pInformation
                  |L18.116|
                          DCD      0x40005c00
                  |L18.120|
                          DCD      Device_Table
                  |L18.124|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetInterface||, CODE, READONLY, ALIGN=2

                  Standard_SetInterface PROC
;;;135    *******************************************************************************/
;;;136    RESULT Standard_SetInterface(void)
000000  b510              PUSH     {r4,lr}
;;;137    {
;;;138      RESULT Re;
;;;139      /*Test if the specified Interface and Alternate Setting are supported by
;;;140        the application Firmware*/
;;;141      Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
000002  4c0e              LDR      r4,|L19.60|
000004  4a0e              LDR      r2,|L19.64|
000006  6820              LDR      r0,[r4,#0]  ; pInformation
000008  6812              LDR      r2,[r2,#0]  ; pProperty
00000a  78c1              LDRB     r1,[r0,#3]
00000c  6992              LDR      r2,[r2,#0x18]
00000e  7940              LDRB     r0,[r0,#5]
000010  4790              BLX      r2
;;;142    
;;;143      if (pInformation->Current_Configuration != 0)
000012  6821              LDR      r1,[r4,#0]  ; pInformation
000014  7a8a              LDRB     r2,[r1,#0xa]
000016  b122              CBZ      r2,|L19.34|
;;;144      {
;;;145        if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
000018  b918              CBNZ     r0,|L19.34|
00001a  7908              LDRB     r0,[r1,#4]
00001c  b908              CBNZ     r0,|L19.34|
;;;146            || (pInformation->USBwValue1 != 0))
00001e  7888              LDRB     r0,[r1,#2]
000020  b108              CBZ      r0,|L19.38|
                  |L19.34|
;;;147        {
;;;148          return  USB_UNSUPPORT;
;;;149        }
;;;150        else if (Re == USB_SUCCESS)
;;;151        {
;;;152          pUser_Standard_Requests->User_SetInterface();
;;;153          pInformation->Current_Interface = pInformation->USBwIndex0;
;;;154          pInformation->Current_AlternateSetting = pInformation->USBwValue0;
;;;155          return USB_SUCCESS;
;;;156        }
;;;157    
;;;158      }
;;;159    
;;;160      return USB_UNSUPPORT;
000022  2002              MOVS     r0,#2
;;;161    }
000024  bd10              POP      {r4,pc}
                  |L19.38|
000026  4807              LDR      r0,|L19.68|
000028  6800              LDR      r0,[r0,#0]            ;152  ; pUser_Standard_Requests
00002a  68c0              LDR      r0,[r0,#0xc]          ;152
00002c  4780              BLX      r0                    ;152
00002e  6820              LDR      r0,[r4,#0]            ;153  ; pInformation
000030  7941              LDRB     r1,[r0,#5]            ;153
000032  72c1              STRB     r1,[r0,#0xb]          ;153
000034  78c1              LDRB     r1,[r0,#3]            ;154
000036  7301              STRB     r1,[r0,#0xc]          ;154
000038  2000              MOVS     r0,#0                 ;155
00003a  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  |L19.60|
                          DCD      pInformation
                  |L19.64|
                          DCD      pProperty
                  |L19.68|
                          DCD      pUser_Standard_Requests

                          AREA ||.data||, DATA, ALIGN=1

                  Data_Mul_MaxPacketSize
000000  0000              DCB      0x00,0x00
                  StatusInfo
000002  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_core.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_core_c_0b05b142____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_core_c_0b05b142____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_core_c_0b05b142____REVSH|
#line 144
|__asm___10_usb_core_c_0b05b142____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
