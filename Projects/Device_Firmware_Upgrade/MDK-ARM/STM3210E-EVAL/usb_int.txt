; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\usb_int.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\usb_int.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\usb_int.crf ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c]
                          THUMB

                          AREA ||i.CTR_HP||, CODE, READONLY, ALIGN=2

                  CTR_HP PROC
;;;160    *******************************************************************************/
;;;161    void CTR_HP(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;162    {
;;;163      uint32_t wEPVal = 0;
;;;164    
;;;165      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;166      {
;;;167        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
000004  4d17              LDR      r5,|L1.100|
;;;168        /* extract highest priority endpoint number */
;;;169        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000006  4c16              LDR      r4,|L1.96|
;;;170        /* process related endpoint register */
;;;171        wEPVal = _GetENDPOINT(EPindex);
000008  4f16              LDR      r7,|L1.100|
00000a  3544              ADDS     r5,r5,#0x44           ;167
00000c  4e16              LDR      r6,|L1.104|
00000e  e021              B        |L1.84|
                  |L1.16|
000010  f64770ff          MOV      r0,#0x7fff            ;167
000014  6028              STR      r0,[r5,#0]            ;167
000016  8830              LDRH     r0,[r6,#0]            ;169  ; wIstr
000018  f000000f          AND      r0,r0,#0xf            ;169
00001c  7020              STRB     r0,[r4,#0]            ;169
00001e  eb070080          ADD      r0,r7,r0,LSL #2
000022  6801              LDR      r1,[r0,#0]
000024  b289              UXTH     r1,r1
;;;172        if ((wEPVal & EP_CTR_RX) != 0)
000026  040a              LSLS     r2,r1,#16
000028  d506              BPL      |L1.56|
;;;173        {
;;;174          /* clear int flag */
;;;175          _ClearEP_CTR_RX(EPindex);
00002a  6801              LDR      r1,[r0,#0]
00002c  f640728f          MOV      r2,#0xf8f
000030  4011              ANDS     r1,r1,r2
000032  6001              STR      r1,[r0,#0]
;;;176    
;;;177          /* call OUT service function */
;;;178          (*pEpInt_OUT[EPindex-1])();
000034  480d              LDR      r0,|L1.108|
000036  e007              B        |L1.72|
                  |L1.56|
;;;179    
;;;180        } /* if((wEPVal & EP_CTR_RX) */
;;;181        else if ((wEPVal & EP_CTR_TX) != 0)
000038  0609              LSLS     r1,r1,#24
00003a  d50b              BPL      |L1.84|
;;;182        {
;;;183          /* clear int flag */
;;;184          _ClearEP_CTR_TX(EPindex);
00003c  6801              LDR      r1,[r0,#0]
00003e  f648720f          MOV      r2,#0x8f0f
000042  4011              ANDS     r1,r1,r2
000044  6001              STR      r1,[r0,#0]
;;;185    
;;;186          /* call IN service function */
;;;187          (*pEpInt_IN[EPindex-1])();
000046  480a              LDR      r0,|L1.112|
                  |L1.72|
000048  7821              LDRB     r1,[r4,#0]  ; EPindex
00004a  eb000081          ADD      r0,r0,r1,LSL #2
00004e  f8500c04          LDR      r0,[r0,#-4]
000052  4780              BLX      r0
                  |L1.84|
000054  6828              LDR      r0,[r5,#0]            ;165
000056  8030              STRH     r0,[r6,#0]            ;165
000058  0400              LSLS     r0,r0,#16             ;165
00005a  d4d9              BMI      |L1.16|
;;;188    
;;;189    
;;;190        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;191    
;;;192      }/* while(...) */
;;;193    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;194    
                          ENDP

                  |L1.96|
                          DCD      EPindex
                  |L1.100|
                          DCD      0x40005c00
                  |L1.104|
                          DCD      wIstr
                  |L1.108|
                          DCD      pEpInt_OUT
                  |L1.112|
                          DCD      pEpInt_IN

                          AREA ||i.CTR_LP||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;52     *******************************************************************************/
;;;53     void CTR_LP(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;54     {
;;;55       __IO uint16_t wEPVal = 0;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;56       /* stay in loop while pending interrupts */
;;;57       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
00000a  f8dfa130          LDR      r10,|L2.316|
;;;58       {
;;;59         /* extract highest priority endpoint number */
;;;60         EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
;;;61         if (EPindex == 0)
;;;62         {
;;;63           /* Decode and service control endpoint interrupt */
;;;64           /* calling related service routine */
;;;65           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;66     
;;;67           /* save RX & TX status */
;;;68           /* and set both to NAK */
;;;69           
;;;70     	    SaveRState = _GetENDPOINT(ENDP0);
;;;71     	    SaveTState = SaveRState & EPTX_STAT;
;;;72     	    SaveRState &=  EPRX_STAT;	
;;;73     
;;;74     	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
00000e  f64b76bf          MOV      r6,#0xbfbf
000012  f2480780          MOV      r7,#0x8080
000016  4d48              LDR      r5,|L2.312|
;;;75     
;;;76           /* DIR bit = origin of the interrupt */
;;;77     
;;;78           if ((wIstr & ISTR_DIR) == 0)
;;;79           {
;;;80             /* DIR = 0 */
;;;81     
;;;82             /* DIR = 0      => IN  int */
;;;83             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;84     
;;;85             _ClearEP_CTR_TX(ENDP0);
;;;86             In0_Process();
;;;87     
;;;88                /* before terminate set Tx & Rx status */
;;;89     
;;;90                 _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;91     		  return;
;;;92           }
;;;93           else
;;;94           {
;;;95             /* DIR = 1 */
;;;96     
;;;97             /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;98             /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;99     
;;;100            wEPVal = _GetENDPOINT(ENDP0);
;;;101            
;;;102            if ((wEPVal &EP_SETUP) != 0)
;;;103            {
;;;104              _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
000018  f640788f          MOV      r8,#0xf8f
00001c  4c47              LDR      r4,|L2.316|
00001e  f6487b0f          MOV      r11,#0x8f0f           ;85
000022  f8df911c          LDR      r9,|L2.320|
000026  f10a0a44          ADD      r10,r10,#0x44         ;57
00002a  e02d              B        |L2.136|
                  |L2.44|
00002c  8801              LDRH     r1,[r0,#0]            ;60  ; wIstr
00002e  f011020f          ANDS     r2,r1,#0xf            ;60
000032  4944              LDR      r1,|L2.324|
000034  700a              STRB     r2,[r1,#0]            ;60
000036  d030              BEQ      |L2.154|
;;;105              Setup0_Process();
;;;106              /* before terminate set Tx & Rx status */
;;;107    
;;;108    		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;109              return;
;;;110            }
;;;111    
;;;112            else if ((wEPVal & EP_CTR_RX) != 0)
;;;113            {
;;;114              _ClearEP_CTR_RX(ENDP0);
;;;115              Out0_Process();
;;;116              /* before terminate set Tx & Rx status */
;;;117         
;;;118    		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;119              return;
;;;120            }
;;;121          }
;;;122        }/* if(EPindex == 0) */
;;;123        else
;;;124        {
;;;125          /* Decode and service non control endpoints interrupt  */
;;;126    
;;;127          /* process related endpoint register */
;;;128          wEPVal = _GetENDPOINT(EPindex);
000038  eb040082          ADD      r0,r4,r2,LSL #2
00003c  6801              LDR      r1,[r0,#0]
00003e  f8ad1000          STRH     r1,[sp,#0]
;;;129          if ((wEPVal & EP_CTR_RX) != 0)
000042  f8bd1000          LDRH     r1,[sp,#0]
000046  0409              LSLS     r1,r1,#16
000048  d50b              BPL      |L2.98|
;;;130          {
;;;131            /* clear int flag */
;;;132            _ClearEP_CTR_RX(EPindex);
00004a  493e              LDR      r1,|L2.324|
00004c  6802              LDR      r2,[r0,#0]
00004e  ea020208          AND      r2,r2,r8
000052  6002              STR      r2,[r0,#0]
;;;133    
;;;134            /* call OUT service function */
;;;135            (*pEpInt_OUT[EPindex-1])();
000054  4a3c              LDR      r2,|L2.328|
000056  7808              LDRB     r0,[r1,#0]  ; EPindex
000058  eb020080          ADD      r0,r2,r0,LSL #2
00005c  f8500c04          LDR      r0,[r0,#-4]
000060  4780              BLX      r0
                  |L2.98|
;;;136    
;;;137          } /* if((wEPVal & EP_CTR_RX) */
;;;138    
;;;139          if ((wEPVal & EP_CTR_TX) != 0)
000062  f8bd0000          LDRH     r0,[sp,#0]
000066  0600              LSLS     r0,r0,#24
000068  d50e              BPL      |L2.136|
;;;140          {
;;;141            /* clear int flag */
;;;142            _ClearEP_CTR_TX(EPindex);
00006a  4936              LDR      r1,|L2.324|
00006c  7808              LDRB     r0,[r1,#0]  ; EPindex
00006e  eb040280          ADD      r2,r4,r0,LSL #2
000072  6810              LDR      r0,[r2,#0]
000074  ea00000b          AND      r0,r0,r11
000078  6010              STR      r0,[r2,#0]
;;;143    
;;;144            /* call IN service function */
;;;145            (*pEpInt_IN[EPindex-1])();
00007a  4834              LDR      r0,|L2.332|
00007c  7809              LDRB     r1,[r1,#0]  ; EPindex
00007e  eb000081          ADD      r0,r0,r1,LSL #2
000082  f8500c04          LDR      r0,[r0,#-4]
000086  4780              BLX      r0
                  |L2.136|
000088  f8da1000          LDR      r1,[r10,#0]           ;57
00008c  4648              MOV      r0,r9                 ;57
00008e  f8a91000          STRH     r1,[r9,#0]            ;57
000092  0409              LSLS     r1,r1,#16             ;57
000094  d4ca              BMI      |L2.44|
                  |L2.150|
;;;146          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;147    
;;;148        }/* if(EPindex == 0) else */
;;;149    
;;;150      }/* while(...) */
;;;151    }
000096  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.154|
00009a  6821              LDR      r1,[r4,#0]            ;70
00009c  8029              STRH     r1,[r5,#0]            ;70
00009e  8829              LDRH     r1,[r5,#0]            ;71  ; SaveRState
0000a0  f0010130          AND      r1,r1,#0x30           ;71
0000a4  8069              STRH     r1,[r5,#2]            ;71
0000a6  8829              LDRH     r1,[r5,#0]            ;72  ; SaveRState
0000a8  f4015140          AND      r1,r1,#0x3000         ;72
0000ac  8029              STRH     r1,[r5,#0]            ;72
0000ae  6821              LDR      r1,[r4,#0]            ;74
0000b0  4031              ANDS     r1,r1,r6              ;74
0000b2  f4815100          EOR      r1,r1,#0x2000         ;74
0000b6  f0810120          EOR      r1,r1,#0x20           ;74
0000ba  4339              ORRS     r1,r1,r7              ;74
0000bc  6021              STR      r1,[r4,#0]            ;74
0000be  8800              LDRH     r0,[r0,#0]            ;78  ; wIstr
0000c0  06c0              LSLS     r0,r0,#27             ;78
0000c2  6820              LDR      r0,[r4,#0]            ;100
0000c4  d415              BMI      |L2.242|
0000c6  ea00000b          AND      r0,r0,r11             ;85
0000ca  6020              STR      r0,[r4,#0]            ;85
0000cc  f7fffffe          BL       In0_Process
0000d0  e026              B        |L2.288|
                  |L2.210|
0000d2  8829              LDRH     r1,[r5,#0]            ;90  ; SaveRState
0000d4  0489              LSLS     r1,r1,#18             ;90
0000d6  d501              BPL      |L2.220|
0000d8  f4805000          EOR      r0,r0,#0x2000         ;90
                  |L2.220|
0000dc  8869              LDRH     r1,[r5,#2]            ;118  ; SaveTState
0000de  06c9              LSLS     r1,r1,#27             ;118
0000e0  d426              BMI      |L2.304|
                  |L2.226|
0000e2  8869              LDRH     r1,[r5,#2]            ;90  ; SaveTState
0000e4  0689              LSLS     r1,r1,#26             ;90
0000e6  d501              BPL      |L2.236|
0000e8  f0800020          EOR      r0,r0,#0x20           ;90
                  |L2.236|
0000ec  4338              ORRS     r0,r0,r7              ;118
0000ee  6020              STR      r0,[r4,#0]            ;118
0000f0  e7d1              B        |L2.150|
                  |L2.242|
0000f2  f8ad0000          STRH     r0,[sp,#0]            ;100
0000f6  f8bd0000          LDRH     r0,[sp,#0]            ;102
0000fa  0500              LSLS     r0,r0,#20             ;102
0000fc  d506              BPL      |L2.268|
0000fe  6820              LDR      r0,[r4,#0]            ;104
000100  ea000008          AND      r0,r0,r8              ;104
000104  6020              STR      r0,[r4,#0]            ;104
000106  f7fffffe          BL       Setup0_Process
00010a  e009              B        |L2.288|
                  |L2.268|
00010c  f8bd0000          LDRH     r0,[sp,#0]            ;112
000110  0400              LSLS     r0,r0,#16             ;112
000112  d5b9              BPL      |L2.136|
000114  6820              LDR      r0,[r4,#0]            ;114
000116  ea000008          AND      r0,r0,r8              ;114
00011a  6020              STR      r0,[r4,#0]            ;114
00011c  f7fffffe          BL       Out0_Process
                  |L2.288|
000120  6820              LDR      r0,[r4,#0]            ;118
000122  8829              LDRH     r1,[r5,#0]            ;118  ; SaveRState
000124  4030              ANDS     r0,r0,r6              ;118
000126  04c9              LSLS     r1,r1,#19             ;118
000128  d5d3              BPL      |L2.210|
00012a  f4805080          EOR      r0,r0,#0x1000         ;118
00012e  e7d0              B        |L2.210|
                  |L2.304|
000130  f0800010          EOR      r0,r0,#0x10           ;118
000134  e7d5              B        |L2.226|
;;;152    
                          ENDP

000136  0000              DCW      0x0000
                  |L2.312|
                          DCD      ||.data||
                  |L2.316|
                          DCD      0x40005c00
                  |L2.320|
                          DCD      wIstr
                  |L2.324|
                          DCD      EPindex
                  |L2.328|
                          DCD      pEpInt_OUT
                  |L2.332|
                          DCD      pEpInt_IN

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_int.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_int_c_CTR_LP____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REVSH|
#line 144
|__asm___9_usb_int_c_CTR_LP____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
