; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\system_stm32f10x.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\system_stm32f10x.crf ..\src\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;833      */
;;;834    static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;835    {
;;;836      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;837      
;;;838      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;839      /* Enable HSE */    
;;;840      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4826              LDR      r0,|L1.160|
000006  9101              STR      r1,[sp,#4]            ;836
000008  9100              STR      r1,[sp,#0]
00000a  6802              LDR      r2,[r0,#0]
00000c  f4423280          ORR      r2,r2,#0x10000
000010  6002              STR      r2,[r0,#0]
;;;841     
;;;842      /* Wait till HSE is ready and if Time out is reached exit */
;;;843      do
;;;844      {
;;;845        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;846        StartUpCounter++;  
;;;847      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6802              LDR      r2,[r0,#0]            ;845
000018  f4023200          AND      r2,r2,#0x20000        ;845
00001c  9200              STR      r2,[sp,#0]            ;846
00001e  9a01              LDR      r2,[sp,#4]            ;846
000020  1c52              ADDS     r2,r2,#1              ;846
000022  9201              STR      r2,[sp,#4]
000024  9a00              LDR      r2,[sp,#0]
000026  b912              CBNZ     r2,|L1.46|
000028  9a01              LDR      r2,[sp,#4]
00002a  429a              CMP      r2,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;848    
;;;849      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6802              LDR      r2,[r0,#0]
000030  0392              LSLS     r2,r2,#14
000032  d533              BPL      |L1.156|
;;;850      {
;;;851        HSEStatus = (uint32_t)0x01;
000034  2101              MOVS     r1,#1
;;;852      }
;;;853      else
;;;854      {
;;;855        HSEStatus = (uint32_t)0x00;
;;;856      }  
;;;857    
;;;858      if (HSEStatus == (uint32_t)0x01)
;;;859      {
;;;860        /* Enable Prefetch Buffer */
;;;861        FLASH->ACR |= FLASH_ACR_PRFTBE;
000036  9100              STR      r1,[sp,#0]
000038  491a              LDR      r1,|L1.164|
00003a  680a              LDR      r2,[r1,#0]
00003c  f0420210          ORR      r2,r2,#0x10
000040  600a              STR      r2,[r1,#0]
;;;862    
;;;863        /* Flash 2 wait state */
;;;864        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000042  680a              LDR      r2,[r1,#0]
000044  f0220203          BIC      r2,r2,#3
000048  600a              STR      r2,[r1,#0]
;;;865        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
00004a  680a              LDR      r2,[r1,#0]
00004c  f0420202          ORR      r2,r2,#2
000050  600a              STR      r2,[r1,#0]
;;;866    
;;;867     
;;;868        /* HCLK = SYSCLK */
;;;869        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000052  6841              LDR      r1,[r0,#4]
000054  6041              STR      r1,[r0,#4]
;;;870          
;;;871        /* PCLK2 = HCLK */
;;;872        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000056  6841              LDR      r1,[r0,#4]
000058  6041              STR      r1,[r0,#4]
;;;873        
;;;874        /* PCLK1 = HCLK */
;;;875        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00005a  6841              LDR      r1,[r0,#4]
00005c  f4416180          ORR      r1,r1,#0x400
000060  6041              STR      r1,[r0,#4]
;;;876    
;;;877        /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;878        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000062  6841              LDR      r1,[r0,#4]
000064  f421117c          BIC      r1,r1,#0x3f0000
000068  6041              STR      r1,[r0,#4]
;;;879                                            RCC_CFGR_PLLMULL));
;;;880        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00006a  6841              LDR      r1,[r0,#4]
00006c  f44111e8          ORR      r1,r1,#0x1d0000
000070  6041              STR      r1,[r0,#4]
;;;881    
;;;882        /* Enable PLL */
;;;883        RCC->CR |= RCC_CR_PLLON;
000072  6801              LDR      r1,[r0,#0]
000074  f0417180          ORR      r1,r1,#0x1000000
000078  6001              STR      r1,[r0,#0]
                  |L1.122|
;;;884    
;;;885        /* Wait till PLL is ready */
;;;886        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00007a  6801              LDR      r1,[r0,#0]
00007c  0189              LSLS     r1,r1,#6
00007e  d5fc              BPL      |L1.122|
;;;887        {
;;;888        }
;;;889        
;;;890        /* Select PLL as system clock source */
;;;891        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000080  6841              LDR      r1,[r0,#4]
000082  f0210103          BIC      r1,r1,#3
000086  6041              STR      r1,[r0,#4]
;;;892        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
000088  6841              LDR      r1,[r0,#4]
00008a  f0410102          ORR      r1,r1,#2
00008e  6041              STR      r1,[r0,#4]
                  |L1.144|
;;;893    
;;;894        /* Wait till PLL is used as system clock source */
;;;895        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
000090  6841              LDR      r1,[r0,#4]
000092  f3c10181          UBFX     r1,r1,#2,#2
000096  2902              CMP      r1,#2
000098  d1fa              BNE      |L1.144|
;;;896        {
;;;897        }
;;;898      }
;;;899      else
;;;900      { /* If HSE fails to start-up, the application will have wrong clock 
;;;901             configuration. User can add here some code to deal with this error */
;;;902      }
;;;903    }
00009a  bd0c              POP      {r2,r3,pc}
                  |L1.156|
00009c  9100              STR      r1,[sp,#0]            ;855
00009e  bd0c              POP      {r2,r3,pc}
;;;904    #endif
                          ENDP

                  |L1.160|
                          DCD      0x40021000
                  |L1.164|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;299      */
;;;300    void SystemCoreClockUpdate (void)
000000  4915              LDR      r1,|L2.88|
;;;301    {
000002  b510              PUSH     {r4,lr}
;;;302      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;303    
;;;304    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;305      uint32_t prediv1factor = 0;
;;;306    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;307        
;;;308      /* Get SYSCLK source -------------------------------------------------------*/
;;;309      tmp = RCC->CFGR & RCC_CFGR_SWS;
000004  6848              LDR      r0,[r1,#4]
;;;310      
;;;311      switch (tmp)
;;;312      {
;;;313        case 0x00:  /* HSI used as system clock */
;;;314          SystemCoreClock = HSI_VALUE;
000006  4a15              LDR      r2,|L2.92|
000008  f010030c          ANDS     r3,r0,#0xc            ;309
00000c  4814              LDR      r0,|L2.96|
00000e  d003              BEQ      |L2.24|
000010  2b04              CMP      r3,#4                 ;311
000012  d001              BEQ      |L2.24|
000014  2b08              CMP      r3,#8                 ;311
000016  d00b              BEQ      |L2.48|
                  |L2.24|
;;;315          break;
;;;316        case 0x04:  /* HSE used as system clock */
;;;317          SystemCoreClock = HSE_VALUE;
;;;318          break;
;;;319        case 0x08:  /* PLL used as system clock */
;;;320    
;;;321          /* Get PLL clock source and multiplication factor ----------------------*/
;;;322          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
;;;323          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
;;;324               
;;;325          pllmull = ( pllmull >> 18) + 2;
;;;326          
;;;327          if (pllsource == 0x00)
;;;328          {
;;;329            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;330            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;331          }
;;;332          else
;;;333          {
;;;334     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;335           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;336           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;337           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;338     #else
;;;339            /* HSE selected as PLL clock entry */
;;;340            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
;;;341            {/* HSE oscillator clock divided by 2 */
;;;342              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
;;;343            }
;;;344            else
;;;345            {
;;;346              SystemCoreClock = HSE_VALUE * pllmull;
;;;347            }
;;;348     #endif
;;;349          }
;;;350    
;;;351          break;
;;;352    
;;;353        default:
;;;354          SystemCoreClock = HSI_VALUE;
;;;355          break;
;;;356      }
;;;357      
;;;358      /* Compute HCLK clock frequency ----------------*/
;;;359      /* Get HCLK prescaler */
;;;360      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000018  6002              STR      r2,[r0,#0]  ; SystemCoreClock
00001a  6849              LDR      r1,[r1,#4]
00001c  4a10              LDR      r2,|L2.96|
00001e  f3c11103          UBFX     r1,r1,#4,#4
000022  1d12              ADDS     r2,r2,#4
000024  5c51              LDRB     r1,[r2,r1]
;;;361      /* HCLK clock frequency */
;;;362      SystemCoreClock >>= tmp;  
000026  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000028  fa22f201          LSR      r2,r2,r1
00002c  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;363    }
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  684a              LDR      r2,[r1,#4]            ;322
000032  684b              LDR      r3,[r1,#4]            ;323
000034  f4021270          AND      r2,r2,#0x3c0000       ;322
000038  f04f0402          MOV      r4,#2                 ;325
00003c  f4133f80          TST      r3,#0x10000           ;323
000040  eb044292          ADD      r2,r4,r2,LSR #18      ;325
000044  d002              BEQ      |L2.76|
000046  684b              LDR      r3,[r1,#4]            ;340
000048  039b              LSLS     r3,r3,#14             ;340
00004a  d501              BPL      |L2.80|
                  |L2.76|
00004c  4b05              LDR      r3,|L2.100|
00004e  e000              B        |L2.82|
                  |L2.80|
000050  4b02              LDR      r3,|L2.92|
                  |L2.82|
000052  435a              MULS     r2,r3,r2              ;342
000054  e7e0              B        |L2.24|
;;;364    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40021000
                  |L2.92|
                          DCD      0x007a1200
                  |L2.96|
                          DCD      ||.data||
                  |L2.100|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;217      */
;;;218    void SystemInit (void)
000000  480f              LDR      r0,|L3.64|
;;;219    {
000002  b510              PUSH     {r4,lr}
;;;220      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;221      /* Set HSION bit */
;;;222      RCC->CR |= (uint32_t)0x00000001;
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;223    
;;;224      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;225    
;;;226      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  6841              LDR      r1,[r0,#4]
00000e  4a0d              LDR      r2,|L3.68|
000010  4011              ANDS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;227      
;;;228      /* Reset HSEON, CSSON and PLLON bits */
;;;229      RCC->CR &= (uint32_t)0xFEF6FFFF;
000014  6801              LDR      r1,[r0,#0]
000016  4a0c              LDR      r2,|L3.72|
000018  4011              ANDS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;230    
;;;231      /* Reset HSEBYP bit */
;;;232      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001c  6801              LDR      r1,[r0,#0]
00001e  f4212180          BIC      r1,r1,#0x40000
000022  6001              STR      r1,[r0,#0]
;;;233    
;;;234      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;235      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000024  6841              LDR      r1,[r0,#4]
000026  f42101fe          BIC      r1,r1,#0x7f0000
00002a  6041              STR      r1,[r0,#4]
;;;236    
;;;237    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;238      /* Disable all interrupts and clear pending bits  */
;;;239      RCC->CIR = 0x009F0000;
;;;240    
;;;241      /* Reset CFGR2 register */
;;;242      RCC->CFGR2 = 0x00000000;      
;;;243    #else
;;;244      /* Disable all interrupts and clear pending bits  */
;;;245      RCC->CIR = 0x009F0000;
00002c  f44f011f          MOV      r1,#0x9f0000
000030  6081              STR      r1,[r0,#8]
000032  f7fffffe          BL       SetSysClockTo72
;;;246    #endif /* STM32F10X_XX */
;;;247        
;;;248    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;249      #ifdef DATA_IN_ExtSRAM
;;;250        SystemInit_ExtMemCtl(); 
;;;251      #endif /* DATA_IN_ExtSRAM */
;;;252    #endif 
;;;253    
;;;254      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;255      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;256      SetSysClock();
;;;257    
;;;258    #ifdef VECT_TAB_SRAM
;;;259      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;260    #else
;;;261      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000036  4905              LDR      r1,|L3.76|
000038  f04f6000          MOV      r0,#0x8000000
00003c  6008              STR      r0,[r1,#0]
;;;262    #endif 
;;;263    }
00003e  bd10              POP      {r4,pc}
;;;264    
                          ENDP

                  |L3.64|
                          DCD      0x40021000
                  |L3.68|
                          DCD      0xf8ff0000
                  |L3.72|
                          DCD      0xfef6ffff
                  |L3.76|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f10x.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f10x_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f10x_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
