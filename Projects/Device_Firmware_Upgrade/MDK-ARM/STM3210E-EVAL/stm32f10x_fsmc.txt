; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\stm32f10x_fsmc.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\stm32f10x_fsmc.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=1

                  FSMC_ClearFlag PROC
;;;752      */
;;;753    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  f04f4220          MOV      r2,#0xa0000000
;;;754    {
;;;755     /* Check the parameters */
;;;756      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;757      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;758        
;;;759      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d007              BEQ      |L1.24|
;;;760      {
;;;761        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
;;;762      }  
;;;763      else if(FSMC_Bank == FSMC_Bank3_NAND)
000008  f5b07f80          CMP      r0,#0x100
00000c  d008              BEQ      |L1.32|
00000e  32a4              ADDS     r2,r2,#0xa4
                  |L1.16|
;;;764      {
;;;765        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
;;;766      }
;;;767      /* FSMC_Bank4_PCCARD*/
;;;768      else
;;;769      {
;;;770        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
000010  6810              LDR      r0,[r2,#0]
000012  4388              BICS     r0,r0,r1
000014  6010              STR      r0,[r2,#0]
;;;771      }
;;;772    }
000016  4770              BX       lr
                  |L1.24|
000018  6e50              LDR      r0,[r2,#0x64]         ;761
00001a  4388              BICS     r0,r0,r1              ;761
00001c  6650              STR      r0,[r2,#0x64]         ;761
00001e  4770              BX       lr
                  |L1.32|
000020  3284              ADDS     r2,r2,#0x84
000022  e7f5              B        |L1.16|
;;;773    
                          ENDP


                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  FSMC_ClearITPendingBit PROC
;;;838      */
;;;839    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  f04f4220          MOV      r2,#0xa0000000
;;;840    {
;;;841      /* Check the parameters */
;;;842      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;843      assert_param(IS_FSMC_IT(FSMC_IT));
;;;844        
;;;845      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d008              BEQ      |L2.26|
;;;846      {
;;;847        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
;;;848      }  
;;;849      else if(FSMC_Bank == FSMC_Bank3_NAND)
000008  f5b07f80          CMP      r0,#0x100
00000c  d00a              BEQ      |L2.36|
00000e  32a4              ADDS     r2,r2,#0xa4
                  |L2.16|
;;;850      {
;;;851        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
;;;852      }
;;;853      /* FSMC_Bank4_PCCARD*/
;;;854      else
;;;855      {
;;;856        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
000010  6810              LDR      r0,[r2,#0]
000012  ea2000d1          BIC      r0,r0,r1,LSR #3
000016  6010              STR      r0,[r2,#0]
;;;857      }
;;;858    }
000018  4770              BX       lr
                  |L2.26|
00001a  6e50              LDR      r0,[r2,#0x64]         ;847
00001c  ea2000d1          BIC      r0,r0,r1,LSR #3       ;847
000020  6650              STR      r0,[r2,#0x64]         ;847
000022  4770              BX       lr
                  |L2.36|
000024  3284              ADDS     r2,r2,#0x84
000026  e7f3              B        |L2.16|
;;;859    
                          ENDP


                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=1

                  FSMC_GetECC PROC
;;;608      */
;;;609    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000000  f04f4120          MOV      r1,#0xa0000000
;;;610    {
;;;611      uint32_t eccval = 0x00000000;
;;;612      
;;;613      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d002              BEQ      |L3.14|
;;;614      {
;;;615        /* Get the ECCR2 register value */
;;;616        eccval = FSMC_Bank2->ECCR2;
;;;617      }
;;;618      else
;;;619      {
;;;620        /* Get the ECCR3 register value */
;;;621        eccval = FSMC_Bank3->ECCR3;
000008  f8d10094          LDR      r0,[r1,#0x94]
;;;622      }
;;;623      /* Return the error correction code value */
;;;624      return(eccval);
;;;625    }
00000c  4770              BX       lr
                  |L3.14|
00000e  6f48              LDR      r0,[r1,#0x74]         ;616
000010  4770              BX       lr
;;;626    
                          ENDP


                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  FSMC_GetFlagStatus PROC
;;;702      */
;;;703    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  4603              MOV      r3,r0
;;;704    {
;;;705      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;706      uint32_t tmpsr = 0x00000000;
;;;707      
;;;708      /* Check the parameters */
;;;709      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;710      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;711      
;;;712      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;713      {
;;;714        tmpsr = FSMC_Bank2->SR2;
000004  f04f4220          MOV      r2,#0xa0000000
000008  2b10              CMP      r3,#0x10              ;712
00000a  d008              BEQ      |L4.30|
;;;715      }  
;;;716      else if(FSMC_Bank == FSMC_Bank3_NAND)
00000c  f5b37f80          CMP      r3,#0x100
000010  d007              BEQ      |L4.34|
;;;717      {
;;;718        tmpsr = FSMC_Bank3->SR3;
;;;719      }
;;;720      /* FSMC_Bank4_PCCARD*/
;;;721      else
;;;722      {
;;;723        tmpsr = FSMC_Bank4->SR4;
000012  f8d220a4          LDR      r2,[r2,#0xa4]
                  |L4.22|
;;;724      } 
;;;725      
;;;726      /* Get the flag status */
;;;727      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
000016  420a              TST      r2,r1
000018  d000              BEQ      |L4.28|
;;;728      {
;;;729        bitstatus = SET;
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;730      }
;;;731      else
;;;732      {
;;;733        bitstatus = RESET;
;;;734      }
;;;735      /* Return the flag status */
;;;736      return bitstatus;
;;;737    }
00001c  4770              BX       lr
                  |L4.30|
00001e  6e52              LDR      r2,[r2,#0x64]         ;714
000020  e7f9              B        |L4.22|
                  |L4.34|
000022  f8d22084          LDR      r2,[r2,#0x84]         ;718
000026  e7f6              B        |L4.22|
;;;738    
                          ENDP


                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=1

                  FSMC_GetITStatus PROC
;;;787      */
;;;788    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  4603              MOV      r3,r0
;;;789    {
;;;790      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;791      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
;;;792      
;;;793      /* Check the parameters */
;;;794      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;795      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;796      
;;;797      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;798      {
;;;799        tmpsr = FSMC_Bank2->SR2;
000004  f04f4220          MOV      r2,#0xa0000000
000008  2b10              CMP      r3,#0x10              ;797
00000a  d00c              BEQ      |L5.38|
;;;800      }  
;;;801      else if(FSMC_Bank == FSMC_Bank3_NAND)
00000c  f5b37f80          CMP      r3,#0x100
000010  d00b              BEQ      |L5.42|
;;;802      {
;;;803        tmpsr = FSMC_Bank3->SR3;
;;;804      }
;;;805      /* FSMC_Bank4_PCCARD*/
;;;806      else
;;;807      {
;;;808        tmpsr = FSMC_Bank4->SR4;
000012  f8d220a4          LDR      r2,[r2,#0xa4]
                  |L5.22|
;;;809      } 
;;;810      
;;;811      itstatus = tmpsr & FSMC_IT;
000016  420a              TST      r2,r1
;;;812      
;;;813      itenable = tmpsr & (FSMC_IT >> 3);
000018  ea0201d1          AND      r1,r2,r1,LSR #3
;;;814      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
00001c  d002              BEQ      |L5.36|
00001e  2900              CMP      r1,#0
000020  d000              BEQ      |L5.36|
;;;815      {
;;;816        bitstatus = SET;
000022  2001              MOVS     r0,#1
                  |L5.36|
;;;817      }
;;;818      else
;;;819      {
;;;820        bitstatus = RESET;
;;;821      }
;;;822      return bitstatus; 
;;;823    }
000024  4770              BX       lr
                  |L5.38|
000026  6e52              LDR      r2,[r2,#0x64]         ;799
000028  e7f5              B        |L5.22|
                  |L5.42|
00002a  f8d22084          LDR      r2,[r2,#0x84]         ;803
00002e  e7f2              B        |L5.22|
;;;824    
                          ENDP


                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=1

                  FSMC_ITConfig PROC
;;;642      */
;;;643    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;644    {
;;;645      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;646      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;647      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;648      
;;;649      if (NewState != DISABLE)
;;;650      {
;;;651        /* Enable the selected FSMC_Bank2 interrupts */
;;;652        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;653        {
;;;654          FSMC_Bank2->SR2 |= FSMC_IT;
;;;655        }
;;;656        /* Enable the selected FSMC_Bank3 interrupts */
;;;657        else if (FSMC_Bank == FSMC_Bank3_NAND)
000002  f44f7480          MOV      r4,#0x100
000006  f04f4320          MOV      r3,#0xa0000000        ;654
00000a  b16a              CBZ      r2,|L6.40|
00000c  2810              CMP      r0,#0x10              ;652
00000e  d003              BEQ      |L6.24|
000010  42a0              CMP      r0,r4
000012  d104              BNE      |L6.30|
000014  3384              ADDS     r3,r3,#0x84
;;;658        {
;;;659          FSMC_Bank3->SR3 |= FSMC_IT;
000016  e003              B        |L6.32|
                  |L6.24|
000018  6e58              LDR      r0,[r3,#0x64]         ;654
00001a  4308              ORRS     r0,r0,r1              ;654
00001c  e00c              B        |L6.56|
                  |L6.30|
00001e  33a4              ADDS     r3,r3,#0xa4           ;654
                  |L6.32|
;;;660        }
;;;661        /* Enable the selected FSMC_Bank4 interrupts */
;;;662        else
;;;663        {
;;;664          FSMC_Bank4->SR4 |= FSMC_IT;    
000020  6818              LDR      r0,[r3,#0]
000022  4308              ORRS     r0,r0,r1
                  |L6.36|
000024  6018              STR      r0,[r3,#0]
;;;665        }
;;;666      }
;;;667      else
;;;668      {
;;;669        /* Disable the selected FSMC_Bank2 interrupts */
;;;670        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;671        {
;;;672          
;;;673          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
;;;674        }
;;;675        /* Disable the selected FSMC_Bank3 interrupts */
;;;676        else if (FSMC_Bank == FSMC_Bank3_NAND)
;;;677        {
;;;678          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
;;;679        }
;;;680        /* Disable the selected FSMC_Bank4 interrupts */
;;;681        else
;;;682        {
;;;683          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
;;;684        }
;;;685      }
;;;686    }
000026  bd10              POP      {r4,pc}
                  |L6.40|
000028  2810              CMP      r0,#0x10              ;670
00002a  d003              BEQ      |L6.52|
00002c  42a0              CMP      r0,r4                 ;676
00002e  d105              BNE      |L6.60|
000030  3384              ADDS     r3,r3,#0x84           ;676
000032  e004              B        |L6.62|
                  |L6.52|
000034  6e58              LDR      r0,[r3,#0x64]         ;673
000036  4388              BICS     r0,r0,r1              ;673
                  |L6.56|
000038  6658              STR      r0,[r3,#0x64]         ;654
00003a  bd10              POP      {r4,pc}
                  |L6.60|
00003c  33a4              ADDS     r3,r3,#0xa4
                  |L6.62|
00003e  6818              LDR      r0,[r3,#0]            ;678
000040  4388              BICS     r0,r0,r1              ;678
000042  e7ef              B        |L6.36|
;;;687    
                          ENDP


                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;506      */
;;;507    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  f04f4220          MOV      r2,#0xa0000000
;;;508    {
000004  b151              CBZ      r1,|L7.28|
;;;509      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;510      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;511      
;;;512      if (NewState != DISABLE)
;;;513      {
;;;514        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;515        if(FSMC_Bank == FSMC_Bank2_NAND)
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L7.20|
;;;516        {
;;;517          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
;;;518        }
;;;519        else
;;;520        {
;;;521          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
00000a  f8520f80          LDR      r0,[r2,#0x80]!
00000e  f0400004          ORR      r0,r0,#4
000012  e009              B        |L7.40|
                  |L7.20|
000014  6e10              LDR      r0,[r2,#0x60]         ;517
000016  f0400004          ORR      r0,r0,#4              ;517
00001a  e009              B        |L7.48|
                  |L7.28|
;;;522        }
;;;523      }
;;;524      else
;;;525      {
;;;526        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;527        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;528        {
;;;529          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
00001c  4905              LDR      r1,|L7.52|
00001e  2810              CMP      r0,#0x10              ;527
000020  d004              BEQ      |L7.44|
;;;530        }
;;;531        else
;;;532        {
;;;533          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
000022  f8520f80          LDR      r0,[r2,#0x80]!
000026  4008              ANDS     r0,r0,r1
                  |L7.40|
000028  6010              STR      r0,[r2,#0]            ;521
;;;534        }
;;;535      }
;;;536    }
00002a  4770              BX       lr
                  |L7.44|
00002c  6e10              LDR      r0,[r2,#0x60]         ;529
00002e  4008              ANDS     r0,r0,r1              ;529
                  |L7.48|
000030  6610              STR      r0,[r2,#0x60]         ;517
000032  4770              BX       lr
;;;537    
                          ENDP

                  |L7.52|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDDeInit PROC
;;;134      */
;;;135    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137      /* Check the parameter */
;;;138      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;139      
;;;140      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;141      {
;;;142        /* Set the FSMC_Bank2 registers to their reset values */
;;;143        FSMC_Bank2->PCR2 = 0x00000018;
000002  2418              MOVS     r4,#0x18
;;;144        FSMC_Bank2->SR2 = 0x00000040;
000004  2340              MOVS     r3,#0x40
000006  f04f4120          MOV      r1,#0xa0000000        ;143
;;;145        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
00000a  f04f32fc          MOV      r2,#0xfcfcfcfc
00000e  2810              CMP      r0,#0x10              ;140
000010  d005              BEQ      |L8.30|
;;;146        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
;;;147      }
;;;148      /* FSMC_Bank3_NAND */  
;;;149      else
;;;150      {
;;;151        /* Set the FSMC_Bank3 registers to their reset values */
;;;152        FSMC_Bank3->PCR3 = 0x00000018;
000012  f8414f80          STR      r4,[r1,#0x80]!
;;;153        FSMC_Bank3->SR3 = 0x00000040;
000016  604b              STR      r3,[r1,#4]
;;;154        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
000018  608a              STR      r2,[r1,#8]
;;;155        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00001a  60ca              STR      r2,[r1,#0xc]
;;;156      }  
;;;157    }
00001c  bd10              POP      {r4,pc}
                  |L8.30|
00001e  660c              STR      r4,[r1,#0x60]         ;143
000020  664b              STR      r3,[r1,#0x64]         ;144
000022  668a              STR      r2,[r1,#0x68]         ;145
000024  66ca              STR      r2,[r1,#0x6c]         ;146
000026  bd10              POP      {r4,pc}
;;;158    
                          ENDP


                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;569      */
;;;570    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  f04f4220          MOV      r2,#0xa0000000
;;;571    {
000004  b151              CBZ      r1,|L9.28|
;;;572      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;573      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;574      
;;;575      if (NewState != DISABLE)
;;;576      {
;;;577        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;578        if(FSMC_Bank == FSMC_Bank2_NAND)
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L9.20|
;;;579        {
;;;580          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
;;;581        }
;;;582        else
;;;583        {
;;;584          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
00000a  f8520f80          LDR      r0,[r2,#0x80]!
00000e  f0400040          ORR      r0,r0,#0x40
000012  e009              B        |L9.40|
                  |L9.20|
000014  6e10              LDR      r0,[r2,#0x60]         ;580
000016  f0400040          ORR      r0,r0,#0x40           ;580
00001a  e009              B        |L9.48|
                  |L9.28|
;;;585        }
;;;586      }
;;;587      else
;;;588      {
;;;589        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;590        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;591        {
;;;592          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00001c  4905              LDR      r1,|L9.52|
00001e  2810              CMP      r0,#0x10              ;590
000020  d004              BEQ      |L9.44|
;;;593        }
;;;594        else
;;;595        {
;;;596          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
000022  f8520f80          LDR      r0,[r2,#0x80]!
000026  4008              ANDS     r0,r0,r1
                  |L9.40|
000028  6010              STR      r0,[r2,#0]            ;584
;;;597        }
;;;598      }
;;;599    }
00002a  4770              BX       lr
                  |L9.44|
00002c  6e10              LDR      r0,[r2,#0x60]         ;592
00002e  4008              ANDS     r0,r0,r1              ;592
                  |L9.48|
000030  6610              STR      r0,[r2,#0x60]         ;580
000032  4770              BX       lr
;;;600    
                          ENDP

                  |L9.52|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDInit PROC
;;;267      */
;;;268    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;269    {
000002  e9d01201          LDRD     r1,r2,[r0,#4]
;;;270      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
;;;271        
;;;272      /* Check the parameters */
;;;273      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;274      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;275      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;276      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;277      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;278      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;279      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;280      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;281      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;282      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;283      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;284      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;285      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;286      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;287      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;288      
;;;289      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;290      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000006  4311              ORRS     r1,r1,r2
000008  e9d02303          LDRD     r2,r3,[r0,#0xc]
00000c  431a              ORRS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  6942              LDR      r2,[r0,#0x14]
000012  ea412142          ORR      r1,r1,r2,LSL #9
000016  6982              LDR      r2,[r0,#0x18]
000018  ea413142          ORR      r1,r1,r2,LSL #13
;;;291                PCR_MemoryType_NAND |
;;;292                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;293                FSMC_NANDInitStruct->FSMC_ECC |
;;;294                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;295                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;296                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;297                
;;;298      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;299      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  f0410408          ORR      r4,r1,#8              ;290
000022  e9d21300          LDRD     r1,r3,[r2,#0]
000026  ea412103          ORR      r1,r1,r3,LSL #8
00002a  8913              LDRH     r3,[r2,#8]
00002c  7b12              LDRB     r2,[r2,#0xc]
00002e  041b              LSLS     r3,r3,#16
000030  ea436202          ORR      r2,r3,r2,LSL #24
;;;300                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;301                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;302                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;303                
;;;304      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;305      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000034  6a03              LDR      r3,[r0,#0x20]
000036  4311              ORRS     r1,r1,r2              ;299
000038  e9d32500          LDRD     r2,r5,[r3,#0]
00003c  ea422205          ORR      r2,r2,r5,LSL #8
000040  891d              LDRH     r5,[r3,#8]
000042  7b1b              LDRB     r3,[r3,#0xc]
000044  042d              LSLS     r5,r5,#16
000046  ea456303          ORR      r3,r5,r3,LSL #24
00004a  431a              ORRS     r2,r2,r3
;;;306                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;307                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;308                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;309      
;;;310      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
;;;311      {
;;;312        /* FSMC_Bank2_NAND registers configuration */
;;;313        FSMC_Bank2->PCR2 = tmppcr;
00004c  6803              LDR      r3,[r0,#0]
00004e  f04f4020          MOV      r0,#0xa0000000
000052  2b10              CMP      r3,#0x10              ;310
000054  d004              BEQ      |L10.96|
;;;314        FSMC_Bank2->PMEM2 = tmppmem;
;;;315        FSMC_Bank2->PATT2 = tmppatt;
;;;316      }
;;;317      else
;;;318      {
;;;319        /* FSMC_Bank3_NAND registers configuration */
;;;320        FSMC_Bank3->PCR3 = tmppcr;
000056  f8404f80          STR      r4,[r0,#0x80]!
;;;321        FSMC_Bank3->PMEM3 = tmppmem;
00005a  6081              STR      r1,[r0,#8]
;;;322        FSMC_Bank3->PATT3 = tmppatt;
00005c  60c2              STR      r2,[r0,#0xc]
;;;323      }
;;;324    }
00005e  bd30              POP      {r4,r5,pc}
                  |L10.96|
000060  6604              STR      r4,[r0,#0x60]         ;313
000062  6681              STR      r1,[r0,#0x68]         ;314
000064  66c2              STR      r2,[r0,#0x6c]         ;315
000066  bd30              POP      {r4,r5,pc}
;;;325    
                          ENDP


                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;423      */
;;;424    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;425    { 
;;;426      /* Reset NAND Init structure parameters values */
;;;427      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
;;;428      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
000004  2100              MOVS     r1,#0
;;;429      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000006  6041              STR      r1,[r0,#4]
;;;430      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
000008  6081              STR      r1,[r0,#8]
;;;431      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000a  60c1              STR      r1,[r0,#0xc]
;;;432      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
00000c  6101              STR      r1,[r0,#0x10]
;;;433      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
00000e  6141              STR      r1,[r0,#0x14]
;;;434      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000010  6181              STR      r1,[r0,#0x18]
000012  69c2              LDR      r2,[r0,#0x1c]
000014  21fc              MOVS     r1,#0xfc
;;;435      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000016  6011              STR      r1,[r2,#0]
000018  69c2              LDR      r2,[r0,#0x1c]
;;;436      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001a  6051              STR      r1,[r2,#4]
00001c  69c2              LDR      r2,[r0,#0x1c]
;;;437      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00001e  6091              STR      r1,[r2,#8]
000020  69c2              LDR      r2,[r0,#0x1c]
;;;438      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000022  60d1              STR      r1,[r2,#0xc]
000024  6a02              LDR      r2,[r0,#0x20]
;;;439      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000026  6011              STR      r1,[r2,#0]
000028  6a02              LDR      r2,[r0,#0x20]
;;;440      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002a  6051              STR      r1,[r2,#4]
00002c  6a02              LDR      r2,[r0,#0x20]
;;;441      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
00002e  6091              STR      r1,[r2,#8]
000030  6a00              LDR      r0,[r0,#0x20]
000032  60c1              STR      r1,[r0,#0xc]
;;;442    }
000034  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;480      */
;;;481    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  f04f4220          MOV      r2,#0xa0000000
;;;482    {
;;;483      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;484      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;485      
;;;486      if (NewState != DISABLE)
;;;487      {
;;;488        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;489        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000004  eb020080          ADD      r0,r2,r0,LSL #2
000008  2900              CMP      r1,#0                 ;486
;;;490      }
;;;491      else
;;;492      {
;;;493        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;494        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
00000a  6801              LDR      r1,[r0,#0]
00000c  d002              BEQ      |L12.20|
00000e  f0410101          ORR      r1,r1,#1              ;489
000012  e001              B        |L12.24|
                  |L12.20|
000014  4a01              LDR      r2,|L12.28|
000016  4011              ANDS     r1,r1,r2
                  |L12.24|
000018  6001              STR      r1,[r0,#0]            ;489
;;;495      }
;;;496    }
00001a  4770              BX       lr
;;;497    
                          ENDP

                  |L12.28|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMDeInit PROC
;;;107      */
;;;108    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  f04f4220          MOV      r2,#0xa0000000
;;;109    {
;;;110      /* Check the parameter */
;;;111      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;112      
;;;113      /* FSMC_Bank1_NORSRAM1 */
;;;114      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;115      {
;;;116        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
;;;117      }
;;;118      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;119      else
;;;120      {   
;;;121        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000004  eb020180          ADD      r1,r2,r0,LSL #2
000008  b140              CBZ      r0,|L13.28|
00000a  f24300d2          MOV      r0,#0x30d2
00000e  6008              STR      r0,[r1,#0]
                  |L13.16|
;;;122      }
;;;123      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
000010  f06f4070          MVN      r0,#0xf0000000
000014  6048              STR      r0,[r1,#4]
;;;124      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
000016  f8c10104          STR      r0,[r1,#0x104]
;;;125    }
00001a  4770              BX       lr
                  |L13.28|
00001c  f24300db          MOV      r0,#0x30db            ;116
000020  6010              STR      r0,[r2,#0]            ;116
000022  e7f5              B        |L13.16|
;;;126    
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;181      */
;;;182    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;183    { 
000002  e9d01201          LDRD     r1,r2,[r0,#4]
;;;184      /* Check the parameters */
;;;185      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;186      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;187      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;188      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;189      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;190      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;191      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;192      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;193      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;194      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;195      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;196      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;197      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;198      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;199      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;200      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;201      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;202      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;203      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;204      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;205      
;;;206      /* Bank1 NOR/SRAM control register configuration */ 
;;;207      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000006  4311              ORRS     r1,r1,r2
000008  e9d02303          LDRD     r2,r3,[r0,#0xc]
00000c  431a              ORRS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  6942              LDR      r2,[r0,#0x14]
000012  6803              LDR      r3,[r0,#0]
000014  4311              ORRS     r1,r1,r2
000016  6982              LDR      r2,[r0,#0x18]
000018  4311              ORRS     r1,r1,r2
00001a  69c2              LDR      r2,[r0,#0x1c]
00001c  4311              ORRS     r1,r1,r2
00001e  6a02              LDR      r2,[r0,#0x20]
000020  4311              ORRS     r1,r1,r2
000022  6a42              LDR      r2,[r0,#0x24]
000024  4311              ORRS     r1,r1,r2
000026  6a82              LDR      r2,[r0,#0x28]
000028  4311              ORRS     r1,r1,r2
00002a  6ac2              LDR      r2,[r0,#0x2c]
00002c  4311              ORRS     r1,r1,r2
00002e  6b02              LDR      r2,[r0,#0x30]
000030  4311              ORRS     r1,r1,r2
000032  f04f4220          MOV      r2,#0xa0000000
000036  f8421023          STR      r1,[r2,r3,LSL #2]
;;;208                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;209                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;210                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;211                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;212                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;213                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;214                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;215                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;216                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;217                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;218                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;219                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;220    
;;;221      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
00003a  6881              LDR      r1,[r0,#8]
00003c  2908              CMP      r1,#8
00003e  d106              BNE      |L14.78|
;;;222      {
;;;223        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
000040  6801              LDR      r1,[r0,#0]
000042  eb020181          ADD      r1,r2,r1,LSL #2
000046  680b              LDR      r3,[r1,#0]
000048  f0430340          ORR      r3,r3,#0x40
00004c  600b              STR      r3,[r1,#0]
                  |L14.78|
;;;224      }
;;;225      
;;;226      /* Bank1 NOR/SRAM timing register configuration */
;;;227      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
00004e  6b41              LDR      r1,[r0,#0x34]
000050  e9d13400          LDRD     r3,r4,[r1,#0]
000054  ea431304          ORR      r3,r3,r4,LSL #4
000058  688c              LDR      r4,[r1,#8]
00005a  898d              LDRH     r5,[r1,#0xc]
00005c  0224              LSLS     r4,r4,#8
00005e  ea444405          ORR      r4,r4,r5,LSL #16
000062  4323              ORRS     r3,r3,r4
000064  8a0c              LDRH     r4,[r1,#0x10]
000066  ea435304          ORR      r3,r3,r4,LSL #20
00006a  7d0c              LDRB     r4,[r1,#0x14]
00006c  6989              LDR      r1,[r1,#0x18]
00006e  ea436304          ORR      r3,r3,r4,LSL #24
000072  430b              ORRS     r3,r3,r1
000074  6801              LDR      r1,[r0,#0]
000076  eb020181          ADD      r1,r2,r1,LSL #2
00007a  604b              STR      r3,[r1,#4]
;;;228                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;229                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;230                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;231                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;232                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;233                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;234                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;235                
;;;236        
;;;237      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;238      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
00007c  6ac1              LDR      r1,[r0,#0x2c]
00007e  f5b14f80          CMP      r1,#0x4000
000082  d007              BEQ      |L14.148|
;;;239      {
;;;240        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;241        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;242        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;243        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;244        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;245        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;246        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
;;;247                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;248                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;249                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;250                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;251                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;252                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;253      }
;;;254      else
;;;255      {
;;;256        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
000084  6800              LDR      r0,[r0,#0]
000086  f06f4170          MVN      r1,#0xf0000000
00008a  eb020080          ADD      r0,r2,r0,LSL #2
00008e  f8c01104          STR      r1,[r0,#0x104]
;;;257      }
;;;258    }
000092  bd30              POP      {r4,r5,pc}
                  |L14.148|
000094  6b81              LDR      r1,[r0,#0x38]         ;246
000096  6800              LDR      r0,[r0,#0]            ;246
000098  e9d13400          LDRD     r3,r4,[r1,#0]         ;246
00009c  ea431304          ORR      r3,r3,r4,LSL #4       ;246
0000a0  688c              LDR      r4,[r1,#8]            ;246
0000a2  8a0d              LDRH     r5,[r1,#0x10]         ;246
0000a4  0224              LSLS     r4,r4,#8              ;246
0000a6  ea445405          ORR      r4,r4,r5,LSL #20      ;246
0000aa  4323              ORRS     r3,r3,r4              ;246
0000ac  7d0c              LDRB     r4,[r1,#0x14]         ;246
0000ae  6989              LDR      r1,[r1,#0x18]         ;246
0000b0  ea436304          ORR      r3,r3,r4,LSL #24      ;246
0000b4  eb020080          ADD      r0,r2,r0,LSL #2       ;246
0000b8  430b              ORRS     r3,r3,r1              ;246
0000ba  f8c03104          STR      r3,[r0,#0x104]        ;246
0000be  bd30              POP      {r4,r5,pc}
;;;259    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;385      */
;;;386    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b510              PUSH     {r4,lr}
;;;387    {  
;;;388      /* Reset NOR/SRAM Init structure parameters values */
;;;389      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  2100              MOVS     r1,#0
;;;390      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2202              MOVS     r2,#2
000006  e9c01200          STRD     r1,r2,[r0,#0]
;;;391      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;392      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000a  6081              STR      r1,[r0,#8]
;;;393      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000c  60c1              STR      r1,[r0,#0xc]
;;;394      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;396      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;397      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;398      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000014  02d2              LSLS     r2,r2,#11
000016  61c1              STR      r1,[r0,#0x1c]
000018  e9c01208          STRD     r1,r2,[r0,#0x20]
;;;399      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0052              LSLS     r2,r2,#1
00001e  e9c0210a          STRD     r2,r1,[r0,#0x28]
;;;400      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
;;;401      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
;;;402      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000022  6301              STR      r1,[r0,#0x30]
000024  6b43              LDR      r3,[r0,#0x34]
000026  220f              MOVS     r2,#0xf
;;;403      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000028  601a              STR      r2,[r3,#0]
00002a  6b43              LDR      r3,[r0,#0x34]
;;;404      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00002c  605a              STR      r2,[r3,#4]
00002e  6b44              LDR      r4,[r0,#0x34]
000030  23ff              MOVS     r3,#0xff
;;;405      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000032  60a3              STR      r3,[r4,#8]
000034  6b44              LDR      r4,[r0,#0x34]
;;;406      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
000036  60e2              STR      r2,[r4,#0xc]
000038  6b44              LDR      r4,[r0,#0x34]
;;;407      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
00003a  6122              STR      r2,[r4,#0x10]
00003c  6b44              LDR      r4,[r0,#0x34]
;;;408      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
00003e  6162              STR      r2,[r4,#0x14]
000040  6b44              LDR      r4,[r0,#0x34]
;;;409      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000042  61a1              STR      r1,[r4,#0x18]
000044  6b84              LDR      r4,[r0,#0x38]
;;;410      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000046  6022              STR      r2,[r4,#0]
000048  6b84              LDR      r4,[r0,#0x38]
;;;411      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00004a  6062              STR      r2,[r4,#4]
00004c  6b84              LDR      r4,[r0,#0x38]
;;;412      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00004e  60a3              STR      r3,[r4,#8]
000050  6b83              LDR      r3,[r0,#0x38]
;;;413      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000052  60da              STR      r2,[r3,#0xc]
000054  6b83              LDR      r3,[r0,#0x38]
;;;414      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000056  611a              STR      r2,[r3,#0x10]
000058  6b83              LDR      r3,[r0,#0x38]
;;;415      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00005a  615a              STR      r2,[r3,#0x14]
00005c  6b80              LDR      r0,[r0,#0x38]
00005e  6181              STR      r1,[r0,#0x18]
;;;416    }
000060  bd10              POP      {r4,pc}
;;;417    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;543      */
;;;544    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L16.24|
;;;545    {
;;;546      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;547      
;;;548      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;549      {
;;;550        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;551        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
;;;552      }
;;;553      else
;;;554      {
;;;555        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;556        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L16.14|
000008  f0400004          ORR      r0,r0,#4              ;551
00000c  e001              B        |L16.18|
                  |L16.14|
00000e  4a03              LDR      r2,|L16.28|
000010  4010              ANDS     r0,r0,r2
                  |L16.18|
000012  6008              STR      r0,[r1,#0]            ;551
;;;557      }
;;;558    }
000014  4770              BX       lr
;;;559    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0xa00000a0
                  |L16.28|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDDeInit PROC
;;;163      */
;;;164    void FSMC_PCCARDDeInit(void)
000000  4805              LDR      r0,|L17.24|
;;;165    {
;;;166      /* Set the FSMC_Bank4 registers to their reset values */
;;;167      FSMC_Bank4->PCR4 = 0x00000018; 
000002  2118              MOVS     r1,#0x18
000004  6001              STR      r1,[r0,#0]
;;;168      FSMC_Bank4->SR4 = 0x00000000;	
000006  2100              MOVS     r1,#0
000008  6041              STR      r1,[r0,#4]
;;;169      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000a  f04f31fc          MOV      r1,#0xfcfcfcfc
00000e  6081              STR      r1,[r0,#8]
;;;170      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000010  60c1              STR      r1,[r0,#0xc]
;;;171      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
000012  6101              STR      r1,[r0,#0x10]
;;;172    }
000014  4770              BX       lr
;;;173    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;333      */
;;;334    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  b510              PUSH     {r4,lr}
;;;335    {
000002  e9d01200          LDRD     r1,r2,[r0,#0]
;;;336      /* Check the parameters */
;;;337      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;338      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;339      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;340     
;;;341      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;342      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;343      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;344      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;345      
;;;346      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;347      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;348      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;349      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;350      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;351      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;352      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;353      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;354      
;;;355      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;356      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000006  ea412242          ORR      r2,r1,r2,LSL #9
00000a  6881              LDR      r1,[r0,#8]
00000c  2310              MOVS     r3,#0x10
00000e  ea433141          ORR      r1,r3,r1,LSL #13
000012  430a              ORRS     r2,r2,r1
000014  4913              LDR      r1,|L18.100|
000016  600a              STR      r2,[r1,#0]
;;;357                         FSMC_MemoryDataWidth_16b |  
;;;358                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;359                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;360                
;;;361      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;362      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000018  68c2              LDR      r2,[r0,#0xc]
00001a  e9d23400          LDRD     r3,r4,[r2,#0]
00001e  ea432304          ORR      r3,r3,r4,LSL #8
000022  8914              LDRH     r4,[r2,#8]
000024  7b12              LDRB     r2,[r2,#0xc]
000026  0424              LSLS     r4,r4,#16
000028  ea446202          ORR      r2,r4,r2,LSL #24
00002c  4313              ORRS     r3,r3,r2
00002e  608b              STR      r3,[r1,#8]
;;;363                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;364                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;365                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;366                
;;;367      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;368      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000030  6902              LDR      r2,[r0,#0x10]
000032  e9d23400          LDRD     r3,r4,[r2,#0]
000036  ea432304          ORR      r3,r3,r4,LSL #8
00003a  8914              LDRH     r4,[r2,#8]
00003c  7b12              LDRB     r2,[r2,#0xc]
00003e  0424              LSLS     r4,r4,#16
000040  ea446202          ORR      r2,r4,r2,LSL #24
000044  4313              ORRS     r3,r3,r2
000046  60cb              STR      r3,[r1,#0xc]
;;;369                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;370                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;371                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;372                
;;;373      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;374      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000048  6940              LDR      r0,[r0,#0x14]
00004a  e9d02300          LDRD     r2,r3,[r0,#0]
00004e  ea422203          ORR      r2,r2,r3,LSL #8
000052  8903              LDRH     r3,[r0,#8]
000054  7b00              LDRB     r0,[r0,#0xc]
000056  041b              LSLS     r3,r3,#16
000058  ea436000          ORR      r0,r3,r0,LSL #24
00005c  4302              ORRS     r2,r2,r0
00005e  610a              STR      r2,[r1,#0x10]
;;;375                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;376                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;377                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;378    }
000060  bd10              POP      {r4,pc}
;;;379    
                          ENDP

000062  0000              DCW      0x0000
                  |L18.100|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;449      */
;;;450    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;451    {
;;;452      /* Reset PCCARD Init structure parameters values */
;;;453      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
;;;454      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000002  6001              STR      r1,[r0,#0]
;;;455      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000004  6041              STR      r1,[r0,#4]
;;;456      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000006  6081              STR      r1,[r0,#8]
000008  68c2              LDR      r2,[r0,#0xc]
00000a  21fc              MOVS     r1,#0xfc
;;;457      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00000c  6011              STR      r1,[r2,#0]
00000e  68c2              LDR      r2,[r0,#0xc]
;;;458      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000010  6051              STR      r1,[r2,#4]
000012  68c2              LDR      r2,[r0,#0xc]
;;;459      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000014  6091              STR      r1,[r2,#8]
000016  68c2              LDR      r2,[r0,#0xc]
;;;460      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000018  60d1              STR      r1,[r2,#0xc]
00001a  6902              LDR      r2,[r0,#0x10]
;;;461      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001c  6011              STR      r1,[r2,#0]
00001e  6902              LDR      r2,[r0,#0x10]
;;;462      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000020  6051              STR      r1,[r2,#4]
000022  6902              LDR      r2,[r0,#0x10]
;;;463      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000024  6091              STR      r1,[r2,#8]
000026  6902              LDR      r2,[r0,#0x10]
;;;464      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000028  60d1              STR      r1,[r2,#0xc]
00002a  6942              LDR      r2,[r0,#0x14]
;;;465      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002c  6011              STR      r1,[r2,#0]
00002e  6942              LDR      r2,[r0,#0x14]
;;;466      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000030  6051              STR      r1,[r2,#4]
000032  6942              LDR      r2,[r0,#0x14]
;;;467      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000034  6091              STR      r1,[r2,#8]
000036  6940              LDR      r0,[r0,#0x14]
000038  60c1              STR      r1,[r0,#0xc]
;;;468    }
00003a  4770              BX       lr
;;;469    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_fsmc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_fsmc_c_2e710976____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_fsmc_c_2e710976____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_fsmc_c_2e710976____REVSH|
#line 144
|__asm___16_stm32f10x_fsmc_c_2e710976____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
