; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\dfu_mal.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\dfu_mal.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\DFU\inc -I..\..\..\Utilities\STM32_EVAL\Common -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\dfu_mal.crf ..\src\dfu_mal.c]
                          THUMB

                          AREA ||i.MAL_Erase||, CODE, READONLY, ALIGN=2

                  MAL_Erase PROC
;;;129    *******************************************************************************/
;;;130    uint16_t MAL_Erase(uint32_t SectorAddress)
000000  f000417c          AND      r1,r0,#0xfc000000
;;;131    {
;;;132    
;;;133      switch (SectorAddress & MAL_MASK)
000004  f1b16f00          CMP      r1,#0x8000000
000008  d001              BEQ      |L1.14|
;;;134      {
;;;135        case INTERNAL_FLASH_BASE:
;;;136          pMAL_Erase = FLASH_If_Erase;
;;;137          break;
;;;138          
;;;139    #if (defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)) && defined(USE_SPI_FLASH)
;;;140        case SPI_FLASH_BASE:
;;;141          pMAL_Erase = SPI_If_Erase;
;;;142          break;
;;;143    #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;144                
;;;145    #if defined(USE_STM3210E_EVAL) && defined(USE_NOR_FLASH)
;;;146        case NOR_FLASH_BASE:
;;;147          pMAL_Erase = NOR_If_Erase;
;;;148          break;
;;;149    #endif /* USE_STM3210E_EVAL */
;;;150          
;;;151        default:
;;;152          return MAL_FAIL;
00000a  2001              MOVS     r0,#1
;;;153      }
;;;154      return pMAL_Erase(SectorAddress);
;;;155    }
00000c  4770              BX       lr
                  |L1.14|
00000e  4903              LDR      r1,|L1.28|
000010  4a01              LDR      r2,|L1.24|
000012  600a              STR      r2,[r1,#0]            ;154  ; pMAL_Erase
000014  f7ffbffe          B.W      FLASH_If_Erase
;;;156    
                          ENDP

                  |L1.24|
                          DCD      FLASH_If_Erase
                  |L1.28|
                          DCD      ||area_number.11||

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                  MAL_GetStatus PROC
;;;230    *******************************************************************************/
;;;231    uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
000000  f3c06381          UBFX     r3,r0,#26,#2
;;;232    {
;;;233      uint8_t x = (SectorAddress  >> 26) & 0x03 ; /* 0x000000000 --> 0 */
;;;234      /* 0x640000000 --> 1 */
;;;235      /* 0x080000000 --> 2 */
;;;236    
;;;237      uint8_t y = Cmd & 0x01;
000004  f0010001          AND      r0,r1,#1
;;;238    
;;;239    #if defined(USE_STM3210E_EVAL) && defined(USE_NOR_FLASH)
;;;240      if ((x == 1) && (NOR_ID.Device_Code2 == NOR_M29W128G)&& (NOR_ID.Manufacturer_Code == 0x20))
;;;241      {
;;;242        x = 3 ;
;;;243      }
;;;244      else if((x == 1) && (NOR_ID.Device_Code2 == NOR_S29GL128) && (NOR_ID.Manufacturer_Code == 0x01))
;;;245      {
;;;246        x = 4 ;
;;;247      }  
;;;248    #endif /* USE_STM3210E_EVAL */
;;;249      
;;;250      SET_POLLING_TIMING(TimingTable[x][y]);  /* x: Erase/Write Timing */
000008  4906              LDR      r1,|L2.36|
00000a  eb010183          ADD      r1,r1,r3,LSL #2
00000e  f8113010          LDRB     r3,[r1,r0,LSL #1]
000012  7053              STRB     r3,[r2,#1]
000014  f8310010          LDRH     r0,[r1,r0,LSL #1]
000018  0a00              LSRS     r0,r0,#8
00001a  7090              STRB     r0,[r2,#2]
00001c  2000              MOVS     r0,#0
00001e  70d0              STRB     r0,[r2,#3]
;;;251      /* y: Media              */
;;;252      return MAL_OK;
;;;253    }
000020  4770              BX       lr
;;;254    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.constdata||

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=1

                  MAL_Init PROC
;;;89     *******************************************************************************/
;;;90     uint16_t MAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     
;;;93       FLASH_If_Init(); /* Internal Flash */
000002  f7fffffe          BL       FLASH_If_Init
;;;94     
;;;95     #if (defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)) && defined(USE_SPI_FLASH)
;;;96       SPI_If_Init();   /* SPI Flash */
;;;97     #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;98     
;;;99     #if (defined(USE_STM3210E_EVAL ) && defined(USE_NOR_FLASH))
;;;100     
;;;101      NOR_If_Init();  /* NOR Flash */
;;;102      FSMC_NOR_ReadID(&NOR_ID);
;;;103        
;;;104      FSMC_NOR_ReturnToReadMode();
;;;105    
;;;106      /* select the alternate descriptor following NOR ID */
;;;107      if ((NOR_ID.Manufacturer_Code == 0x01)&&(NOR_ID.Device_Code2 == NOR_S29GL128))
;;;108      {
;;;109        DFU_String_Descriptor[6].Descriptor = DFU_StringInterface2_3;
;;;110      } 
;;;111      
;;;112      /* select the alternate descriptor following NOR ID */
;;;113      if  ((NOR_ID.Manufacturer_Code == 0x20)&&(NOR_ID.Device_Code2 == NOR_M29W128G))
;;;114      {
;;;115        DFU_String_Descriptor[6].Descriptor = DFU_StringInterface2_2;
;;;116      }
;;;117     
;;;118    #endif /* USE_STM3210E_EVAL */
;;;119    
;;;120      return MAL_OK;
000006  2000              MOVS     r0,#0
;;;121    }
000008  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                  MAL_Read PROC
;;;196    *******************************************************************************/
;;;197    uint8_t *MAL_Read (uint32_t SectorAddress, uint32_t DataLength)
000000  f000427c          AND      r2,r0,#0xfc000000
;;;198    {
;;;199    
;;;200      switch (SectorAddress & MAL_MASK)
000004  f1b26f00          CMP      r2,#0x8000000
000008  d001              BEQ      |L4.14|
;;;201      {
;;;202        case INTERNAL_FLASH_BASE:
;;;203          pMAL_Read = FLASH_If_Read;
;;;204          break;
;;;205          
;;;206    #if (defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)) && defined(USE_SPI_FLASH)
;;;207        case SPI_FLASH_BASE:
;;;208          pMAL_Read = SPI_If_Read;
;;;209          break;
;;;210    #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;211    
;;;212    #if defined(USE_STM3210E_EVAL) && defined(USE_NOR_FLASH)
;;;213        case NOR_FLASH_BASE:
;;;214          pMAL_Read = NOR_If_Read;
;;;215          break;
;;;216    #endif /* USE_STM3210E_EVAL */
;;;217    
;;;218        default:
;;;219          return 0;
00000a  2000              MOVS     r0,#0
;;;220      }
;;;221      return pMAL_Read (SectorAddress, DataLength);
;;;222    }
00000c  4770              BX       lr
                  |L4.14|
00000e  4a03              LDR      r2,|L4.28|
000010  4b01              LDR      r3,|L4.24|
000012  6093              STR      r3,[r2,#8]            ;221  ; pMAL_Read
000014  f7ffbffe          B.W      FLASH_If_Read
;;;223    
                          ENDP

                  |L4.24|
                          DCD      FLASH_If_Read
                  |L4.28|
                          DCD      ||area_number.11||

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                  MAL_Write PROC
;;;163    *******************************************************************************/
;;;164    uint16_t MAL_Write (uint32_t SectorAddress, uint32_t DataLength)
000000  f000427c          AND      r2,r0,#0xfc000000
;;;165    {
;;;166    
;;;167      switch (SectorAddress & MAL_MASK)
000004  f1b26f00          CMP      r2,#0x8000000
000008  d001              BEQ      |L5.14|
;;;168      {
;;;169        case INTERNAL_FLASH_BASE:
;;;170          pMAL_Write = FLASH_If_Write;
;;;171          break;
;;;172    
;;;173    #if (defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)) && defined(USE_SPI_FLASH)
;;;174        case SPI_FLASH_BASE:
;;;175          pMAL_Write = SPI_If_Write;
;;;176          break;
;;;177    #endif /* USE_STM3210B_EVAL || USE_STM3210E_EVAL */      
;;;178    
;;;179    #if defined(USE_STM3210E_EVAL) && defined(USE_NOR_FLASH)
;;;180        case NOR_FLASH_BASE:
;;;181          pMAL_Write = NOR_If_Write;
;;;182          break;
;;;183    #endif /* USE_STM3210E_EVAL */
;;;184        default:
;;;185          return MAL_FAIL;
00000a  2001              MOVS     r0,#1
;;;186      }
;;;187      return pMAL_Write(SectorAddress, DataLength);
;;;188    }
00000c  4770              BX       lr
                  |L5.14|
00000e  4a03              LDR      r2,|L5.28|
000010  4b01              LDR      r3,|L5.24|
000012  6053              STR      r3,[r2,#4]            ;187  ; pMAL_Write
000014  f7ffbffe          B.W      FLASH_If_Write
;;;189    
                          ENDP

                  |L5.24|
                          DCD      FLASH_If_Write
                  |L5.28|
                          DCD      ||area_number.11||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MAL_Buffer
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  TimingTable
000000  0bb80014          DCW      0x0bb8,0x0014
000004  03e80019          DCW      0x03e8,0x0019
000008  00320032          DCW      0x0032,0x0032
00000c  03e80019          DCW      0x03e8,0x0019
000010  03e8002d          DCW      0x03e8,0x002d

                          AREA ||.data||, DATA, ALIGN=2

                  pMAL_Init
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  pMAL_Erase
                          DCD      0x00000000
                  pMAL_Write
                          DCD      0x00000000
                  pMAL_Read
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.data||
                  NOR_ID
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\src\\dfu_mal.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REV16|
#line 129 "D:\\Keil5\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_dfu_mal_c_MAL_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REVSH|
#line 144
|__asm___9_dfu_mal_c_MAL_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
